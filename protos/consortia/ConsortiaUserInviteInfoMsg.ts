// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaUserInviteInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaUserInviteInfoMsg {
  id: number;
  consortiaId: number;
  consortiaName: string;
  createDate: string;
  userId: number;
  userNickname: string;
  inviteId: number;
  inviteNickname: string;
  chairmanNickname: string;
  inviteDate: string;
  fromType: boolean;
  isexist: boolean;
  consortiaLevels: number;
  consortiaCount: number;
}

function createBaseConsortiaUserInviteInfoMsg(): ConsortiaUserInviteInfoMsg {
  return {
    id: 0,
    consortiaId: 0,
    consortiaName: "",
    createDate: "",
    userId: 0,
    userNickname: "",
    inviteId: 0,
    inviteNickname: "",
    chairmanNickname: "",
    inviteDate: "",
    fromType: false,
    isexist: false,
    consortiaLevels: 0,
    consortiaCount: 0,
  };
}

export const ConsortiaUserInviteInfoMsg: MessageFns<ConsortiaUserInviteInfoMsg> = {
  encode(message: ConsortiaUserInviteInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(16).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(26).string(message.consortiaName);
    }
    if (message.createDate !== "") {
      writer.uint32(34).string(message.createDate);
    }
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    if (message.userNickname !== "") {
      writer.uint32(50).string(message.userNickname);
    }
    if (message.inviteId !== 0) {
      writer.uint32(56).int32(message.inviteId);
    }
    if (message.inviteNickname !== "") {
      writer.uint32(66).string(message.inviteNickname);
    }
    if (message.chairmanNickname !== "") {
      writer.uint32(74).string(message.chairmanNickname);
    }
    if (message.inviteDate !== "") {
      writer.uint32(82).string(message.inviteDate);
    }
    if (message.fromType !== false) {
      writer.uint32(88).bool(message.fromType);
    }
    if (message.isexist !== false) {
      writer.uint32(96).bool(message.isexist);
    }
    if (message.consortiaLevels !== 0) {
      writer.uint32(104).int32(message.consortiaLevels);
    }
    if (message.consortiaCount !== 0) {
      writer.uint32(112).int32(message.consortiaCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaUserInviteInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaUserInviteInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userNickname = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.inviteId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.inviteNickname = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.chairmanNickname = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.inviteDate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.fromType = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isexist = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.consortiaLevels = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.consortiaCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaUserInviteInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      createDate: isSet(object.createDate) ? globalThis.String(object.createDate) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      userNickname: isSet(object.userNickname) ? globalThis.String(object.userNickname) : "",
      inviteId: isSet(object.inviteId) ? globalThis.Number(object.inviteId) : 0,
      inviteNickname: isSet(object.inviteNickname) ? globalThis.String(object.inviteNickname) : "",
      chairmanNickname: isSet(object.chairmanNickname) ? globalThis.String(object.chairmanNickname) : "",
      inviteDate: isSet(object.inviteDate) ? globalThis.String(object.inviteDate) : "",
      fromType: isSet(object.fromType) ? globalThis.Boolean(object.fromType) : false,
      isexist: isSet(object.isexist) ? globalThis.Boolean(object.isexist) : false,
      consortiaLevels: isSet(object.consortiaLevels) ? globalThis.Number(object.consortiaLevels) : 0,
      consortiaCount: isSet(object.consortiaCount) ? globalThis.Number(object.consortiaCount) : 0,
    };
  },

  toJSON(message: ConsortiaUserInviteInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.createDate !== "") {
      obj.createDate = message.createDate;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.userNickname !== "") {
      obj.userNickname = message.userNickname;
    }
    if (message.inviteId !== 0) {
      obj.inviteId = Math.round(message.inviteId);
    }
    if (message.inviteNickname !== "") {
      obj.inviteNickname = message.inviteNickname;
    }
    if (message.chairmanNickname !== "") {
      obj.chairmanNickname = message.chairmanNickname;
    }
    if (message.inviteDate !== "") {
      obj.inviteDate = message.inviteDate;
    }
    if (message.fromType !== false) {
      obj.fromType = message.fromType;
    }
    if (message.isexist !== false) {
      obj.isexist = message.isexist;
    }
    if (message.consortiaLevels !== 0) {
      obj.consortiaLevels = Math.round(message.consortiaLevels);
    }
    if (message.consortiaCount !== 0) {
      obj.consortiaCount = Math.round(message.consortiaCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaUserInviteInfoMsg>, I>>(base?: I): ConsortiaUserInviteInfoMsg {
    return ConsortiaUserInviteInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaUserInviteInfoMsg>, I>>(object: I): ConsortiaUserInviteInfoMsg {
    const message = createBaseConsortiaUserInviteInfoMsg();
    message.id = object.id ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.createDate = object.createDate ?? "";
    message.userId = object.userId ?? 0;
    message.userNickname = object.userNickname ?? "";
    message.inviteId = object.inviteId ?? 0;
    message.inviteNickname = object.inviteNickname ?? "";
    message.chairmanNickname = object.chairmanNickname ?? "";
    message.inviteDate = object.inviteDate ?? "";
    message.fromType = object.fromType ?? false;
    message.isexist = object.isexist ?? false;
    message.consortiaLevels = object.consortiaLevels ?? 0;
    message.consortiaCount = object.consortiaCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
