// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: mapshop/MapShopInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.mapshop";

export interface MapShopInfoMsg {
  userId: number;
  freshTime: string;
  bless: number;
  freshCount: number;
  items: number[];
  score: number;
  weeklyLimitItems: number[];
}

function createBaseMapShopInfoMsg(): MapShopInfoMsg {
  return { userId: 0, freshTime: "", bless: 0, freshCount: 0, items: [], score: 0, weeklyLimitItems: [] };
}

export const MapShopInfoMsg: MessageFns<MapShopInfoMsg> = {
  encode(message: MapShopInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.freshTime !== "") {
      writer.uint32(18).string(message.freshTime);
    }
    if (message.bless !== 0) {
      writer.uint32(24).int32(message.bless);
    }
    if (message.freshCount !== 0) {
      writer.uint32(32).int32(message.freshCount);
    }
    writer.uint32(42).fork();
    for (const v of message.items) {
      writer.int32(v);
    }
    writer.join();
    if (message.score !== 0) {
      writer.uint32(48).int32(message.score);
    }
    writer.uint32(58).fork();
    for (const v of message.weeklyLimitItems) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MapShopInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapShopInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.freshTime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bless = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.freshCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.items.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.items.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.weeklyLimitItems.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.weeklyLimitItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapShopInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      freshTime: isSet(object.freshTime) ? globalThis.String(object.freshTime) : "",
      bless: isSet(object.bless) ? globalThis.Number(object.bless) : 0,
      freshCount: isSet(object.freshCount) ? globalThis.Number(object.freshCount) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => globalThis.Number(e)) : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      weeklyLimitItems: globalThis.Array.isArray(object?.weeklyLimitItems)
        ? object.weeklyLimitItems.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: MapShopInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.freshTime !== "") {
      obj.freshTime = message.freshTime;
    }
    if (message.bless !== 0) {
      obj.bless = Math.round(message.bless);
    }
    if (message.freshCount !== 0) {
      obj.freshCount = Math.round(message.freshCount);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Math.round(e));
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.weeklyLimitItems?.length) {
      obj.weeklyLimitItems = message.weeklyLimitItems.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapShopInfoMsg>, I>>(base?: I): MapShopInfoMsg {
    return MapShopInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapShopInfoMsg>, I>>(object: I): MapShopInfoMsg {
    const message = createBaseMapShopInfoMsg();
    message.userId = object.userId ?? 0;
    message.freshTime = object.freshTime ?? "";
    message.bless = object.bless ?? 0;
    message.freshCount = object.freshCount ?? 0;
    message.items = object.items?.map((e) => e) || [];
    message.score = object.score ?? 0;
    message.weeklyLimitItems = object.weeklyLimitItems?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
