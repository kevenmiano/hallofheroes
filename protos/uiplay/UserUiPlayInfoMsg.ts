// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: uiplay/UserUiPlayInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.uiplay";

export interface UserUiPlayInfoMsg {
  playId: number;
  levelSort: number;
  lastTime: string;
  firstRewardSet: number[];
  uiPlayRewardCount: number;
  itemAdd: boolean;
}

function createBaseUserUiPlayInfoMsg(): UserUiPlayInfoMsg {
  return { playId: 0, levelSort: 0, lastTime: "", firstRewardSet: [], uiPlayRewardCount: 0, itemAdd: false };
}

export const UserUiPlayInfoMsg: MessageFns<UserUiPlayInfoMsg> = {
  encode(message: UserUiPlayInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playId !== 0) {
      writer.uint32(8).int32(message.playId);
    }
    if (message.levelSort !== 0) {
      writer.uint32(16).int32(message.levelSort);
    }
    if (message.lastTime !== "") {
      writer.uint32(26).string(message.lastTime);
    }
    writer.uint32(34).fork();
    for (const v of message.firstRewardSet) {
      writer.int32(v);
    }
    writer.join();
    if (message.uiPlayRewardCount !== 0) {
      writer.uint32(40).int32(message.uiPlayRewardCount);
    }
    if (message.itemAdd !== false) {
      writer.uint32(48).bool(message.itemAdd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserUiPlayInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserUiPlayInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.levelSort = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastTime = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.firstRewardSet.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.firstRewardSet.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uiPlayRewardCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.itemAdd = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserUiPlayInfoMsg {
    return {
      playId: isSet(object.playId) ? globalThis.Number(object.playId) : 0,
      levelSort: isSet(object.levelSort) ? globalThis.Number(object.levelSort) : 0,
      lastTime: isSet(object.lastTime) ? globalThis.String(object.lastTime) : "",
      firstRewardSet: globalThis.Array.isArray(object?.firstRewardSet)
        ? object.firstRewardSet.map((e: any) => globalThis.Number(e))
        : [],
      uiPlayRewardCount: isSet(object.uiPlayRewardCount) ? globalThis.Number(object.uiPlayRewardCount) : 0,
      itemAdd: isSet(object.itemAdd) ? globalThis.Boolean(object.itemAdd) : false,
    };
  },

  toJSON(message: UserUiPlayInfoMsg): unknown {
    const obj: any = {};
    if (message.playId !== 0) {
      obj.playId = Math.round(message.playId);
    }
    if (message.levelSort !== 0) {
      obj.levelSort = Math.round(message.levelSort);
    }
    if (message.lastTime !== "") {
      obj.lastTime = message.lastTime;
    }
    if (message.firstRewardSet?.length) {
      obj.firstRewardSet = message.firstRewardSet.map((e) => Math.round(e));
    }
    if (message.uiPlayRewardCount !== 0) {
      obj.uiPlayRewardCount = Math.round(message.uiPlayRewardCount);
    }
    if (message.itemAdd !== false) {
      obj.itemAdd = message.itemAdd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserUiPlayInfoMsg>, I>>(base?: I): UserUiPlayInfoMsg {
    return UserUiPlayInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserUiPlayInfoMsg>, I>>(object: I): UserUiPlayInfoMsg {
    const message = createBaseUserUiPlayInfoMsg();
    message.playId = object.playId ?? 0;
    message.levelSort = object.levelSort ?? 0;
    message.lastTime = object.lastTime ?? "";
    message.firstRewardSet = object.firstRewardSet?.map((e) => e) || [];
    message.uiPlayRewardCount = object.uiPlayRewardCount ?? 0;
    message.itemAdd = object.itemAdd ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
