// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ChairsRewardMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ChairsRewardMsg {
  cCCActiveUUID: string;
  uUID: string;
  userId: number;
  tokenChairs: string;
  rewardTypes: number;
  rewardState: number;
  serverName: string;
}

function createBaseChairsRewardMsg(): ChairsRewardMsg {
  return { cCCActiveUUID: "", uUID: "", userId: 0, tokenChairs: "", rewardTypes: 0, rewardState: 0, serverName: "" };
}

export const ChairsRewardMsg: MessageFns<ChairsRewardMsg> = {
  encode(message: ChairsRewardMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cCCActiveUUID !== "") {
      writer.uint32(10).string(message.cCCActiveUUID);
    }
    if (message.uUID !== "") {
      writer.uint32(18).string(message.uUID);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.tokenChairs !== "") {
      writer.uint32(34).string(message.tokenChairs);
    }
    if (message.rewardTypes !== 0) {
      writer.uint32(40).int32(message.rewardTypes);
    }
    if (message.rewardState !== 0) {
      writer.uint32(48).int32(message.rewardState);
    }
    if (message.serverName !== "") {
      writer.uint32(58).string(message.serverName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChairsRewardMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChairsRewardMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cCCActiveUUID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uUID = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenChairs = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rewardTypes = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rewardState = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChairsRewardMsg {
    return {
      cCCActiveUUID: isSet(object.cCCActiveUUID) ? globalThis.String(object.cCCActiveUUID) : "",
      uUID: isSet(object.uUID) ? globalThis.String(object.uUID) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      tokenChairs: isSet(object.tokenChairs) ? globalThis.String(object.tokenChairs) : "",
      rewardTypes: isSet(object.rewardTypes) ? globalThis.Number(object.rewardTypes) : 0,
      rewardState: isSet(object.rewardState) ? globalThis.Number(object.rewardState) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
    };
  },

  toJSON(message: ChairsRewardMsg): unknown {
    const obj: any = {};
    if (message.cCCActiveUUID !== "") {
      obj.cCCActiveUUID = message.cCCActiveUUID;
    }
    if (message.uUID !== "") {
      obj.uUID = message.uUID;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.tokenChairs !== "") {
      obj.tokenChairs = message.tokenChairs;
    }
    if (message.rewardTypes !== 0) {
      obj.rewardTypes = Math.round(message.rewardTypes);
    }
    if (message.rewardState !== 0) {
      obj.rewardState = Math.round(message.rewardState);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChairsRewardMsg>, I>>(base?: I): ChairsRewardMsg {
    return ChairsRewardMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChairsRewardMsg>, I>>(object: I): ChairsRewardMsg {
    const message = createBaseChairsRewardMsg();
    message.cCCActiveUUID = object.cCCActiveUUID ?? "";
    message.uUID = object.uUID ?? "";
    message.userId = object.userId ?? 0;
    message.tokenChairs = object.tokenChairs ?? "";
    message.rewardTypes = object.rewardTypes ?? 0;
    message.rewardState = object.rewardState ?? 0;
    message.serverName = object.serverName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
