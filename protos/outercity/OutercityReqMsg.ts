// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: outercity/OutercityReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.outercity";

export interface OutercityReqMsg {
  mapId: number;
  position: string;
  files: string;
  pathArray: number[];
  type: number;
  attackCount: number;
  simpleHeroInfo: string;
  armyPawn: number[];
  fightCapaity: number;
}

function createBaseOutercityReqMsg(): OutercityReqMsg {
  return {
    mapId: 0,
    position: "",
    files: "",
    pathArray: [],
    type: 0,
    attackCount: 0,
    simpleHeroInfo: "",
    armyPawn: [],
    fightCapaity: 0,
  };
}

export const OutercityReqMsg: MessageFns<OutercityReqMsg> = {
  encode(message: OutercityReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mapId !== 0) {
      writer.uint32(8).int32(message.mapId);
    }
    if (message.position !== "") {
      writer.uint32(18).string(message.position);
    }
    if (message.files !== "") {
      writer.uint32(26).string(message.files);
    }
    writer.uint32(34).fork();
    for (const v of message.pathArray) {
      writer.int32(v);
    }
    writer.join();
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.attackCount !== 0) {
      writer.uint32(48).int32(message.attackCount);
    }
    if (message.simpleHeroInfo !== "") {
      writer.uint32(58).string(message.simpleHeroInfo);
    }
    writer.uint32(66).fork();
    for (const v of message.armyPawn) {
      writer.int32(v);
    }
    writer.join();
    if (message.fightCapaity !== 0) {
      writer.uint32(72).int32(message.fightCapaity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutercityReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutercityReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.files = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.pathArray.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathArray.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.attackCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.simpleHeroInfo = reader.string();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.armyPawn.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.armyPawn.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.fightCapaity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutercityReqMsg {
    return {
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      files: isSet(object.files) ? globalThis.String(object.files) : "",
      pathArray: globalThis.Array.isArray(object?.pathArray)
        ? object.pathArray.map((e: any) => globalThis.Number(e))
        : [],
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      attackCount: isSet(object.attackCount) ? globalThis.Number(object.attackCount) : 0,
      simpleHeroInfo: isSet(object.simpleHeroInfo) ? globalThis.String(object.simpleHeroInfo) : "",
      armyPawn: globalThis.Array.isArray(object?.armyPawn) ? object.armyPawn.map((e: any) => globalThis.Number(e)) : [],
      fightCapaity: isSet(object.fightCapaity) ? globalThis.Number(object.fightCapaity) : 0,
    };
  },

  toJSON(message: OutercityReqMsg): unknown {
    const obj: any = {};
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.files !== "") {
      obj.files = message.files;
    }
    if (message.pathArray?.length) {
      obj.pathArray = message.pathArray.map((e) => Math.round(e));
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.attackCount !== 0) {
      obj.attackCount = Math.round(message.attackCount);
    }
    if (message.simpleHeroInfo !== "") {
      obj.simpleHeroInfo = message.simpleHeroInfo;
    }
    if (message.armyPawn?.length) {
      obj.armyPawn = message.armyPawn.map((e) => Math.round(e));
    }
    if (message.fightCapaity !== 0) {
      obj.fightCapaity = Math.round(message.fightCapaity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutercityReqMsg>, I>>(base?: I): OutercityReqMsg {
    return OutercityReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutercityReqMsg>, I>>(object: I): OutercityReqMsg {
    const message = createBaseOutercityReqMsg();
    message.mapId = object.mapId ?? 0;
    message.position = object.position ?? "";
    message.files = object.files ?? "";
    message.pathArray = object.pathArray?.map((e) => e) || [];
    message.type = object.type ?? 0;
    message.attackCount = object.attackCount ?? 0;
    message.simpleHeroInfo = object.simpleHeroInfo ?? "";
    message.armyPawn = object.armyPawn?.map((e) => e) || [];
    message.fightCapaity = object.fightCapaity ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
