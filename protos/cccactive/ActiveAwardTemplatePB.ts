// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ActiveAwardTemplatePB.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ActiveAwardTemplatePB {
  uuid: string;
  templateId: number;
  templateType: number;
  templateCount: number;
  templateShow: number;
  isBind: number;
  isNotice: number;
  remain1: string;
  remain2: string;
  remain3: string;
  remain4: string;
}

function createBaseActiveAwardTemplatePB(): ActiveAwardTemplatePB {
  return {
    uuid: "",
    templateId: 0,
    templateType: 0,
    templateCount: 0,
    templateShow: 0,
    isBind: 0,
    isNotice: 0,
    remain1: "",
    remain2: "",
    remain3: "",
    remain4: "",
  };
}

export const ActiveAwardTemplatePB: MessageFns<ActiveAwardTemplatePB> = {
  encode(message: ActiveAwardTemplatePB, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.templateId !== 0) {
      writer.uint32(16).int32(message.templateId);
    }
    if (message.templateType !== 0) {
      writer.uint32(24).int32(message.templateType);
    }
    if (message.templateCount !== 0) {
      writer.uint32(32).int32(message.templateCount);
    }
    if (message.templateShow !== 0) {
      writer.uint32(40).int32(message.templateShow);
    }
    if (message.isBind !== 0) {
      writer.uint32(48).int32(message.isBind);
    }
    if (message.isNotice !== 0) {
      writer.uint32(56).int32(message.isNotice);
    }
    if (message.remain1 !== "") {
      writer.uint32(66).string(message.remain1);
    }
    if (message.remain2 !== "") {
      writer.uint32(74).string(message.remain2);
    }
    if (message.remain3 !== "") {
      writer.uint32(82).string(message.remain3);
    }
    if (message.remain4 !== "") {
      writer.uint32(90).string(message.remain4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveAwardTemplatePB {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveAwardTemplatePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.templateType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.templateCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.templateShow = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isBind = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isNotice = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.remain1 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.remain2 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.remain3 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.remain4 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveAwardTemplatePB {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      templateType: isSet(object.templateType) ? globalThis.Number(object.templateType) : 0,
      templateCount: isSet(object.templateCount) ? globalThis.Number(object.templateCount) : 0,
      templateShow: isSet(object.templateShow) ? globalThis.Number(object.templateShow) : 0,
      isBind: isSet(object.isBind) ? globalThis.Number(object.isBind) : 0,
      isNotice: isSet(object.isNotice) ? globalThis.Number(object.isNotice) : 0,
      remain1: isSet(object.remain1) ? globalThis.String(object.remain1) : "",
      remain2: isSet(object.remain2) ? globalThis.String(object.remain2) : "",
      remain3: isSet(object.remain3) ? globalThis.String(object.remain3) : "",
      remain4: isSet(object.remain4) ? globalThis.String(object.remain4) : "",
    };
  },

  toJSON(message: ActiveAwardTemplatePB): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.templateType !== 0) {
      obj.templateType = Math.round(message.templateType);
    }
    if (message.templateCount !== 0) {
      obj.templateCount = Math.round(message.templateCount);
    }
    if (message.templateShow !== 0) {
      obj.templateShow = Math.round(message.templateShow);
    }
    if (message.isBind !== 0) {
      obj.isBind = Math.round(message.isBind);
    }
    if (message.isNotice !== 0) {
      obj.isNotice = Math.round(message.isNotice);
    }
    if (message.remain1 !== "") {
      obj.remain1 = message.remain1;
    }
    if (message.remain2 !== "") {
      obj.remain2 = message.remain2;
    }
    if (message.remain3 !== "") {
      obj.remain3 = message.remain3;
    }
    if (message.remain4 !== "") {
      obj.remain4 = message.remain4;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveAwardTemplatePB>, I>>(base?: I): ActiveAwardTemplatePB {
    return ActiveAwardTemplatePB.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveAwardTemplatePB>, I>>(object: I): ActiveAwardTemplatePB {
    const message = createBaseActiveAwardTemplatePB();
    message.uuid = object.uuid ?? "";
    message.templateId = object.templateId ?? 0;
    message.templateType = object.templateType ?? 0;
    message.templateCount = object.templateCount ?? 0;
    message.templateShow = object.templateShow ?? 0;
    message.isBind = object.isBind ?? 0;
    message.isNotice = object.isNotice ?? 0;
    message.remain1 = object.remain1 ?? "";
    message.remain2 = object.remain2 ?? "";
    message.remain3 = object.remain3 ?? "";
    message.remain4 = object.remain4 ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
