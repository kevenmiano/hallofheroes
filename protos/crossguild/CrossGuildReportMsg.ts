// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: crossguild/CrossGuildReportMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.crossguild";

export interface CrossGuildReportMsg {
  winUserNickName: string;
  loseUserNickName: string;
  winScore: number;
  loseScore: number;
  winCamp: number;
  loseCamp: number;
  reportTime: string;
  timestamp: string;
  road: number;
}

function createBaseCrossGuildReportMsg(): CrossGuildReportMsg {
  return {
    winUserNickName: "",
    loseUserNickName: "",
    winScore: 0,
    loseScore: 0,
    winCamp: 0,
    loseCamp: 0,
    reportTime: "",
    timestamp: "",
    road: 0,
  };
}

export const CrossGuildReportMsg: MessageFns<CrossGuildReportMsg> = {
  encode(message: CrossGuildReportMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.winUserNickName !== "") {
      writer.uint32(10).string(message.winUserNickName);
    }
    if (message.loseUserNickName !== "") {
      writer.uint32(18).string(message.loseUserNickName);
    }
    if (message.winScore !== 0) {
      writer.uint32(24).int32(message.winScore);
    }
    if (message.loseScore !== 0) {
      writer.uint32(32).int32(message.loseScore);
    }
    if (message.winCamp !== 0) {
      writer.uint32(40).int32(message.winCamp);
    }
    if (message.loseCamp !== 0) {
      writer.uint32(48).int32(message.loseCamp);
    }
    if (message.reportTime !== "") {
      writer.uint32(58).string(message.reportTime);
    }
    if (message.timestamp !== "") {
      writer.uint32(66).string(message.timestamp);
    }
    if (message.road !== 0) {
      writer.uint32(72).int32(message.road);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrossGuildReportMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrossGuildReportMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.winUserNickName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.loseUserNickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.winScore = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.loseScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.winCamp = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.loseCamp = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.reportTime = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.road = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrossGuildReportMsg {
    return {
      winUserNickName: isSet(object.winUserNickName) ? globalThis.String(object.winUserNickName) : "",
      loseUserNickName: isSet(object.loseUserNickName) ? globalThis.String(object.loseUserNickName) : "",
      winScore: isSet(object.winScore) ? globalThis.Number(object.winScore) : 0,
      loseScore: isSet(object.loseScore) ? globalThis.Number(object.loseScore) : 0,
      winCamp: isSet(object.winCamp) ? globalThis.Number(object.winCamp) : 0,
      loseCamp: isSet(object.loseCamp) ? globalThis.Number(object.loseCamp) : 0,
      reportTime: isSet(object.reportTime) ? globalThis.String(object.reportTime) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      road: isSet(object.road) ? globalThis.Number(object.road) : 0,
    };
  },

  toJSON(message: CrossGuildReportMsg): unknown {
    const obj: any = {};
    if (message.winUserNickName !== "") {
      obj.winUserNickName = message.winUserNickName;
    }
    if (message.loseUserNickName !== "") {
      obj.loseUserNickName = message.loseUserNickName;
    }
    if (message.winScore !== 0) {
      obj.winScore = Math.round(message.winScore);
    }
    if (message.loseScore !== 0) {
      obj.loseScore = Math.round(message.loseScore);
    }
    if (message.winCamp !== 0) {
      obj.winCamp = Math.round(message.winCamp);
    }
    if (message.loseCamp !== 0) {
      obj.loseCamp = Math.round(message.loseCamp);
    }
    if (message.reportTime !== "") {
      obj.reportTime = message.reportTime;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.road !== 0) {
      obj.road = Math.round(message.road);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrossGuildReportMsg>, I>>(base?: I): CrossGuildReportMsg {
    return CrossGuildReportMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrossGuildReportMsg>, I>>(object: I): CrossGuildReportMsg {
    const message = createBaseCrossGuildReportMsg();
    message.winUserNickName = object.winUserNickName ?? "";
    message.loseUserNickName = object.loseUserNickName ?? "";
    message.winScore = object.winScore ?? 0;
    message.loseScore = object.loseScore ?? 0;
    message.winCamp = object.winCamp ?? 0;
    message.loseCamp = object.loseCamp ?? 0;
    message.reportTime = object.reportTime ?? "";
    message.timestamp = object.timestamp ?? "";
    message.road = object.road ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
