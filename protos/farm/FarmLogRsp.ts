// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/FarmLogRsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface FarmLogRsp {
  playerId: number;
  operUserId: number;
  operNickName: string;
  desc: string;
  operDate: string;
  operCount: number;
  isAddFavGp: boolean;
  type: number;
}

function createBaseFarmLogRsp(): FarmLogRsp {
  return {
    playerId: 0,
    operUserId: 0,
    operNickName: "",
    desc: "",
    operDate: "",
    operCount: 0,
    isAddFavGp: false,
    type: 0,
  };
}

export const FarmLogRsp: MessageFns<FarmLogRsp> = {
  encode(message: FarmLogRsp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.operUserId !== 0) {
      writer.uint32(16).int32(message.operUserId);
    }
    if (message.operNickName !== "") {
      writer.uint32(26).string(message.operNickName);
    }
    if (message.desc !== "") {
      writer.uint32(34).string(message.desc);
    }
    if (message.operDate !== "") {
      writer.uint32(42).string(message.operDate);
    }
    if (message.operCount !== 0) {
      writer.uint32(48).int32(message.operCount);
    }
    if (message.isAddFavGp !== false) {
      writer.uint32(56).bool(message.isAddFavGp);
    }
    if (message.type !== 0) {
      writer.uint32(64).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FarmLogRsp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFarmLogRsp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operUserId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operNickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.operDate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.operCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isAddFavGp = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FarmLogRsp {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      operUserId: isSet(object.operUserId) ? globalThis.Number(object.operUserId) : 0,
      operNickName: isSet(object.operNickName) ? globalThis.String(object.operNickName) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      operDate: isSet(object.operDate) ? globalThis.String(object.operDate) : "",
      operCount: isSet(object.operCount) ? globalThis.Number(object.operCount) : 0,
      isAddFavGp: isSet(object.isAddFavGp) ? globalThis.Boolean(object.isAddFavGp) : false,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
    };
  },

  toJSON(message: FarmLogRsp): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.operUserId !== 0) {
      obj.operUserId = Math.round(message.operUserId);
    }
    if (message.operNickName !== "") {
      obj.operNickName = message.operNickName;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.operDate !== "") {
      obj.operDate = message.operDate;
    }
    if (message.operCount !== 0) {
      obj.operCount = Math.round(message.operCount);
    }
    if (message.isAddFavGp !== false) {
      obj.isAddFavGp = message.isAddFavGp;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FarmLogRsp>, I>>(base?: I): FarmLogRsp {
    return FarmLogRsp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FarmLogRsp>, I>>(object: I): FarmLogRsp {
    const message = createBaseFarmLogRsp();
    message.playerId = object.playerId ?? 0;
    message.operUserId = object.operUserId ?? 0;
    message.operNickName = object.operNickName ?? "";
    message.desc = object.desc ?? "";
    message.operDate = object.operDate ?? "";
    message.operCount = object.operCount ?? 0;
    message.isAddFavGp = object.isAddFavGp ?? false;
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
