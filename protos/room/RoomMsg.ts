// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: room/RoomMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.room";

export interface RoomMsg {
  roomId: number;
  campaignId: number;
  masterId: number;
  name: string;
  count: number;
  capacity: number;
  roomState: number;
  roomType: number;
  isSetPassword: boolean;
  roomPlayer: number[];
  masterServerName: string;
}

function createBaseRoomMsg(): RoomMsg {
  return {
    roomId: 0,
    campaignId: 0,
    masterId: 0,
    name: "",
    count: 0,
    capacity: 0,
    roomState: 0,
    roomType: 0,
    isSetPassword: false,
    roomPlayer: [],
    masterServerName: "",
  };
}

export const RoomMsg: MessageFns<RoomMsg> = {
  encode(message: RoomMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== 0) {
      writer.uint32(8).int32(message.roomId);
    }
    if (message.campaignId !== 0) {
      writer.uint32(16).int32(message.campaignId);
    }
    if (message.masterId !== 0) {
      writer.uint32(24).int32(message.masterId);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.count !== 0) {
      writer.uint32(40).int32(message.count);
    }
    if (message.capacity !== 0) {
      writer.uint32(48).int32(message.capacity);
    }
    if (message.roomState !== 0) {
      writer.uint32(56).int32(message.roomState);
    }
    if (message.roomType !== 0) {
      writer.uint32(64).int32(message.roomType);
    }
    if (message.isSetPassword !== false) {
      writer.uint32(72).bool(message.isSetPassword);
    }
    writer.uint32(82).fork();
    for (const v of message.roomPlayer) {
      writer.int32(v);
    }
    writer.join();
    if (message.masterServerName !== "") {
      writer.uint32(90).string(message.masterServerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.masterId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.capacity = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.roomState = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.roomType = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isSetPassword = reader.bool();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.roomPlayer.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roomPlayer.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.masterServerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomMsg {
    return {
      roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      masterId: isSet(object.masterId) ? globalThis.Number(object.masterId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      capacity: isSet(object.capacity) ? globalThis.Number(object.capacity) : 0,
      roomState: isSet(object.roomState) ? globalThis.Number(object.roomState) : 0,
      roomType: isSet(object.roomType) ? globalThis.Number(object.roomType) : 0,
      isSetPassword: isSet(object.isSetPassword) ? globalThis.Boolean(object.isSetPassword) : false,
      roomPlayer: globalThis.Array.isArray(object?.roomPlayer)
        ? object.roomPlayer.map((e: any) => globalThis.Number(e))
        : [],
      masterServerName: isSet(object.masterServerName) ? globalThis.String(object.masterServerName) : "",
    };
  },

  toJSON(message: RoomMsg): unknown {
    const obj: any = {};
    if (message.roomId !== 0) {
      obj.roomId = Math.round(message.roomId);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.masterId !== 0) {
      obj.masterId = Math.round(message.masterId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.capacity !== 0) {
      obj.capacity = Math.round(message.capacity);
    }
    if (message.roomState !== 0) {
      obj.roomState = Math.round(message.roomState);
    }
    if (message.roomType !== 0) {
      obj.roomType = Math.round(message.roomType);
    }
    if (message.isSetPassword !== false) {
      obj.isSetPassword = message.isSetPassword;
    }
    if (message.roomPlayer?.length) {
      obj.roomPlayer = message.roomPlayer.map((e) => Math.round(e));
    }
    if (message.masterServerName !== "") {
      obj.masterServerName = message.masterServerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomMsg>, I>>(base?: I): RoomMsg {
    return RoomMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomMsg>, I>>(object: I): RoomMsg {
    const message = createBaseRoomMsg();
    message.roomId = object.roomId ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.masterId = object.masterId ?? 0;
    message.name = object.name ?? "";
    message.count = object.count ?? 0;
    message.capacity = object.capacity ?? 0;
    message.roomState = object.roomState ?? 0;
    message.roomType = object.roomType ?? 0;
    message.isSetPassword = object.isSetPassword ?? false;
    message.roomPlayer = object.roomPlayer?.map((e) => e) || [];
    message.masterServerName = object.masterServerName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
