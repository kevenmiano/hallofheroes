// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: secret/SecretReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.secret";

export interface SecretReqMsg {
  secretId: number;
  optionId: number;
  opType: number;
  curLayer: number;
  payType: number;
  isSkip: number;
}

function createBaseSecretReqMsg(): SecretReqMsg {
  return { secretId: 0, optionId: 0, opType: 0, curLayer: 0, payType: 0, isSkip: 0 };
}

export const SecretReqMsg: MessageFns<SecretReqMsg> = {
  encode(message: SecretReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretId !== 0) {
      writer.uint32(8).int32(message.secretId);
    }
    if (message.optionId !== 0) {
      writer.uint32(16).int32(message.optionId);
    }
    if (message.opType !== 0) {
      writer.uint32(24).int32(message.opType);
    }
    if (message.curLayer !== 0) {
      writer.uint32(32).int32(message.curLayer);
    }
    if (message.payType !== 0) {
      writer.uint32(40).int32(message.payType);
    }
    if (message.isSkip !== 0) {
      writer.uint32(48).int32(message.isSkip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.secretId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.optionId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.curLayer = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isSkip = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretReqMsg {
    return {
      secretId: isSet(object.secretId) ? globalThis.Number(object.secretId) : 0,
      optionId: isSet(object.optionId) ? globalThis.Number(object.optionId) : 0,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      curLayer: isSet(object.curLayer) ? globalThis.Number(object.curLayer) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
      isSkip: isSet(object.isSkip) ? globalThis.Number(object.isSkip) : 0,
    };
  },

  toJSON(message: SecretReqMsg): unknown {
    const obj: any = {};
    if (message.secretId !== 0) {
      obj.secretId = Math.round(message.secretId);
    }
    if (message.optionId !== 0) {
      obj.optionId = Math.round(message.optionId);
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.curLayer !== 0) {
      obj.curLayer = Math.round(message.curLayer);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    if (message.isSkip !== 0) {
      obj.isSkip = Math.round(message.isSkip);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecretReqMsg>, I>>(base?: I): SecretReqMsg {
    return SecretReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecretReqMsg>, I>>(object: I): SecretReqMsg {
    const message = createBaseSecretReqMsg();
    message.secretId = object.secretId ?? 0;
    message.optionId = object.optionId ?? 0;
    message.opType = object.opType ?? 0;
    message.curLayer = object.curLayer ?? 0;
    message.payType = object.payType ?? 0;
    message.isSkip = object.isSkip ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
