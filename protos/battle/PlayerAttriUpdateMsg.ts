// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/PlayerAttriUpdateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface PlayerAttriUpdateMsg {
  userId: number;
  geste: number;
  type: number;
  item: number[];
  score: number;
  isAdd: boolean;
  warCampaignId: number;
  lastFail: number;
  result: boolean;
}

function createBasePlayerAttriUpdateMsg(): PlayerAttriUpdateMsg {
  return {
    userId: 0,
    geste: 0,
    type: 0,
    item: [],
    score: 0,
    isAdd: false,
    warCampaignId: 0,
    lastFail: 0,
    result: false,
  };
}

export const PlayerAttriUpdateMsg: MessageFns<PlayerAttriUpdateMsg> = {
  encode(message: PlayerAttriUpdateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.geste !== 0) {
      writer.uint32(16).int32(message.geste);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    writer.uint32(34).fork();
    for (const v of message.item) {
      writer.int32(v);
    }
    writer.join();
    if (message.score !== 0) {
      writer.uint32(40).int32(message.score);
    }
    if (message.isAdd !== false) {
      writer.uint32(48).bool(message.isAdd);
    }
    if (message.warCampaignId !== 0) {
      writer.uint32(56).int32(message.warCampaignId);
    }
    if (message.lastFail !== 0) {
      writer.uint32(64).int32(message.lastFail);
    }
    if (message.result !== false) {
      writer.uint32(72).bool(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerAttriUpdateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerAttriUpdateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.item.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.item.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isAdd = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.warCampaignId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.lastFail = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerAttriUpdateMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      item: globalThis.Array.isArray(object?.item) ? object.item.map((e: any) => globalThis.Number(e)) : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      isAdd: isSet(object.isAdd) ? globalThis.Boolean(object.isAdd) : false,
      warCampaignId: isSet(object.warCampaignId) ? globalThis.Number(object.warCampaignId) : 0,
      lastFail: isSet(object.lastFail) ? globalThis.Number(object.lastFail) : 0,
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
    };
  },

  toJSON(message: PlayerAttriUpdateMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.item?.length) {
      obj.item = message.item.map((e) => Math.round(e));
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.isAdd !== false) {
      obj.isAdd = message.isAdd;
    }
    if (message.warCampaignId !== 0) {
      obj.warCampaignId = Math.round(message.warCampaignId);
    }
    if (message.lastFail !== 0) {
      obj.lastFail = Math.round(message.lastFail);
    }
    if (message.result !== false) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerAttriUpdateMsg>, I>>(base?: I): PlayerAttriUpdateMsg {
    return PlayerAttriUpdateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerAttriUpdateMsg>, I>>(object: I): PlayerAttriUpdateMsg {
    const message = createBasePlayerAttriUpdateMsg();
    message.userId = object.userId ?? 0;
    message.geste = object.geste ?? 0;
    message.type = object.type ?? 0;
    message.item = object.item?.map((e) => e) || [];
    message.score = object.score ?? 0;
    message.isAdd = object.isAdd ?? false;
    message.warCampaignId = object.warCampaignId ?? 0;
    message.lastFail = object.lastFail ?? 0;
    message.result = object.result ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
