// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: building/BuildingReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.building";

export interface BuildingReqMsg {
  orderId: number;
  position: string;
  index: number;
  userId: number;
  nodeId: number;
  sonNodeId: number;
}

function createBaseBuildingReqMsg(): BuildingReqMsg {
  return { orderId: 0, position: "", index: 0, userId: 0, nodeId: 0, sonNodeId: 0 };
}

export const BuildingReqMsg: MessageFns<BuildingReqMsg> = {
  encode(message: BuildingReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== 0) {
      writer.uint32(8).int32(message.orderId);
    }
    if (message.position !== "") {
      writer.uint32(18).string(message.position);
    }
    if (message.index !== 0) {
      writer.uint32(24).int32(message.index);
    }
    if (message.userId !== 0) {
      writer.uint32(32).int32(message.userId);
    }
    if (message.nodeId !== 0) {
      writer.uint32(40).int32(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      writer.uint32(48).int32(message.sonNodeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildingReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildingReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.orderId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sonNodeId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildingReqMsg {
    return {
      orderId: isSet(object.orderId) ? globalThis.Number(object.orderId) : 0,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      sonNodeId: isSet(object.sonNodeId) ? globalThis.Number(object.sonNodeId) : 0,
    };
  },

  toJSON(message: BuildingReqMsg): unknown {
    const obj: any = {};
    if (message.orderId !== 0) {
      obj.orderId = Math.round(message.orderId);
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      obj.sonNodeId = Math.round(message.sonNodeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildingReqMsg>, I>>(base?: I): BuildingReqMsg {
    return BuildingReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildingReqMsg>, I>>(object: I): BuildingReqMsg {
    const message = createBaseBuildingReqMsg();
    message.orderId = object.orderId ?? 0;
    message.position = object.position ?? "";
    message.index = object.index ?? 0;
    message.userId = object.userId ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.sonNodeId = object.sonNodeId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
