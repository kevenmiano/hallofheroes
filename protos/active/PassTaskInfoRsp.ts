// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/PassTaskInfoRsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface PassTaskInfoRsp {
  exp: number;
  grade: number;
  status: number[];
  dayFreshNum: number;
  weekFreshNum: number;
  originId: number;
}

function createBasePassTaskInfoRsp(): PassTaskInfoRsp {
  return { exp: 0, grade: 0, status: [], dayFreshNum: 0, weekFreshNum: 0, originId: 0 };
}

export const PassTaskInfoRsp: MessageFns<PassTaskInfoRsp> = {
  encode(message: PassTaskInfoRsp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exp !== 0) {
      writer.uint32(8).int32(message.exp);
    }
    if (message.grade !== 0) {
      writer.uint32(16).int32(message.grade);
    }
    writer.uint32(26).fork();
    for (const v of message.status) {
      writer.int32(v);
    }
    writer.join();
    if (message.dayFreshNum !== 0) {
      writer.uint32(32).int32(message.dayFreshNum);
    }
    if (message.weekFreshNum !== 0) {
      writer.uint32(40).int32(message.weekFreshNum);
    }
    if (message.originId !== 0) {
      writer.uint32(48).int32(message.originId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PassTaskInfoRsp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePassTaskInfoRsp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exp = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.status.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.status.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dayFreshNum = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.weekFreshNum = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.originId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PassTaskInfoRsp {
    return {
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      status: globalThis.Array.isArray(object?.status) ? object.status.map((e: any) => globalThis.Number(e)) : [],
      dayFreshNum: isSet(object.dayFreshNum) ? globalThis.Number(object.dayFreshNum) : 0,
      weekFreshNum: isSet(object.weekFreshNum) ? globalThis.Number(object.weekFreshNum) : 0,
      originId: isSet(object.originId) ? globalThis.Number(object.originId) : 0,
    };
  },

  toJSON(message: PassTaskInfoRsp): unknown {
    const obj: any = {};
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => Math.round(e));
    }
    if (message.dayFreshNum !== 0) {
      obj.dayFreshNum = Math.round(message.dayFreshNum);
    }
    if (message.weekFreshNum !== 0) {
      obj.weekFreshNum = Math.round(message.weekFreshNum);
    }
    if (message.originId !== 0) {
      obj.originId = Math.round(message.originId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PassTaskInfoRsp>, I>>(base?: I): PassTaskInfoRsp {
    return PassTaskInfoRsp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PassTaskInfoRsp>, I>>(object: I): PassTaskInfoRsp {
    const message = createBasePassTaskInfoRsp();
    message.exp = object.exp ?? 0;
    message.grade = object.grade ?? 0;
    message.status = object.status?.map((e) => e) || [];
    message.dayFreshNum = object.dayFreshNum ?? 0;
    message.weekFreshNum = object.weekFreshNum ?? 0;
    message.originId = object.originId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
