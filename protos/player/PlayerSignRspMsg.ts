// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/PlayerSignRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface PlayerSignRspMsg {
  signDate: string;
  signTimes: number;
  signSite: number;
  reissueNum: number;
  rewardState: string;
}

function createBasePlayerSignRspMsg(): PlayerSignRspMsg {
  return { signDate: "", signTimes: 0, signSite: 0, reissueNum: 0, rewardState: "" };
}

export const PlayerSignRspMsg: MessageFns<PlayerSignRspMsg> = {
  encode(message: PlayerSignRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signDate !== "") {
      writer.uint32(10).string(message.signDate);
    }
    if (message.signTimes !== 0) {
      writer.uint32(16).int32(message.signTimes);
    }
    if (message.signSite !== 0) {
      writer.uint32(24).int32(message.signSite);
    }
    if (message.reissueNum !== 0) {
      writer.uint32(32).int32(message.reissueNum);
    }
    if (message.rewardState !== "") {
      writer.uint32(42).string(message.rewardState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerSignRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSignRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.signTimes = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.signSite = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.reissueNum = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rewardState = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSignRspMsg {
    return {
      signDate: isSet(object.signDate) ? globalThis.String(object.signDate) : "",
      signTimes: isSet(object.signTimes) ? globalThis.Number(object.signTimes) : 0,
      signSite: isSet(object.signSite) ? globalThis.Number(object.signSite) : 0,
      reissueNum: isSet(object.reissueNum) ? globalThis.Number(object.reissueNum) : 0,
      rewardState: isSet(object.rewardState) ? globalThis.String(object.rewardState) : "",
    };
  },

  toJSON(message: PlayerSignRspMsg): unknown {
    const obj: any = {};
    if (message.signDate !== "") {
      obj.signDate = message.signDate;
    }
    if (message.signTimes !== 0) {
      obj.signTimes = Math.round(message.signTimes);
    }
    if (message.signSite !== 0) {
      obj.signSite = Math.round(message.signSite);
    }
    if (message.reissueNum !== 0) {
      obj.reissueNum = Math.round(message.reissueNum);
    }
    if (message.rewardState !== "") {
      obj.rewardState = message.rewardState;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSignRspMsg>, I>>(base?: I): PlayerSignRspMsg {
    return PlayerSignRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerSignRspMsg>, I>>(object: I): PlayerSignRspMsg {
    const message = createBasePlayerSignRspMsg();
    message.signDate = object.signDate ?? "";
    message.signTimes = object.signTimes ?? 0;
    message.signSite = object.signSite ?? 0;
    message.reissueNum = object.reissueNum ?? 0;
    message.rewardState = object.rewardState ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
