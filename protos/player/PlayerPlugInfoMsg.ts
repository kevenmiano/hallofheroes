// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/PlayerPlugInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface PlayerPlugInfoMsg {
  ip: string;
  userId: number;
  userName: string;
  sendTime: string;
  ext: string;
  sign: string;
}

function createBasePlayerPlugInfoMsg(): PlayerPlugInfoMsg {
  return { ip: "", userId: 0, userName: "", sendTime: "", ext: "", sign: "" };
}

export const PlayerPlugInfoMsg: MessageFns<PlayerPlugInfoMsg> = {
  encode(message: PlayerPlugInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip !== "") {
      writer.uint32(10).string(message.ip);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(26).string(message.userName);
    }
    if (message.sendTime !== "") {
      writer.uint32(34).string(message.sendTime);
    }
    if (message.ext !== "") {
      writer.uint32(42).string(message.ext);
    }
    if (message.sign !== "") {
      writer.uint32(50).string(message.sign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerPlugInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerPlugInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sendTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ext = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerPlugInfoMsg {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      sendTime: isSet(object.sendTime) ? globalThis.String(object.sendTime) : "",
      ext: isSet(object.ext) ? globalThis.String(object.ext) : "",
      sign: isSet(object.sign) ? globalThis.String(object.sign) : "",
    };
  },

  toJSON(message: PlayerPlugInfoMsg): unknown {
    const obj: any = {};
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.sendTime !== "") {
      obj.sendTime = message.sendTime;
    }
    if (message.ext !== "") {
      obj.ext = message.ext;
    }
    if (message.sign !== "") {
      obj.sign = message.sign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerPlugInfoMsg>, I>>(base?: I): PlayerPlugInfoMsg {
    return PlayerPlugInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerPlugInfoMsg>, I>>(object: I): PlayerPlugInfoMsg {
    const message = createBasePlayerPlugInfoMsg();
    message.ip = object.ip ?? "";
    message.userId = object.userId ?? 0;
    message.userName = object.userName ?? "";
    message.sendTime = object.sendTime ?? "";
    message.ext = object.ext ?? "";
    message.sign = object.sign ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
