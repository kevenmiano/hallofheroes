// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vehicle/PlayerVehicleMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vehicle";

export interface PlayerVehicleMsg {
  id: string;
  templateId: string;
  hp: string;
  team: string;
  buffState: number[];
  grade: string;
  name: string;
  head: string;
  x: string;
  y: string;
  playerId: string;
  consortia: string;
  vip: string;
  appellId: string;
  rebornTime: string;
  npcNodeId: string;
  serverName: string;
  vipType: string;
  isBackPlayer: string;
  maxHp: string;
  defaultSkills: string;
  isHoldKey: string;
}

function createBasePlayerVehicleMsg(): PlayerVehicleMsg {
  return {
    id: "",
    templateId: "",
    hp: "",
    team: "",
    buffState: [],
    grade: "",
    name: "",
    head: "",
    x: "",
    y: "",
    playerId: "",
    consortia: "",
    vip: "",
    appellId: "",
    rebornTime: "",
    npcNodeId: "",
    serverName: "",
    vipType: "",
    isBackPlayer: "",
    maxHp: "",
    defaultSkills: "",
    isHoldKey: "",
  };
}

export const PlayerVehicleMsg: MessageFns<PlayerVehicleMsg> = {
  encode(message: PlayerVehicleMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.templateId !== "") {
      writer.uint32(18).string(message.templateId);
    }
    if (message.hp !== "") {
      writer.uint32(26).string(message.hp);
    }
    if (message.team !== "") {
      writer.uint32(34).string(message.team);
    }
    writer.uint32(42).fork();
    for (const v of message.buffState) {
      writer.int32(v);
    }
    writer.join();
    if (message.grade !== "") {
      writer.uint32(50).string(message.grade);
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.head !== "") {
      writer.uint32(66).string(message.head);
    }
    if (message.x !== "") {
      writer.uint32(74).string(message.x);
    }
    if (message.y !== "") {
      writer.uint32(82).string(message.y);
    }
    if (message.playerId !== "") {
      writer.uint32(90).string(message.playerId);
    }
    if (message.consortia !== "") {
      writer.uint32(98).string(message.consortia);
    }
    if (message.vip !== "") {
      writer.uint32(106).string(message.vip);
    }
    if (message.appellId !== "") {
      writer.uint32(114).string(message.appellId);
    }
    if (message.rebornTime !== "") {
      writer.uint32(122).string(message.rebornTime);
    }
    if (message.npcNodeId !== "") {
      writer.uint32(130).string(message.npcNodeId);
    }
    if (message.serverName !== "") {
      writer.uint32(138).string(message.serverName);
    }
    if (message.vipType !== "") {
      writer.uint32(146).string(message.vipType);
    }
    if (message.isBackPlayer !== "") {
      writer.uint32(154).string(message.isBackPlayer);
    }
    if (message.maxHp !== "") {
      writer.uint32(162).string(message.maxHp);
    }
    if (message.defaultSkills !== "") {
      writer.uint32(170).string(message.defaultSkills);
    }
    if (message.isHoldKey !== "") {
      writer.uint32(178).string(message.isHoldKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerVehicleMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerVehicleMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.templateId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hp = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.buffState.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.buffState.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.grade = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.head = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.x = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.y = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.consortia = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.vip = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.appellId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.rebornTime = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.npcNodeId = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.vipType = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.isBackPlayer = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.maxHp = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.defaultSkills = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.isHoldKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerVehicleMsg {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : "",
      hp: isSet(object.hp) ? globalThis.String(object.hp) : "",
      team: isSet(object.team) ? globalThis.String(object.team) : "",
      buffState: globalThis.Array.isArray(object?.buffState)
        ? object.buffState.map((e: any) => globalThis.Number(e))
        : [],
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      head: isSet(object.head) ? globalThis.String(object.head) : "",
      x: isSet(object.x) ? globalThis.String(object.x) : "",
      y: isSet(object.y) ? globalThis.String(object.y) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      consortia: isSet(object.consortia) ? globalThis.String(object.consortia) : "",
      vip: isSet(object.vip) ? globalThis.String(object.vip) : "",
      appellId: isSet(object.appellId) ? globalThis.String(object.appellId) : "",
      rebornTime: isSet(object.rebornTime) ? globalThis.String(object.rebornTime) : "",
      npcNodeId: isSet(object.npcNodeId) ? globalThis.String(object.npcNodeId) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      vipType: isSet(object.vipType) ? globalThis.String(object.vipType) : "",
      isBackPlayer: isSet(object.isBackPlayer) ? globalThis.String(object.isBackPlayer) : "",
      maxHp: isSet(object.maxHp) ? globalThis.String(object.maxHp) : "",
      defaultSkills: isSet(object.defaultSkills) ? globalThis.String(object.defaultSkills) : "",
      isHoldKey: isSet(object.isHoldKey) ? globalThis.String(object.isHoldKey) : "",
    };
  },

  toJSON(message: PlayerVehicleMsg): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.templateId !== "") {
      obj.templateId = message.templateId;
    }
    if (message.hp !== "") {
      obj.hp = message.hp;
    }
    if (message.team !== "") {
      obj.team = message.team;
    }
    if (message.buffState?.length) {
      obj.buffState = message.buffState.map((e) => Math.round(e));
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.head !== "") {
      obj.head = message.head;
    }
    if (message.x !== "") {
      obj.x = message.x;
    }
    if (message.y !== "") {
      obj.y = message.y;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.consortia !== "") {
      obj.consortia = message.consortia;
    }
    if (message.vip !== "") {
      obj.vip = message.vip;
    }
    if (message.appellId !== "") {
      obj.appellId = message.appellId;
    }
    if (message.rebornTime !== "") {
      obj.rebornTime = message.rebornTime;
    }
    if (message.npcNodeId !== "") {
      obj.npcNodeId = message.npcNodeId;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.vipType !== "") {
      obj.vipType = message.vipType;
    }
    if (message.isBackPlayer !== "") {
      obj.isBackPlayer = message.isBackPlayer;
    }
    if (message.maxHp !== "") {
      obj.maxHp = message.maxHp;
    }
    if (message.defaultSkills !== "") {
      obj.defaultSkills = message.defaultSkills;
    }
    if (message.isHoldKey !== "") {
      obj.isHoldKey = message.isHoldKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerVehicleMsg>, I>>(base?: I): PlayerVehicleMsg {
    return PlayerVehicleMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerVehicleMsg>, I>>(object: I): PlayerVehicleMsg {
    const message = createBasePlayerVehicleMsg();
    message.id = object.id ?? "";
    message.templateId = object.templateId ?? "";
    message.hp = object.hp ?? "";
    message.team = object.team ?? "";
    message.buffState = object.buffState?.map((e) => e) || [];
    message.grade = object.grade ?? "";
    message.name = object.name ?? "";
    message.head = object.head ?? "";
    message.x = object.x ?? "";
    message.y = object.y ?? "";
    message.playerId = object.playerId ?? "";
    message.consortia = object.consortia ?? "";
    message.vip = object.vip ?? "";
    message.appellId = object.appellId ?? "";
    message.rebornTime = object.rebornTime ?? "";
    message.npcNodeId = object.npcNodeId ?? "";
    message.serverName = object.serverName ?? "";
    message.vipType = object.vipType ?? "";
    message.isBackPlayer = object.isBackPlayer ?? "";
    message.maxHp = object.maxHp ?? "";
    message.defaultSkills = object.defaultSkills ?? "";
    message.isHoldKey = object.isHoldKey ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
