// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/AllExchangeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface AllExchangeMsg {
  id: string;
  begin: string;
  end: string;
  isopen: boolean;
  allPoint: number;
  boxChangeCount: string;
  allChangeCount: number;
  changeNeedPoint: string;
  point: string;
  exchangeCount: string;
  totalExchangeCount: string;
  serverAwardState: string;
  changeItemCount: number;
  allPointAward: string;
  boxAward: number[];
  serverAward: number[];
  changeItem: number;
}

function createBaseAllExchangeMsg(): AllExchangeMsg {
  return {
    id: "",
    begin: "",
    end: "",
    isopen: false,
    allPoint: 0,
    boxChangeCount: "",
    allChangeCount: 0,
    changeNeedPoint: "",
    point: "",
    exchangeCount: "",
    totalExchangeCount: "",
    serverAwardState: "",
    changeItemCount: 0,
    allPointAward: "",
    boxAward: [],
    serverAward: [],
    changeItem: 0,
  };
}

export const AllExchangeMsg: MessageFns<AllExchangeMsg> = {
  encode(message: AllExchangeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.begin !== "") {
      writer.uint32(18).string(message.begin);
    }
    if (message.end !== "") {
      writer.uint32(26).string(message.end);
    }
    if (message.isopen !== false) {
      writer.uint32(32).bool(message.isopen);
    }
    if (message.allPoint !== 0) {
      writer.uint32(40).int32(message.allPoint);
    }
    if (message.boxChangeCount !== "") {
      writer.uint32(50).string(message.boxChangeCount);
    }
    if (message.allChangeCount !== 0) {
      writer.uint32(56).int32(message.allChangeCount);
    }
    if (message.changeNeedPoint !== "") {
      writer.uint32(66).string(message.changeNeedPoint);
    }
    if (message.point !== "") {
      writer.uint32(74).string(message.point);
    }
    if (message.exchangeCount !== "") {
      writer.uint32(82).string(message.exchangeCount);
    }
    if (message.totalExchangeCount !== "") {
      writer.uint32(90).string(message.totalExchangeCount);
    }
    if (message.serverAwardState !== "") {
      writer.uint32(98).string(message.serverAwardState);
    }
    if (message.changeItemCount !== 0) {
      writer.uint32(104).int32(message.changeItemCount);
    }
    if (message.allPointAward !== "") {
      writer.uint32(114).string(message.allPointAward);
    }
    writer.uint32(122).fork();
    for (const v of message.boxAward) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(130).fork();
    for (const v of message.serverAward) {
      writer.int32(v);
    }
    writer.join();
    if (message.changeItem !== 0) {
      writer.uint32(136).int32(message.changeItem);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllExchangeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllExchangeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.begin = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.end = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isopen = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.allPoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.boxChangeCount = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.allChangeCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.changeNeedPoint = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.point = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.exchangeCount = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.totalExchangeCount = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.serverAwardState = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.changeItemCount = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.allPointAward = reader.string();
          continue;
        }
        case 15: {
          if (tag === 120) {
            message.boxAward.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.boxAward.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag === 128) {
            message.serverAward.push(reader.int32());

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.serverAward.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.changeItem = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllExchangeMsg {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      begin: isSet(object.begin) ? globalThis.String(object.begin) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
      isopen: isSet(object.isopen) ? globalThis.Boolean(object.isopen) : false,
      allPoint: isSet(object.allPoint) ? globalThis.Number(object.allPoint) : 0,
      boxChangeCount: isSet(object.boxChangeCount) ? globalThis.String(object.boxChangeCount) : "",
      allChangeCount: isSet(object.allChangeCount) ? globalThis.Number(object.allChangeCount) : 0,
      changeNeedPoint: isSet(object.changeNeedPoint) ? globalThis.String(object.changeNeedPoint) : "",
      point: isSet(object.point) ? globalThis.String(object.point) : "",
      exchangeCount: isSet(object.exchangeCount) ? globalThis.String(object.exchangeCount) : "",
      totalExchangeCount: isSet(object.totalExchangeCount) ? globalThis.String(object.totalExchangeCount) : "",
      serverAwardState: isSet(object.serverAwardState) ? globalThis.String(object.serverAwardState) : "",
      changeItemCount: isSet(object.changeItemCount) ? globalThis.Number(object.changeItemCount) : 0,
      allPointAward: isSet(object.allPointAward) ? globalThis.String(object.allPointAward) : "",
      boxAward: globalThis.Array.isArray(object?.boxAward) ? object.boxAward.map((e: any) => globalThis.Number(e)) : [],
      serverAward: globalThis.Array.isArray(object?.serverAward)
        ? object.serverAward.map((e: any) => globalThis.Number(e))
        : [],
      changeItem: isSet(object.changeItem) ? globalThis.Number(object.changeItem) : 0,
    };
  },

  toJSON(message: AllExchangeMsg): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.begin !== "") {
      obj.begin = message.begin;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    if (message.isopen !== false) {
      obj.isopen = message.isopen;
    }
    if (message.allPoint !== 0) {
      obj.allPoint = Math.round(message.allPoint);
    }
    if (message.boxChangeCount !== "") {
      obj.boxChangeCount = message.boxChangeCount;
    }
    if (message.allChangeCount !== 0) {
      obj.allChangeCount = Math.round(message.allChangeCount);
    }
    if (message.changeNeedPoint !== "") {
      obj.changeNeedPoint = message.changeNeedPoint;
    }
    if (message.point !== "") {
      obj.point = message.point;
    }
    if (message.exchangeCount !== "") {
      obj.exchangeCount = message.exchangeCount;
    }
    if (message.totalExchangeCount !== "") {
      obj.totalExchangeCount = message.totalExchangeCount;
    }
    if (message.serverAwardState !== "") {
      obj.serverAwardState = message.serverAwardState;
    }
    if (message.changeItemCount !== 0) {
      obj.changeItemCount = Math.round(message.changeItemCount);
    }
    if (message.allPointAward !== "") {
      obj.allPointAward = message.allPointAward;
    }
    if (message.boxAward?.length) {
      obj.boxAward = message.boxAward.map((e) => Math.round(e));
    }
    if (message.serverAward?.length) {
      obj.serverAward = message.serverAward.map((e) => Math.round(e));
    }
    if (message.changeItem !== 0) {
      obj.changeItem = Math.round(message.changeItem);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllExchangeMsg>, I>>(base?: I): AllExchangeMsg {
    return AllExchangeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllExchangeMsg>, I>>(object: I): AllExchangeMsg {
    const message = createBaseAllExchangeMsg();
    message.id = object.id ?? "";
    message.begin = object.begin ?? "";
    message.end = object.end ?? "";
    message.isopen = object.isopen ?? false;
    message.allPoint = object.allPoint ?? 0;
    message.boxChangeCount = object.boxChangeCount ?? "";
    message.allChangeCount = object.allChangeCount ?? 0;
    message.changeNeedPoint = object.changeNeedPoint ?? "";
    message.point = object.point ?? "";
    message.exchangeCount = object.exchangeCount ?? "";
    message.totalExchangeCount = object.totalExchangeCount ?? "";
    message.serverAwardState = object.serverAwardState ?? "";
    message.changeItemCount = object.changeItemCount ?? 0;
    message.allPointAward = object.allPointAward ?? "";
    message.boxAward = object.boxAward?.map((e) => e) || [];
    message.serverAward = object.serverAward?.map((e) => e) || [];
    message.changeItem = object.changeItem ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
