// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/WorldBossInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface WorldBossInfoMsg {
  curHp: number;
  totalNum: number;
  campaignId: number;
  woundInfo: number[];
  totalHp: number;
  myWound: number;
  grades: number;
  currentMillis: string;
  castleWound: number[];
  bufferGrade: number;
}

function createBaseWorldBossInfoMsg(): WorldBossInfoMsg {
  return {
    curHp: 0,
    totalNum: 0,
    campaignId: 0,
    woundInfo: [],
    totalHp: 0,
    myWound: 0,
    grades: 0,
    currentMillis: "",
    castleWound: [],
    bufferGrade: 0,
  };
}

export const WorldBossInfoMsg: MessageFns<WorldBossInfoMsg> = {
  encode(message: WorldBossInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.curHp !== 0) {
      writer.uint32(8).int32(message.curHp);
    }
    if (message.totalNum !== 0) {
      writer.uint32(16).int32(message.totalNum);
    }
    if (message.campaignId !== 0) {
      writer.uint32(24).int32(message.campaignId);
    }
    writer.uint32(34).fork();
    for (const v of message.woundInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.totalHp !== 0) {
      writer.uint32(40).int32(message.totalHp);
    }
    if (message.myWound !== 0) {
      writer.uint32(48).int32(message.myWound);
    }
    if (message.grades !== 0) {
      writer.uint32(56).int32(message.grades);
    }
    if (message.currentMillis !== "") {
      writer.uint32(66).string(message.currentMillis);
    }
    writer.uint32(74).fork();
    for (const v of message.castleWound) {
      writer.int32(v);
    }
    writer.join();
    if (message.bufferGrade !== 0) {
      writer.uint32(80).int32(message.bufferGrade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorldBossInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorldBossInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.curHp = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.woundInfo.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.woundInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalHp = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.myWound = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.currentMillis = reader.string();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.castleWound.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.castleWound.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.bufferGrade = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorldBossInfoMsg {
    return {
      curHp: isSet(object.curHp) ? globalThis.Number(object.curHp) : 0,
      totalNum: isSet(object.totalNum) ? globalThis.Number(object.totalNum) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      woundInfo: globalThis.Array.isArray(object?.woundInfo)
        ? object.woundInfo.map((e: any) => globalThis.Number(e))
        : [],
      totalHp: isSet(object.totalHp) ? globalThis.Number(object.totalHp) : 0,
      myWound: isSet(object.myWound) ? globalThis.Number(object.myWound) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      currentMillis: isSet(object.currentMillis) ? globalThis.String(object.currentMillis) : "",
      castleWound: globalThis.Array.isArray(object?.castleWound)
        ? object.castleWound.map((e: any) => globalThis.Number(e))
        : [],
      bufferGrade: isSet(object.bufferGrade) ? globalThis.Number(object.bufferGrade) : 0,
    };
  },

  toJSON(message: WorldBossInfoMsg): unknown {
    const obj: any = {};
    if (message.curHp !== 0) {
      obj.curHp = Math.round(message.curHp);
    }
    if (message.totalNum !== 0) {
      obj.totalNum = Math.round(message.totalNum);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.woundInfo?.length) {
      obj.woundInfo = message.woundInfo.map((e) => Math.round(e));
    }
    if (message.totalHp !== 0) {
      obj.totalHp = Math.round(message.totalHp);
    }
    if (message.myWound !== 0) {
      obj.myWound = Math.round(message.myWound);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.currentMillis !== "") {
      obj.currentMillis = message.currentMillis;
    }
    if (message.castleWound?.length) {
      obj.castleWound = message.castleWound.map((e) => Math.round(e));
    }
    if (message.bufferGrade !== 0) {
      obj.bufferGrade = Math.round(message.bufferGrade);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorldBossInfoMsg>, I>>(base?: I): WorldBossInfoMsg {
    return WorldBossInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorldBossInfoMsg>, I>>(object: I): WorldBossInfoMsg {
    const message = createBaseWorldBossInfoMsg();
    message.curHp = object.curHp ?? 0;
    message.totalNum = object.totalNum ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.woundInfo = object.woundInfo?.map((e) => e) || [];
    message.totalHp = object.totalHp ?? 0;
    message.myWound = object.myWound ?? 0;
    message.grades = object.grades ?? 0;
    message.currentMillis = object.currentMillis ?? "";
    message.castleWound = object.castleWound?.map((e) => e) || [];
    message.bufferGrade = object.bufferGrade ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
