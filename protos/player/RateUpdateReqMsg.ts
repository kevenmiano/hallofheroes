// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/RateUpdateReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface RateUpdateReqMsg {
  rate: number;
  beginTime: number;
  endTime: number;
  beginDay: string;
  endDay: string;
  bufferType: number;
  param1: string;
  param2: string;
  rateName: string;
  rateDesc: string;
}

function createBaseRateUpdateReqMsg(): RateUpdateReqMsg {
  return {
    rate: 0,
    beginTime: 0,
    endTime: 0,
    beginDay: "",
    endDay: "",
    bufferType: 0,
    param1: "",
    param2: "",
    rateName: "",
    rateDesc: "",
  };
}

export const RateUpdateReqMsg: MessageFns<RateUpdateReqMsg> = {
  encode(message: RateUpdateReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rate !== 0) {
      writer.uint32(8).int32(message.rate);
    }
    if (message.beginTime !== 0) {
      writer.uint32(16).int32(message.beginTime);
    }
    if (message.endTime !== 0) {
      writer.uint32(24).int32(message.endTime);
    }
    if (message.beginDay !== "") {
      writer.uint32(34).string(message.beginDay);
    }
    if (message.endDay !== "") {
      writer.uint32(42).string(message.endDay);
    }
    if (message.bufferType !== 0) {
      writer.uint32(48).int32(message.bufferType);
    }
    if (message.param1 !== "") {
      writer.uint32(58).string(message.param1);
    }
    if (message.param2 !== "") {
      writer.uint32(66).string(message.param2);
    }
    if (message.rateName !== "") {
      writer.uint32(74).string(message.rateName);
    }
    if (message.rateDesc !== "") {
      writer.uint32(82).string(message.rateDesc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateUpdateReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateUpdateReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rate = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.beginTime = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endTime = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.beginDay = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endDay = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bufferType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.param1 = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.param2 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rateName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.rateDesc = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateUpdateReqMsg {
    return {
      rate: isSet(object.rate) ? globalThis.Number(object.rate) : 0,
      beginTime: isSet(object.beginTime) ? globalThis.Number(object.beginTime) : 0,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      beginDay: isSet(object.beginDay) ? globalThis.String(object.beginDay) : "",
      endDay: isSet(object.endDay) ? globalThis.String(object.endDay) : "",
      bufferType: isSet(object.bufferType) ? globalThis.Number(object.bufferType) : 0,
      param1: isSet(object.param1) ? globalThis.String(object.param1) : "",
      param2: isSet(object.param2) ? globalThis.String(object.param2) : "",
      rateName: isSet(object.rateName) ? globalThis.String(object.rateName) : "",
      rateDesc: isSet(object.rateDesc) ? globalThis.String(object.rateDesc) : "",
    };
  },

  toJSON(message: RateUpdateReqMsg): unknown {
    const obj: any = {};
    if (message.rate !== 0) {
      obj.rate = Math.round(message.rate);
    }
    if (message.beginTime !== 0) {
      obj.beginTime = Math.round(message.beginTime);
    }
    if (message.endTime !== 0) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.beginDay !== "") {
      obj.beginDay = message.beginDay;
    }
    if (message.endDay !== "") {
      obj.endDay = message.endDay;
    }
    if (message.bufferType !== 0) {
      obj.bufferType = Math.round(message.bufferType);
    }
    if (message.param1 !== "") {
      obj.param1 = message.param1;
    }
    if (message.param2 !== "") {
      obj.param2 = message.param2;
    }
    if (message.rateName !== "") {
      obj.rateName = message.rateName;
    }
    if (message.rateDesc !== "") {
      obj.rateDesc = message.rateDesc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateUpdateReqMsg>, I>>(base?: I): RateUpdateReqMsg {
    return RateUpdateReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateUpdateReqMsg>, I>>(object: I): RateUpdateReqMsg {
    const message = createBaseRateUpdateReqMsg();
    message.rate = object.rate ?? 0;
    message.beginTime = object.beginTime ?? 0;
    message.endTime = object.endTime ?? 0;
    message.beginDay = object.beginDay ?? "";
    message.endDay = object.endDay ?? "";
    message.bufferType = object.bufferType ?? 0;
    message.param1 = object.param1 ?? "";
    message.param2 = object.param2 ?? "";
    message.rateName = object.rateName ?? "";
    message.rateDesc = object.rateDesc ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
