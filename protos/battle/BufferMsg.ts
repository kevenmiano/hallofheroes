// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/BufferMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface BufferMsg {
  bufferId: number;
  templateId: number;
  sourceId: number;
  targetId: number;
  curTurn: number;
  execFrame: number;
  seeType: number;
  exeWay: number;
  pressedNum: number;
  damage: number[];
  maxTurn: number;
  unSkillIds: number[];
  isPermanent: boolean;
  curRound: number;
  maxRound: number;
  level: number;
}

function createBaseBufferMsg(): BufferMsg {
  return {
    bufferId: 0,
    templateId: 0,
    sourceId: 0,
    targetId: 0,
    curTurn: 0,
    execFrame: 0,
    seeType: 0,
    exeWay: 0,
    pressedNum: 0,
    damage: [],
    maxTurn: 0,
    unSkillIds: [],
    isPermanent: false,
    curRound: 0,
    maxRound: 0,
    level: 0,
  };
}

export const BufferMsg: MessageFns<BufferMsg> = {
  encode(message: BufferMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bufferId !== 0) {
      writer.uint32(8).int32(message.bufferId);
    }
    if (message.templateId !== 0) {
      writer.uint32(16).int32(message.templateId);
    }
    if (message.sourceId !== 0) {
      writer.uint32(24).int32(message.sourceId);
    }
    if (message.targetId !== 0) {
      writer.uint32(32).int32(message.targetId);
    }
    if (message.curTurn !== 0) {
      writer.uint32(40).int32(message.curTurn);
    }
    if (message.execFrame !== 0) {
      writer.uint32(48).int32(message.execFrame);
    }
    if (message.seeType !== 0) {
      writer.uint32(56).int32(message.seeType);
    }
    if (message.exeWay !== 0) {
      writer.uint32(64).int32(message.exeWay);
    }
    if (message.pressedNum !== 0) {
      writer.uint32(72).int32(message.pressedNum);
    }
    writer.uint32(82).fork();
    for (const v of message.damage) {
      writer.int32(v);
    }
    writer.join();
    if (message.maxTurn !== 0) {
      writer.uint32(88).int32(message.maxTurn);
    }
    writer.uint32(98).fork();
    for (const v of message.unSkillIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.isPermanent !== false) {
      writer.uint32(104).bool(message.isPermanent);
    }
    if (message.curRound !== 0) {
      writer.uint32(112).int32(message.curRound);
    }
    if (message.maxRound !== 0) {
      writer.uint32(120).int32(message.maxRound);
    }
    if (message.level !== 0) {
      writer.uint32(128).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.bufferId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sourceId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.targetId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.curTurn = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.execFrame = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.seeType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.exeWay = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.pressedNum = reader.int32();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.damage.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.damage.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.maxTurn = reader.int32();
          continue;
        }
        case 12: {
          if (tag === 96) {
            message.unSkillIds.push(reader.int32());

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.unSkillIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isPermanent = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.curRound = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.maxRound = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BufferMsg {
    return {
      bufferId: isSet(object.bufferId) ? globalThis.Number(object.bufferId) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      sourceId: isSet(object.sourceId) ? globalThis.Number(object.sourceId) : 0,
      targetId: isSet(object.targetId) ? globalThis.Number(object.targetId) : 0,
      curTurn: isSet(object.curTurn) ? globalThis.Number(object.curTurn) : 0,
      execFrame: isSet(object.execFrame) ? globalThis.Number(object.execFrame) : 0,
      seeType: isSet(object.seeType) ? globalThis.Number(object.seeType) : 0,
      exeWay: isSet(object.exeWay) ? globalThis.Number(object.exeWay) : 0,
      pressedNum: isSet(object.pressedNum) ? globalThis.Number(object.pressedNum) : 0,
      damage: globalThis.Array.isArray(object?.damage) ? object.damage.map((e: any) => globalThis.Number(e)) : [],
      maxTurn: isSet(object.maxTurn) ? globalThis.Number(object.maxTurn) : 0,
      unSkillIds: globalThis.Array.isArray(object?.unSkillIds)
        ? object.unSkillIds.map((e: any) => globalThis.Number(e))
        : [],
      isPermanent: isSet(object.isPermanent) ? globalThis.Boolean(object.isPermanent) : false,
      curRound: isSet(object.curRound) ? globalThis.Number(object.curRound) : 0,
      maxRound: isSet(object.maxRound) ? globalThis.Number(object.maxRound) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: BufferMsg): unknown {
    const obj: any = {};
    if (message.bufferId !== 0) {
      obj.bufferId = Math.round(message.bufferId);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.sourceId !== 0) {
      obj.sourceId = Math.round(message.sourceId);
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.curTurn !== 0) {
      obj.curTurn = Math.round(message.curTurn);
    }
    if (message.execFrame !== 0) {
      obj.execFrame = Math.round(message.execFrame);
    }
    if (message.seeType !== 0) {
      obj.seeType = Math.round(message.seeType);
    }
    if (message.exeWay !== 0) {
      obj.exeWay = Math.round(message.exeWay);
    }
    if (message.pressedNum !== 0) {
      obj.pressedNum = Math.round(message.pressedNum);
    }
    if (message.damage?.length) {
      obj.damage = message.damage.map((e) => Math.round(e));
    }
    if (message.maxTurn !== 0) {
      obj.maxTurn = Math.round(message.maxTurn);
    }
    if (message.unSkillIds?.length) {
      obj.unSkillIds = message.unSkillIds.map((e) => Math.round(e));
    }
    if (message.isPermanent !== false) {
      obj.isPermanent = message.isPermanent;
    }
    if (message.curRound !== 0) {
      obj.curRound = Math.round(message.curRound);
    }
    if (message.maxRound !== 0) {
      obj.maxRound = Math.round(message.maxRound);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BufferMsg>, I>>(base?: I): BufferMsg {
    return BufferMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BufferMsg>, I>>(object: I): BufferMsg {
    const message = createBaseBufferMsg();
    message.bufferId = object.bufferId ?? 0;
    message.templateId = object.templateId ?? 0;
    message.sourceId = object.sourceId ?? 0;
    message.targetId = object.targetId ?? 0;
    message.curTurn = object.curTurn ?? 0;
    message.execFrame = object.execFrame ?? 0;
    message.seeType = object.seeType ?? 0;
    message.exeWay = object.exeWay ?? 0;
    message.pressedNum = object.pressedNum ?? 0;
    message.damage = object.damage?.map((e) => e) || [];
    message.maxTurn = object.maxTurn ?? 0;
    message.unSkillIds = object.unSkillIds?.map((e) => e) || [];
    message.isPermanent = object.isPermanent ?? false;
    message.curRound = object.curRound ?? 0;
    message.maxRound = object.maxRound ?? 0;
    message.level = object.level ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
