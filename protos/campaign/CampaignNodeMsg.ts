// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignNodeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignNodeMsg {
  nodeId: number;
  campDataId: number;
  nodeName: string;
  masterType: number;
  sonType: number;
  preNodeIds: string;
  nextNodeIds: string;
  state: number;
  refreshSpeed: number;
  posX: number;
  posY: number;
  curX: number;
  curY: number;
  level: number;
  styleType: number;
  attackTypes: number;
  nameColor: number;
  sizeType: number;
  toward: number;
  resource: number;
  resetX: number;
  resetY: number;
  visitUserIds: number[];
  fixType: number;
  fixX: number;
  fixY: number;
  heroTempId: number;
  handlerRange: number;
  fightCapaity: number;
  param1: number;
  param2: number;
  param3: string;
  param4: string;
  param5: string;
  visitServerName: number[];
  leftFightingTime: number;
}

function createBaseCampaignNodeMsg(): CampaignNodeMsg {
  return {
    nodeId: 0,
    campDataId: 0,
    nodeName: "",
    masterType: 0,
    sonType: 0,
    preNodeIds: "",
    nextNodeIds: "",
    state: 0,
    refreshSpeed: 0,
    posX: 0,
    posY: 0,
    curX: 0,
    curY: 0,
    level: 0,
    styleType: 0,
    attackTypes: 0,
    nameColor: 0,
    sizeType: 0,
    toward: 0,
    resource: 0,
    resetX: 0,
    resetY: 0,
    visitUserIds: [],
    fixType: 0,
    fixX: 0,
    fixY: 0,
    heroTempId: 0,
    handlerRange: 0,
    fightCapaity: 0,
    param1: 0,
    param2: 0,
    param3: "",
    param4: "",
    param5: "",
    visitServerName: [],
    leftFightingTime: 0,
  };
}

export const CampaignNodeMsg: MessageFns<CampaignNodeMsg> = {
  encode(message: CampaignNodeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== 0) {
      writer.uint32(8).int32(message.nodeId);
    }
    if (message.campDataId !== 0) {
      writer.uint32(16).int32(message.campDataId);
    }
    if (message.nodeName !== "") {
      writer.uint32(26).string(message.nodeName);
    }
    if (message.masterType !== 0) {
      writer.uint32(32).int32(message.masterType);
    }
    if (message.sonType !== 0) {
      writer.uint32(40).int32(message.sonType);
    }
    if (message.preNodeIds !== "") {
      writer.uint32(50).string(message.preNodeIds);
    }
    if (message.nextNodeIds !== "") {
      writer.uint32(58).string(message.nextNodeIds);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.refreshSpeed !== 0) {
      writer.uint32(72).int32(message.refreshSpeed);
    }
    if (message.posX !== 0) {
      writer.uint32(80).int32(message.posX);
    }
    if (message.posY !== 0) {
      writer.uint32(88).int32(message.posY);
    }
    if (message.curX !== 0) {
      writer.uint32(96).int32(message.curX);
    }
    if (message.curY !== 0) {
      writer.uint32(104).int32(message.curY);
    }
    if (message.level !== 0) {
      writer.uint32(112).int32(message.level);
    }
    if (message.styleType !== 0) {
      writer.uint32(120).int32(message.styleType);
    }
    if (message.attackTypes !== 0) {
      writer.uint32(128).int32(message.attackTypes);
    }
    if (message.nameColor !== 0) {
      writer.uint32(136).int32(message.nameColor);
    }
    if (message.sizeType !== 0) {
      writer.uint32(144).int32(message.sizeType);
    }
    if (message.toward !== 0) {
      writer.uint32(152).int32(message.toward);
    }
    if (message.resource !== 0) {
      writer.uint32(160).int32(message.resource);
    }
    if (message.resetX !== 0) {
      writer.uint32(168).int32(message.resetX);
    }
    if (message.resetY !== 0) {
      writer.uint32(176).int32(message.resetY);
    }
    writer.uint32(186).fork();
    for (const v of message.visitUserIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.fixType !== 0) {
      writer.uint32(192).int32(message.fixType);
    }
    if (message.fixX !== 0) {
      writer.uint32(200).int32(message.fixX);
    }
    if (message.fixY !== 0) {
      writer.uint32(208).int32(message.fixY);
    }
    if (message.heroTempId !== 0) {
      writer.uint32(216).int32(message.heroTempId);
    }
    if (message.handlerRange !== 0) {
      writer.uint32(224).int32(message.handlerRange);
    }
    if (message.fightCapaity !== 0) {
      writer.uint32(232).int32(message.fightCapaity);
    }
    if (message.param1 !== 0) {
      writer.uint32(240).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(248).int32(message.param2);
    }
    if (message.param3 !== "") {
      writer.uint32(258).string(message.param3);
    }
    if (message.param4 !== "") {
      writer.uint32(266).string(message.param4);
    }
    if (message.param5 !== "") {
      writer.uint32(274).string(message.param5);
    }
    writer.uint32(282).fork();
    for (const v of message.visitServerName) {
      writer.int32(v);
    }
    writer.join();
    if (message.leftFightingTime !== 0) {
      writer.uint32(288).int32(message.leftFightingTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignNodeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignNodeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campDataId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nodeName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.masterType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sonType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.preNodeIds = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextNodeIds = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.refreshSpeed = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.posX = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.posY = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.curX = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.curY = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.styleType = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.attackTypes = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.nameColor = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.sizeType = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.toward = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.resource = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.resetX = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.resetY = reader.int32();
          continue;
        }
        case 23: {
          if (tag === 184) {
            message.visitUserIds.push(reader.int32());

            continue;
          }

          if (tag === 186) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.visitUserIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.fixType = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.fixX = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.fixY = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.heroTempId = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.handlerRange = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.fightCapaity = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.param3 = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.param4 = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.param5 = reader.string();
          continue;
        }
        case 35: {
          if (tag === 280) {
            message.visitServerName.push(reader.int32());

            continue;
          }

          if (tag === 282) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.visitServerName.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.leftFightingTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignNodeMsg {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      campDataId: isSet(object.campDataId) ? globalThis.Number(object.campDataId) : 0,
      nodeName: isSet(object.nodeName) ? globalThis.String(object.nodeName) : "",
      masterType: isSet(object.masterType) ? globalThis.Number(object.masterType) : 0,
      sonType: isSet(object.sonType) ? globalThis.Number(object.sonType) : 0,
      preNodeIds: isSet(object.preNodeIds) ? globalThis.String(object.preNodeIds) : "",
      nextNodeIds: isSet(object.nextNodeIds) ? globalThis.String(object.nextNodeIds) : "",
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      refreshSpeed: isSet(object.refreshSpeed) ? globalThis.Number(object.refreshSpeed) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      curX: isSet(object.curX) ? globalThis.Number(object.curX) : 0,
      curY: isSet(object.curY) ? globalThis.Number(object.curY) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      styleType: isSet(object.styleType) ? globalThis.Number(object.styleType) : 0,
      attackTypes: isSet(object.attackTypes) ? globalThis.Number(object.attackTypes) : 0,
      nameColor: isSet(object.nameColor) ? globalThis.Number(object.nameColor) : 0,
      sizeType: isSet(object.sizeType) ? globalThis.Number(object.sizeType) : 0,
      toward: isSet(object.toward) ? globalThis.Number(object.toward) : 0,
      resource: isSet(object.resource) ? globalThis.Number(object.resource) : 0,
      resetX: isSet(object.resetX) ? globalThis.Number(object.resetX) : 0,
      resetY: isSet(object.resetY) ? globalThis.Number(object.resetY) : 0,
      visitUserIds: globalThis.Array.isArray(object?.visitUserIds)
        ? object.visitUserIds.map((e: any) => globalThis.Number(e))
        : [],
      fixType: isSet(object.fixType) ? globalThis.Number(object.fixType) : 0,
      fixX: isSet(object.fixX) ? globalThis.Number(object.fixX) : 0,
      fixY: isSet(object.fixY) ? globalThis.Number(object.fixY) : 0,
      heroTempId: isSet(object.heroTempId) ? globalThis.Number(object.heroTempId) : 0,
      handlerRange: isSet(object.handlerRange) ? globalThis.Number(object.handlerRange) : 0,
      fightCapaity: isSet(object.fightCapaity) ? globalThis.Number(object.fightCapaity) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
      param3: isSet(object.param3) ? globalThis.String(object.param3) : "",
      param4: isSet(object.param4) ? globalThis.String(object.param4) : "",
      param5: isSet(object.param5) ? globalThis.String(object.param5) : "",
      visitServerName: globalThis.Array.isArray(object?.visitServerName)
        ? object.visitServerName.map((e: any) => globalThis.Number(e))
        : [],
      leftFightingTime: isSet(object.leftFightingTime) ? globalThis.Number(object.leftFightingTime) : 0,
    };
  },

  toJSON(message: CampaignNodeMsg): unknown {
    const obj: any = {};
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.campDataId !== 0) {
      obj.campDataId = Math.round(message.campDataId);
    }
    if (message.nodeName !== "") {
      obj.nodeName = message.nodeName;
    }
    if (message.masterType !== 0) {
      obj.masterType = Math.round(message.masterType);
    }
    if (message.sonType !== 0) {
      obj.sonType = Math.round(message.sonType);
    }
    if (message.preNodeIds !== "") {
      obj.preNodeIds = message.preNodeIds;
    }
    if (message.nextNodeIds !== "") {
      obj.nextNodeIds = message.nextNodeIds;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.refreshSpeed !== 0) {
      obj.refreshSpeed = Math.round(message.refreshSpeed);
    }
    if (message.posX !== 0) {
      obj.posX = Math.round(message.posX);
    }
    if (message.posY !== 0) {
      obj.posY = Math.round(message.posY);
    }
    if (message.curX !== 0) {
      obj.curX = Math.round(message.curX);
    }
    if (message.curY !== 0) {
      obj.curY = Math.round(message.curY);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.styleType !== 0) {
      obj.styleType = Math.round(message.styleType);
    }
    if (message.attackTypes !== 0) {
      obj.attackTypes = Math.round(message.attackTypes);
    }
    if (message.nameColor !== 0) {
      obj.nameColor = Math.round(message.nameColor);
    }
    if (message.sizeType !== 0) {
      obj.sizeType = Math.round(message.sizeType);
    }
    if (message.toward !== 0) {
      obj.toward = Math.round(message.toward);
    }
    if (message.resource !== 0) {
      obj.resource = Math.round(message.resource);
    }
    if (message.resetX !== 0) {
      obj.resetX = Math.round(message.resetX);
    }
    if (message.resetY !== 0) {
      obj.resetY = Math.round(message.resetY);
    }
    if (message.visitUserIds?.length) {
      obj.visitUserIds = message.visitUserIds.map((e) => Math.round(e));
    }
    if (message.fixType !== 0) {
      obj.fixType = Math.round(message.fixType);
    }
    if (message.fixX !== 0) {
      obj.fixX = Math.round(message.fixX);
    }
    if (message.fixY !== 0) {
      obj.fixY = Math.round(message.fixY);
    }
    if (message.heroTempId !== 0) {
      obj.heroTempId = Math.round(message.heroTempId);
    }
    if (message.handlerRange !== 0) {
      obj.handlerRange = Math.round(message.handlerRange);
    }
    if (message.fightCapaity !== 0) {
      obj.fightCapaity = Math.round(message.fightCapaity);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    if (message.param3 !== "") {
      obj.param3 = message.param3;
    }
    if (message.param4 !== "") {
      obj.param4 = message.param4;
    }
    if (message.param5 !== "") {
      obj.param5 = message.param5;
    }
    if (message.visitServerName?.length) {
      obj.visitServerName = message.visitServerName.map((e) => Math.round(e));
    }
    if (message.leftFightingTime !== 0) {
      obj.leftFightingTime = Math.round(message.leftFightingTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignNodeMsg>, I>>(base?: I): CampaignNodeMsg {
    return CampaignNodeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignNodeMsg>, I>>(object: I): CampaignNodeMsg {
    const message = createBaseCampaignNodeMsg();
    message.nodeId = object.nodeId ?? 0;
    message.campDataId = object.campDataId ?? 0;
    message.nodeName = object.nodeName ?? "";
    message.masterType = object.masterType ?? 0;
    message.sonType = object.sonType ?? 0;
    message.preNodeIds = object.preNodeIds ?? "";
    message.nextNodeIds = object.nextNodeIds ?? "";
    message.state = object.state ?? 0;
    message.refreshSpeed = object.refreshSpeed ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.curX = object.curX ?? 0;
    message.curY = object.curY ?? 0;
    message.level = object.level ?? 0;
    message.styleType = object.styleType ?? 0;
    message.attackTypes = object.attackTypes ?? 0;
    message.nameColor = object.nameColor ?? 0;
    message.sizeType = object.sizeType ?? 0;
    message.toward = object.toward ?? 0;
    message.resource = object.resource ?? 0;
    message.resetX = object.resetX ?? 0;
    message.resetY = object.resetY ?? 0;
    message.visitUserIds = object.visitUserIds?.map((e) => e) || [];
    message.fixType = object.fixType ?? 0;
    message.fixX = object.fixX ?? 0;
    message.fixY = object.fixY ?? 0;
    message.heroTempId = object.heroTempId ?? 0;
    message.handlerRange = object.handlerRange ?? 0;
    message.fightCapaity = object.fightCapaity ?? 0;
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    message.param3 = object.param3 ?? "";
    message.param4 = object.param4 ?? "";
    message.param5 = object.param5 ?? "";
    message.visitServerName = object.visitServerName?.map((e) => e) || [];
    message.leftFightingTime = object.leftFightingTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
