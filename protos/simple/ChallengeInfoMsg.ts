// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/ChallengeInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface ChallengeInfoMsg {
  lastWinCount: number;
  challengeCount: number;
  curScore: number;
  simplePlayer: number[];
  challengeLog: number[];
  noticMsg: string;
  avater: number[];
  totalCount: number;
  winCountReward: string;
  nextRefreshTime: string;
  freeRefreshTimes: number;
  payRefreshTimes: number;
}

function createBaseChallengeInfoMsg(): ChallengeInfoMsg {
  return {
    lastWinCount: 0,
    challengeCount: 0,
    curScore: 0,
    simplePlayer: [],
    challengeLog: [],
    noticMsg: "",
    avater: [],
    totalCount: 0,
    winCountReward: "",
    nextRefreshTime: "",
    freeRefreshTimes: 0,
    payRefreshTimes: 0,
  };
}

export const ChallengeInfoMsg: MessageFns<ChallengeInfoMsg> = {
  encode(message: ChallengeInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastWinCount !== 0) {
      writer.uint32(8).int32(message.lastWinCount);
    }
    if (message.challengeCount !== 0) {
      writer.uint32(16).int32(message.challengeCount);
    }
    if (message.curScore !== 0) {
      writer.uint32(24).int32(message.curScore);
    }
    writer.uint32(34).fork();
    for (const v of message.simplePlayer) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.challengeLog) {
      writer.int32(v);
    }
    writer.join();
    if (message.noticMsg !== "") {
      writer.uint32(50).string(message.noticMsg);
    }
    writer.uint32(58).fork();
    for (const v of message.avater) {
      writer.int32(v);
    }
    writer.join();
    if (message.totalCount !== 0) {
      writer.uint32(64).int32(message.totalCount);
    }
    if (message.winCountReward !== "") {
      writer.uint32(74).string(message.winCountReward);
    }
    if (message.nextRefreshTime !== "") {
      writer.uint32(82).string(message.nextRefreshTime);
    }
    if (message.freeRefreshTimes !== 0) {
      writer.uint32(88).int32(message.freeRefreshTimes);
    }
    if (message.payRefreshTimes !== 0) {
      writer.uint32(96).int32(message.payRefreshTimes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChallengeInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChallengeInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lastWinCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.challengeCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.curScore = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.simplePlayer.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.simplePlayer.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.challengeLog.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.challengeLog.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.noticMsg = reader.string();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.avater.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.avater.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.winCountReward = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.nextRefreshTime = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.freeRefreshTimes = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.payRefreshTimes = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChallengeInfoMsg {
    return {
      lastWinCount: isSet(object.lastWinCount) ? globalThis.Number(object.lastWinCount) : 0,
      challengeCount: isSet(object.challengeCount) ? globalThis.Number(object.challengeCount) : 0,
      curScore: isSet(object.curScore) ? globalThis.Number(object.curScore) : 0,
      simplePlayer: globalThis.Array.isArray(object?.simplePlayer)
        ? object.simplePlayer.map((e: any) => globalThis.Number(e))
        : [],
      challengeLog: globalThis.Array.isArray(object?.challengeLog)
        ? object.challengeLog.map((e: any) => globalThis.Number(e))
        : [],
      noticMsg: isSet(object.noticMsg) ? globalThis.String(object.noticMsg) : "",
      avater: globalThis.Array.isArray(object?.avater) ? object.avater.map((e: any) => globalThis.Number(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      winCountReward: isSet(object.winCountReward) ? globalThis.String(object.winCountReward) : "",
      nextRefreshTime: isSet(object.nextRefreshTime) ? globalThis.String(object.nextRefreshTime) : "",
      freeRefreshTimes: isSet(object.freeRefreshTimes) ? globalThis.Number(object.freeRefreshTimes) : 0,
      payRefreshTimes: isSet(object.payRefreshTimes) ? globalThis.Number(object.payRefreshTimes) : 0,
    };
  },

  toJSON(message: ChallengeInfoMsg): unknown {
    const obj: any = {};
    if (message.lastWinCount !== 0) {
      obj.lastWinCount = Math.round(message.lastWinCount);
    }
    if (message.challengeCount !== 0) {
      obj.challengeCount = Math.round(message.challengeCount);
    }
    if (message.curScore !== 0) {
      obj.curScore = Math.round(message.curScore);
    }
    if (message.simplePlayer?.length) {
      obj.simplePlayer = message.simplePlayer.map((e) => Math.round(e));
    }
    if (message.challengeLog?.length) {
      obj.challengeLog = message.challengeLog.map((e) => Math.round(e));
    }
    if (message.noticMsg !== "") {
      obj.noticMsg = message.noticMsg;
    }
    if (message.avater?.length) {
      obj.avater = message.avater.map((e) => Math.round(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.winCountReward !== "") {
      obj.winCountReward = message.winCountReward;
    }
    if (message.nextRefreshTime !== "") {
      obj.nextRefreshTime = message.nextRefreshTime;
    }
    if (message.freeRefreshTimes !== 0) {
      obj.freeRefreshTimes = Math.round(message.freeRefreshTimes);
    }
    if (message.payRefreshTimes !== 0) {
      obj.payRefreshTimes = Math.round(message.payRefreshTimes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChallengeInfoMsg>, I>>(base?: I): ChallengeInfoMsg {
    return ChallengeInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChallengeInfoMsg>, I>>(object: I): ChallengeInfoMsg {
    const message = createBaseChallengeInfoMsg();
    message.lastWinCount = object.lastWinCount ?? 0;
    message.challengeCount = object.challengeCount ?? 0;
    message.curScore = object.curScore ?? 0;
    message.simplePlayer = object.simplePlayer?.map((e) => e) || [];
    message.challengeLog = object.challengeLog?.map((e) => e) || [];
    message.noticMsg = object.noticMsg ?? "";
    message.avater = object.avater?.map((e) => e) || [];
    message.totalCount = object.totalCount ?? 0;
    message.winCountReward = object.winCountReward ?? "";
    message.nextRefreshTime = object.nextRefreshTime ?? "";
    message.freeRefreshTimes = object.freeRefreshTimes ?? 0;
    message.payRefreshTimes = object.payRefreshTimes ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
