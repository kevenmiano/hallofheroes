// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CarInfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CarInfo {
  userId: number;
  minerals: number;
  quality: number;
  tramcarCount: number;
  handCount: number;
  isOwn: number;
  pickCount: number;
  armyId: number;
}

function createBaseCarInfo(): CarInfo {
  return { userId: 0, minerals: 0, quality: 0, tramcarCount: 0, handCount: 0, isOwn: 0, pickCount: 0, armyId: 0 };
}

export const CarInfo: MessageFns<CarInfo> = {
  encode(message: CarInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.minerals !== 0) {
      writer.uint32(16).int32(message.minerals);
    }
    if (message.quality !== 0) {
      writer.uint32(24).int32(message.quality);
    }
    if (message.tramcarCount !== 0) {
      writer.uint32(32).int32(message.tramcarCount);
    }
    if (message.handCount !== 0) {
      writer.uint32(40).int32(message.handCount);
    }
    if (message.isOwn !== 0) {
      writer.uint32(48).int32(message.isOwn);
    }
    if (message.pickCount !== 0) {
      writer.uint32(56).int32(message.pickCount);
    }
    if (message.armyId !== 0) {
      writer.uint32(64).int32(message.armyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CarInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCarInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minerals = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tramcarCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.handCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isOwn = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.pickCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CarInfo {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      minerals: isSet(object.minerals) ? globalThis.Number(object.minerals) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      tramcarCount: isSet(object.tramcarCount) ? globalThis.Number(object.tramcarCount) : 0,
      handCount: isSet(object.handCount) ? globalThis.Number(object.handCount) : 0,
      isOwn: isSet(object.isOwn) ? globalThis.Number(object.isOwn) : 0,
      pickCount: isSet(object.pickCount) ? globalThis.Number(object.pickCount) : 0,
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
    };
  },

  toJSON(message: CarInfo): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.minerals !== 0) {
      obj.minerals = Math.round(message.minerals);
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.tramcarCount !== 0) {
      obj.tramcarCount = Math.round(message.tramcarCount);
    }
    if (message.handCount !== 0) {
      obj.handCount = Math.round(message.handCount);
    }
    if (message.isOwn !== 0) {
      obj.isOwn = Math.round(message.isOwn);
    }
    if (message.pickCount !== 0) {
      obj.pickCount = Math.round(message.pickCount);
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CarInfo>, I>>(base?: I): CarInfo {
    return CarInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CarInfo>, I>>(object: I): CarInfo {
    const message = createBaseCarInfo();
    message.userId = object.userId ?? 0;
    message.minerals = object.minerals ?? 0;
    message.quality = object.quality ?? 0;
    message.tramcarCount = object.tramcarCount ?? 0;
    message.handCount = object.handCount ?? 0;
    message.isOwn = object.isOwn ?? 0;
    message.pickCount = object.pickCount ?? 0;
    message.armyId = object.armyId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
