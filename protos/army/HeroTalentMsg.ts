// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/HeroTalentMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface HeroTalentMsg {
  userId: number;
  talentPoint: number;
  talentGrade: number;
  talentSkill: string;
  sealOrder: number[];
  currentBranch: number;
  isActiveSecond: boolean;
  talentIndex: number;
}

function createBaseHeroTalentMsg(): HeroTalentMsg {
  return {
    userId: 0,
    talentPoint: 0,
    talentGrade: 0,
    talentSkill: "",
    sealOrder: [],
    currentBranch: 0,
    isActiveSecond: false,
    talentIndex: 0,
  };
}

export const HeroTalentMsg: MessageFns<HeroTalentMsg> = {
  encode(message: HeroTalentMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.talentPoint !== 0) {
      writer.uint32(16).int32(message.talentPoint);
    }
    if (message.talentGrade !== 0) {
      writer.uint32(24).int32(message.talentGrade);
    }
    if (message.talentSkill !== "") {
      writer.uint32(34).string(message.talentSkill);
    }
    writer.uint32(42).fork();
    for (const v of message.sealOrder) {
      writer.int32(v);
    }
    writer.join();
    if (message.currentBranch !== 0) {
      writer.uint32(48).int32(message.currentBranch);
    }
    if (message.isActiveSecond !== false) {
      writer.uint32(56).bool(message.isActiveSecond);
    }
    if (message.talentIndex !== 0) {
      writer.uint32(64).int32(message.talentIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroTalentMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroTalentMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.talentPoint = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.talentGrade = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.talentSkill = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.sealOrder.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sealOrder.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentBranch = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isActiveSecond = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.talentIndex = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroTalentMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      talentPoint: isSet(object.talentPoint) ? globalThis.Number(object.talentPoint) : 0,
      talentGrade: isSet(object.talentGrade) ? globalThis.Number(object.talentGrade) : 0,
      talentSkill: isSet(object.talentSkill) ? globalThis.String(object.talentSkill) : "",
      sealOrder: globalThis.Array.isArray(object?.sealOrder)
        ? object.sealOrder.map((e: any) => globalThis.Number(e))
        : [],
      currentBranch: isSet(object.currentBranch) ? globalThis.Number(object.currentBranch) : 0,
      isActiveSecond: isSet(object.isActiveSecond) ? globalThis.Boolean(object.isActiveSecond) : false,
      talentIndex: isSet(object.talentIndex) ? globalThis.Number(object.talentIndex) : 0,
    };
  },

  toJSON(message: HeroTalentMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.talentPoint !== 0) {
      obj.talentPoint = Math.round(message.talentPoint);
    }
    if (message.talentGrade !== 0) {
      obj.talentGrade = Math.round(message.talentGrade);
    }
    if (message.talentSkill !== "") {
      obj.talentSkill = message.talentSkill;
    }
    if (message.sealOrder?.length) {
      obj.sealOrder = message.sealOrder.map((e) => Math.round(e));
    }
    if (message.currentBranch !== 0) {
      obj.currentBranch = Math.round(message.currentBranch);
    }
    if (message.isActiveSecond !== false) {
      obj.isActiveSecond = message.isActiveSecond;
    }
    if (message.talentIndex !== 0) {
      obj.talentIndex = Math.round(message.talentIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroTalentMsg>, I>>(base?: I): HeroTalentMsg {
    return HeroTalentMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroTalentMsg>, I>>(object: I): HeroTalentMsg {
    const message = createBaseHeroTalentMsg();
    message.userId = object.userId ?? 0;
    message.talentPoint = object.talentPoint ?? 0;
    message.talentGrade = object.talentGrade ?? 0;
    message.talentSkill = object.talentSkill ?? "";
    message.sealOrder = object.sealOrder?.map((e) => e) || [];
    message.currentBranch = object.currentBranch ?? 0;
    message.isActiveSecond = object.isActiveSecond ?? false;
    message.talentIndex = object.talentIndex ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
