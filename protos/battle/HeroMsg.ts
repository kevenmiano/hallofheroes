// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/HeroMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface HeroMsg {
  heroId: number;
  livingId: number;
  userId: number;
  userPics: number;
  tempId: number;
  type: number;
  nickName: string;
  grade: number;
  side: number;
  pos: number;
  maxHp: number;
  initHp: number;
  hp: number;
  initHp2: number;
  hp2: number;
  sp: number;
  slotAvata: string;
  clothAvate: string;
  cloakPath: string;
  hairPath: string;
  captain: number;
  res: string;
  qteTime: number;
  castTime: number;
  pics: number;
  job: number;
  phyAttack: number;
  phyDefence: number;
  magAttack: number;
  magDefence: number;
  forceHit: number;
  parry: number;
  sites: number;
  skillScript: string;
  pawnTempId: number;
  skillId: number[];
  attackWound: number;
  hitWound: number;
  attackModel: number;
  starBuffer: number[];
  item: number[];
  headId: number;
  buffers: number[];
  isShow: boolean;
  serverName: string;
  wingAvata: string;
  trials: number[];
  battleDrop: number[];
  hatAvata: string;
  fashionArmAvata: string;
  fashionClothAvata: string;
  hide: boolean;
  appellId: number;
  fireResi: number;
  waterResi: number;
  electResi: number;
  windResi: number;
  darkResi: number;
  lightResi: number;
  followSkills: string;
  changeSkills: string;
  defaultSkills: string;
  awake: number;
  livingId2: number;
  changeSkillId: number[];
  fateSkillTempIds: string;
  isChange: boolean;
  petQuality: number;
  fightCapacity: number;
  reduceResi: number;
  strength: number;
  tenacity: number;
  hasShadow: boolean;
  marriageSkills: number[];
  mateId: number;
  marSkills: number[];
  mateServerName: string;
  curturn: number;
  talentSealOrder: number[];
  multiLanNickName: number[];
  segmentId: number;
  mulSportScore: number;
  spMax: number;
  consortiaId: number;
  isRobot: boolean;
  atkpotentialAtr: number;
  matpotentialAtr: number;
  defpotentialAtr: number;
  mdfpotentialAtr: number;
  hppotentialAtr: number;
}

function createBaseHeroMsg(): HeroMsg {
  return {
    heroId: 0,
    livingId: 0,
    userId: 0,
    userPics: 0,
    tempId: 0,
    type: 0,
    nickName: "",
    grade: 0,
    side: 0,
    pos: 0,
    maxHp: 0,
    initHp: 0,
    hp: 0,
    initHp2: 0,
    hp2: 0,
    sp: 0,
    slotAvata: "",
    clothAvate: "",
    cloakPath: "",
    hairPath: "",
    captain: 0,
    res: "",
    qteTime: 0,
    castTime: 0,
    pics: 0,
    job: 0,
    phyAttack: 0,
    phyDefence: 0,
    magAttack: 0,
    magDefence: 0,
    forceHit: 0,
    parry: 0,
    sites: 0,
    skillScript: "",
    pawnTempId: 0,
    skillId: [],
    attackWound: 0,
    hitWound: 0,
    attackModel: 0,
    starBuffer: [],
    item: [],
    headId: 0,
    buffers: [],
    isShow: false,
    serverName: "",
    wingAvata: "",
    trials: [],
    battleDrop: [],
    hatAvata: "",
    fashionArmAvata: "",
    fashionClothAvata: "",
    hide: false,
    appellId: 0,
    fireResi: 0,
    waterResi: 0,
    electResi: 0,
    windResi: 0,
    darkResi: 0,
    lightResi: 0,
    followSkills: "",
    changeSkills: "",
    defaultSkills: "",
    awake: 0,
    livingId2: 0,
    changeSkillId: [],
    fateSkillTempIds: "",
    isChange: false,
    petQuality: 0,
    fightCapacity: 0,
    reduceResi: 0,
    strength: 0,
    tenacity: 0,
    hasShadow: false,
    marriageSkills: [],
    mateId: 0,
    marSkills: [],
    mateServerName: "",
    curturn: 0,
    talentSealOrder: [],
    multiLanNickName: [],
    segmentId: 0,
    mulSportScore: 0,
    spMax: 0,
    consortiaId: 0,
    isRobot: false,
    atkpotentialAtr: 0,
    matpotentialAtr: 0,
    defpotentialAtr: 0,
    mdfpotentialAtr: 0,
    hppotentialAtr: 0,
  };
}

export const HeroMsg: MessageFns<HeroMsg> = {
  encode(message: HeroMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.heroId !== 0) {
      writer.uint32(8).int32(message.heroId);
    }
    if (message.livingId !== 0) {
      writer.uint32(16).int32(message.livingId);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.userPics !== 0) {
      writer.uint32(32).int32(message.userPics);
    }
    if (message.tempId !== 0) {
      writer.uint32(40).int32(message.tempId);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.nickName !== "") {
      writer.uint32(58).string(message.nickName);
    }
    if (message.grade !== 0) {
      writer.uint32(64).int32(message.grade);
    }
    if (message.side !== 0) {
      writer.uint32(72).int32(message.side);
    }
    if (message.pos !== 0) {
      writer.uint32(80).int32(message.pos);
    }
    if (message.maxHp !== 0) {
      writer.uint32(88).int32(message.maxHp);
    }
    if (message.initHp !== 0) {
      writer.uint32(96).int32(message.initHp);
    }
    if (message.hp !== 0) {
      writer.uint32(104).int32(message.hp);
    }
    if (message.initHp2 !== 0) {
      writer.uint32(112).int32(message.initHp2);
    }
    if (message.hp2 !== 0) {
      writer.uint32(120).int32(message.hp2);
    }
    if (message.sp !== 0) {
      writer.uint32(128).int32(message.sp);
    }
    if (message.slotAvata !== "") {
      writer.uint32(138).string(message.slotAvata);
    }
    if (message.clothAvate !== "") {
      writer.uint32(146).string(message.clothAvate);
    }
    if (message.cloakPath !== "") {
      writer.uint32(154).string(message.cloakPath);
    }
    if (message.hairPath !== "") {
      writer.uint32(162).string(message.hairPath);
    }
    if (message.captain !== 0) {
      writer.uint32(168).int32(message.captain);
    }
    if (message.res !== "") {
      writer.uint32(178).string(message.res);
    }
    if (message.qteTime !== 0) {
      writer.uint32(184).int32(message.qteTime);
    }
    if (message.castTime !== 0) {
      writer.uint32(192).int32(message.castTime);
    }
    if (message.pics !== 0) {
      writer.uint32(200).int32(message.pics);
    }
    if (message.job !== 0) {
      writer.uint32(208).int32(message.job);
    }
    if (message.phyAttack !== 0) {
      writer.uint32(216).int32(message.phyAttack);
    }
    if (message.phyDefence !== 0) {
      writer.uint32(224).int32(message.phyDefence);
    }
    if (message.magAttack !== 0) {
      writer.uint32(232).int32(message.magAttack);
    }
    if (message.magDefence !== 0) {
      writer.uint32(240).int32(message.magDefence);
    }
    if (message.forceHit !== 0) {
      writer.uint32(248).int32(message.forceHit);
    }
    if (message.parry !== 0) {
      writer.uint32(256).int32(message.parry);
    }
    if (message.sites !== 0) {
      writer.uint32(264).int32(message.sites);
    }
    if (message.skillScript !== "") {
      writer.uint32(274).string(message.skillScript);
    }
    if (message.pawnTempId !== 0) {
      writer.uint32(280).int32(message.pawnTempId);
    }
    writer.uint32(290).fork();
    for (const v of message.skillId) {
      writer.int32(v);
    }
    writer.join();
    if (message.attackWound !== 0) {
      writer.uint32(296).int32(message.attackWound);
    }
    if (message.hitWound !== 0) {
      writer.uint32(304).int32(message.hitWound);
    }
    if (message.attackModel !== 0) {
      writer.uint32(312).int32(message.attackModel);
    }
    writer.uint32(322).fork();
    for (const v of message.starBuffer) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(330).fork();
    for (const v of message.item) {
      writer.int32(v);
    }
    writer.join();
    if (message.headId !== 0) {
      writer.uint32(336).int32(message.headId);
    }
    writer.uint32(346).fork();
    for (const v of message.buffers) {
      writer.int32(v);
    }
    writer.join();
    if (message.isShow !== false) {
      writer.uint32(352).bool(message.isShow);
    }
    if (message.serverName !== "") {
      writer.uint32(362).string(message.serverName);
    }
    if (message.wingAvata !== "") {
      writer.uint32(370).string(message.wingAvata);
    }
    writer.uint32(378).fork();
    for (const v of message.trials) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(386).fork();
    for (const v of message.battleDrop) {
      writer.int32(v);
    }
    writer.join();
    if (message.hatAvata !== "") {
      writer.uint32(394).string(message.hatAvata);
    }
    if (message.fashionArmAvata !== "") {
      writer.uint32(402).string(message.fashionArmAvata);
    }
    if (message.fashionClothAvata !== "") {
      writer.uint32(410).string(message.fashionClothAvata);
    }
    if (message.hide !== false) {
      writer.uint32(416).bool(message.hide);
    }
    if (message.appellId !== 0) {
      writer.uint32(424).int32(message.appellId);
    }
    if (message.fireResi !== 0) {
      writer.uint32(432).int32(message.fireResi);
    }
    if (message.waterResi !== 0) {
      writer.uint32(440).int32(message.waterResi);
    }
    if (message.electResi !== 0) {
      writer.uint32(448).int32(message.electResi);
    }
    if (message.windResi !== 0) {
      writer.uint32(456).int32(message.windResi);
    }
    if (message.darkResi !== 0) {
      writer.uint32(464).int32(message.darkResi);
    }
    if (message.lightResi !== 0) {
      writer.uint32(472).int32(message.lightResi);
    }
    if (message.followSkills !== "") {
      writer.uint32(482).string(message.followSkills);
    }
    if (message.changeSkills !== "") {
      writer.uint32(490).string(message.changeSkills);
    }
    if (message.defaultSkills !== "") {
      writer.uint32(498).string(message.defaultSkills);
    }
    if (message.awake !== 0) {
      writer.uint32(504).int32(message.awake);
    }
    if (message.livingId2 !== 0) {
      writer.uint32(512).int32(message.livingId2);
    }
    writer.uint32(522).fork();
    for (const v of message.changeSkillId) {
      writer.int32(v);
    }
    writer.join();
    if (message.fateSkillTempIds !== "") {
      writer.uint32(530).string(message.fateSkillTempIds);
    }
    if (message.isChange !== false) {
      writer.uint32(536).bool(message.isChange);
    }
    if (message.petQuality !== 0) {
      writer.uint32(544).int32(message.petQuality);
    }
    if (message.fightCapacity !== 0) {
      writer.uint32(552).int32(message.fightCapacity);
    }
    if (message.reduceResi !== 0) {
      writer.uint32(560).int32(message.reduceResi);
    }
    if (message.strength !== 0) {
      writer.uint32(568).int32(message.strength);
    }
    if (message.tenacity !== 0) {
      writer.uint32(576).int32(message.tenacity);
    }
    if (message.hasShadow !== false) {
      writer.uint32(584).bool(message.hasShadow);
    }
    writer.uint32(594).fork();
    for (const v of message.marriageSkills) {
      writer.int32(v);
    }
    writer.join();
    if (message.mateId !== 0) {
      writer.uint32(600).int32(message.mateId);
    }
    writer.uint32(610).fork();
    for (const v of message.marSkills) {
      writer.int32(v);
    }
    writer.join();
    if (message.mateServerName !== "") {
      writer.uint32(618).string(message.mateServerName);
    }
    if (message.curturn !== 0) {
      writer.uint32(624).int32(message.curturn);
    }
    writer.uint32(634).fork();
    for (const v of message.talentSealOrder) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(642).fork();
    for (const v of message.multiLanNickName) {
      writer.int32(v);
    }
    writer.join();
    if (message.segmentId !== 0) {
      writer.uint32(648).int32(message.segmentId);
    }
    if (message.mulSportScore !== 0) {
      writer.uint32(656).int32(message.mulSportScore);
    }
    if (message.spMax !== 0) {
      writer.uint32(664).int32(message.spMax);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(672).int32(message.consortiaId);
    }
    if (message.isRobot !== false) {
      writer.uint32(680).bool(message.isRobot);
    }
    if (message.atkpotentialAtr !== 0) {
      writer.uint32(688).int32(message.atkpotentialAtr);
    }
    if (message.matpotentialAtr !== 0) {
      writer.uint32(696).int32(message.matpotentialAtr);
    }
    if (message.defpotentialAtr !== 0) {
      writer.uint32(704).int32(message.defpotentialAtr);
    }
    if (message.mdfpotentialAtr !== 0) {
      writer.uint32(712).int32(message.mdfpotentialAtr);
    }
    if (message.hppotentialAtr !== 0) {
      writer.uint32(720).int32(message.hppotentialAtr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.livingId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userPics = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.tempId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.side = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.maxHp = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.initHp = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.hp = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.initHp2 = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.hp2 = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.sp = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.slotAvata = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.clothAvate = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.cloakPath = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.hairPath = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.captain = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.res = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.qteTime = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.castTime = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.pics = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.phyAttack = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.phyDefence = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.magAttack = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.magDefence = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.forceHit = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.parry = reader.int32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.sites = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.skillScript = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.pawnTempId = reader.int32();
          continue;
        }
        case 36: {
          if (tag === 288) {
            message.skillId.push(reader.int32());

            continue;
          }

          if (tag === 290) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.skillId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.attackWound = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.hitWound = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.attackModel = reader.int32();
          continue;
        }
        case 40: {
          if (tag === 320) {
            message.starBuffer.push(reader.int32());

            continue;
          }

          if (tag === 322) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.starBuffer.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 41: {
          if (tag === 328) {
            message.item.push(reader.int32());

            continue;
          }

          if (tag === 330) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.item.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 43: {
          if (tag === 344) {
            message.buffers.push(reader.int32());

            continue;
          }

          if (tag === 346) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.buffers.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.isShow = reader.bool();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.wingAvata = reader.string();
          continue;
        }
        case 47: {
          if (tag === 376) {
            message.trials.push(reader.int32());

            continue;
          }

          if (tag === 378) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.trials.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 48: {
          if (tag === 384) {
            message.battleDrop.push(reader.int32());

            continue;
          }

          if (tag === 386) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.battleDrop.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.hatAvata = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.fashionArmAvata = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.fashionClothAvata = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.fireResi = reader.int32();
          continue;
        }
        case 55: {
          if (tag !== 440) {
            break;
          }

          message.waterResi = reader.int32();
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.electResi = reader.int32();
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.windResi = reader.int32();
          continue;
        }
        case 58: {
          if (tag !== 464) {
            break;
          }

          message.darkResi = reader.int32();
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.lightResi = reader.int32();
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.followSkills = reader.string();
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.changeSkills = reader.string();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.defaultSkills = reader.string();
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.awake = reader.int32();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.livingId2 = reader.int32();
          continue;
        }
        case 65: {
          if (tag === 520) {
            message.changeSkillId.push(reader.int32());

            continue;
          }

          if (tag === 522) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.changeSkillId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.fateSkillTempIds = reader.string();
          continue;
        }
        case 67: {
          if (tag !== 536) {
            break;
          }

          message.isChange = reader.bool();
          continue;
        }
        case 68: {
          if (tag !== 544) {
            break;
          }

          message.petQuality = reader.int32();
          continue;
        }
        case 69: {
          if (tag !== 552) {
            break;
          }

          message.fightCapacity = reader.int32();
          continue;
        }
        case 70: {
          if (tag !== 560) {
            break;
          }

          message.reduceResi = reader.int32();
          continue;
        }
        case 71: {
          if (tag !== 568) {
            break;
          }

          message.strength = reader.int32();
          continue;
        }
        case 72: {
          if (tag !== 576) {
            break;
          }

          message.tenacity = reader.int32();
          continue;
        }
        case 73: {
          if (tag !== 584) {
            break;
          }

          message.hasShadow = reader.bool();
          continue;
        }
        case 74: {
          if (tag === 592) {
            message.marriageSkills.push(reader.int32());

            continue;
          }

          if (tag === 594) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.marriageSkills.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 75: {
          if (tag !== 600) {
            break;
          }

          message.mateId = reader.int32();
          continue;
        }
        case 76: {
          if (tag === 608) {
            message.marSkills.push(reader.int32());

            continue;
          }

          if (tag === 610) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.marSkills.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 77: {
          if (tag !== 618) {
            break;
          }

          message.mateServerName = reader.string();
          continue;
        }
        case 78: {
          if (tag !== 624) {
            break;
          }

          message.curturn = reader.int32();
          continue;
        }
        case 79: {
          if (tag === 632) {
            message.talentSealOrder.push(reader.int32());

            continue;
          }

          if (tag === 634) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.talentSealOrder.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 80: {
          if (tag === 640) {
            message.multiLanNickName.push(reader.int32());

            continue;
          }

          if (tag === 642) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.multiLanNickName.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 81: {
          if (tag !== 648) {
            break;
          }

          message.segmentId = reader.int32();
          continue;
        }
        case 82: {
          if (tag !== 656) {
            break;
          }

          message.mulSportScore = reader.int32();
          continue;
        }
        case 83: {
          if (tag !== 664) {
            break;
          }

          message.spMax = reader.int32();
          continue;
        }
        case 84: {
          if (tag !== 672) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 85: {
          if (tag !== 680) {
            break;
          }

          message.isRobot = reader.bool();
          continue;
        }
        case 86: {
          if (tag !== 688) {
            break;
          }

          message.atkpotentialAtr = reader.int32();
          continue;
        }
        case 87: {
          if (tag !== 696) {
            break;
          }

          message.matpotentialAtr = reader.int32();
          continue;
        }
        case 88: {
          if (tag !== 704) {
            break;
          }

          message.defpotentialAtr = reader.int32();
          continue;
        }
        case 89: {
          if (tag !== 712) {
            break;
          }

          message.mdfpotentialAtr = reader.int32();
          continue;
        }
        case 90: {
          if (tag !== 720) {
            break;
          }

          message.hppotentialAtr = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroMsg {
    return {
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      livingId: isSet(object.livingId) ? globalThis.Number(object.livingId) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      userPics: isSet(object.userPics) ? globalThis.Number(object.userPics) : 0,
      tempId: isSet(object.tempId) ? globalThis.Number(object.tempId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      side: isSet(object.side) ? globalThis.Number(object.side) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      maxHp: isSet(object.maxHp) ? globalThis.Number(object.maxHp) : 0,
      initHp: isSet(object.initHp) ? globalThis.Number(object.initHp) : 0,
      hp: isSet(object.hp) ? globalThis.Number(object.hp) : 0,
      initHp2: isSet(object.initHp2) ? globalThis.Number(object.initHp2) : 0,
      hp2: isSet(object.hp2) ? globalThis.Number(object.hp2) : 0,
      sp: isSet(object.sp) ? globalThis.Number(object.sp) : 0,
      slotAvata: isSet(object.slotAvata) ? globalThis.String(object.slotAvata) : "",
      clothAvate: isSet(object.clothAvate) ? globalThis.String(object.clothAvate) : "",
      cloakPath: isSet(object.cloakPath) ? globalThis.String(object.cloakPath) : "",
      hairPath: isSet(object.hairPath) ? globalThis.String(object.hairPath) : "",
      captain: isSet(object.captain) ? globalThis.Number(object.captain) : 0,
      res: isSet(object.res) ? globalThis.String(object.res) : "",
      qteTime: isSet(object.qteTime) ? globalThis.Number(object.qteTime) : 0,
      castTime: isSet(object.castTime) ? globalThis.Number(object.castTime) : 0,
      pics: isSet(object.pics) ? globalThis.Number(object.pics) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      phyAttack: isSet(object.phyAttack) ? globalThis.Number(object.phyAttack) : 0,
      phyDefence: isSet(object.phyDefence) ? globalThis.Number(object.phyDefence) : 0,
      magAttack: isSet(object.magAttack) ? globalThis.Number(object.magAttack) : 0,
      magDefence: isSet(object.magDefence) ? globalThis.Number(object.magDefence) : 0,
      forceHit: isSet(object.forceHit) ? globalThis.Number(object.forceHit) : 0,
      parry: isSet(object.parry) ? globalThis.Number(object.parry) : 0,
      sites: isSet(object.sites) ? globalThis.Number(object.sites) : 0,
      skillScript: isSet(object.skillScript) ? globalThis.String(object.skillScript) : "",
      pawnTempId: isSet(object.pawnTempId) ? globalThis.Number(object.pawnTempId) : 0,
      skillId: globalThis.Array.isArray(object?.skillId) ? object.skillId.map((e: any) => globalThis.Number(e)) : [],
      attackWound: isSet(object.attackWound) ? globalThis.Number(object.attackWound) : 0,
      hitWound: isSet(object.hitWound) ? globalThis.Number(object.hitWound) : 0,
      attackModel: isSet(object.attackModel) ? globalThis.Number(object.attackModel) : 0,
      starBuffer: globalThis.Array.isArray(object?.starBuffer)
        ? object.starBuffer.map((e: any) => globalThis.Number(e))
        : [],
      item: globalThis.Array.isArray(object?.item) ? object.item.map((e: any) => globalThis.Number(e)) : [],
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      buffers: globalThis.Array.isArray(object?.buffers) ? object.buffers.map((e: any) => globalThis.Number(e)) : [],
      isShow: isSet(object.isShow) ? globalThis.Boolean(object.isShow) : false,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      wingAvata: isSet(object.wingAvata) ? globalThis.String(object.wingAvata) : "",
      trials: globalThis.Array.isArray(object?.trials) ? object.trials.map((e: any) => globalThis.Number(e)) : [],
      battleDrop: globalThis.Array.isArray(object?.battleDrop)
        ? object.battleDrop.map((e: any) => globalThis.Number(e))
        : [],
      hatAvata: isSet(object.hatAvata) ? globalThis.String(object.hatAvata) : "",
      fashionArmAvata: isSet(object.fashionArmAvata) ? globalThis.String(object.fashionArmAvata) : "",
      fashionClothAvata: isSet(object.fashionClothAvata) ? globalThis.String(object.fashionClothAvata) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
      fireResi: isSet(object.fireResi) ? globalThis.Number(object.fireResi) : 0,
      waterResi: isSet(object.waterResi) ? globalThis.Number(object.waterResi) : 0,
      electResi: isSet(object.electResi) ? globalThis.Number(object.electResi) : 0,
      windResi: isSet(object.windResi) ? globalThis.Number(object.windResi) : 0,
      darkResi: isSet(object.darkResi) ? globalThis.Number(object.darkResi) : 0,
      lightResi: isSet(object.lightResi) ? globalThis.Number(object.lightResi) : 0,
      followSkills: isSet(object.followSkills) ? globalThis.String(object.followSkills) : "",
      changeSkills: isSet(object.changeSkills) ? globalThis.String(object.changeSkills) : "",
      defaultSkills: isSet(object.defaultSkills) ? globalThis.String(object.defaultSkills) : "",
      awake: isSet(object.awake) ? globalThis.Number(object.awake) : 0,
      livingId2: isSet(object.livingId2) ? globalThis.Number(object.livingId2) : 0,
      changeSkillId: globalThis.Array.isArray(object?.changeSkillId)
        ? object.changeSkillId.map((e: any) => globalThis.Number(e))
        : [],
      fateSkillTempIds: isSet(object.fateSkillTempIds) ? globalThis.String(object.fateSkillTempIds) : "",
      isChange: isSet(object.isChange) ? globalThis.Boolean(object.isChange) : false,
      petQuality: isSet(object.petQuality) ? globalThis.Number(object.petQuality) : 0,
      fightCapacity: isSet(object.fightCapacity) ? globalThis.Number(object.fightCapacity) : 0,
      reduceResi: isSet(object.reduceResi) ? globalThis.Number(object.reduceResi) : 0,
      strength: isSet(object.strength) ? globalThis.Number(object.strength) : 0,
      tenacity: isSet(object.tenacity) ? globalThis.Number(object.tenacity) : 0,
      hasShadow: isSet(object.hasShadow) ? globalThis.Boolean(object.hasShadow) : false,
      marriageSkills: globalThis.Array.isArray(object?.marriageSkills)
        ? object.marriageSkills.map((e: any) => globalThis.Number(e))
        : [],
      mateId: isSet(object.mateId) ? globalThis.Number(object.mateId) : 0,
      marSkills: globalThis.Array.isArray(object?.marSkills)
        ? object.marSkills.map((e: any) => globalThis.Number(e))
        : [],
      mateServerName: isSet(object.mateServerName) ? globalThis.String(object.mateServerName) : "",
      curturn: isSet(object.curturn) ? globalThis.Number(object.curturn) : 0,
      talentSealOrder: globalThis.Array.isArray(object?.talentSealOrder)
        ? object.talentSealOrder.map((e: any) => globalThis.Number(e))
        : [],
      multiLanNickName: globalThis.Array.isArray(object?.multiLanNickName)
        ? object.multiLanNickName.map((e: any) => globalThis.Number(e))
        : [],
      segmentId: isSet(object.segmentId) ? globalThis.Number(object.segmentId) : 0,
      mulSportScore: isSet(object.mulSportScore) ? globalThis.Number(object.mulSportScore) : 0,
      spMax: isSet(object.spMax) ? globalThis.Number(object.spMax) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      isRobot: isSet(object.isRobot) ? globalThis.Boolean(object.isRobot) : false,
      atkpotentialAtr: isSet(object.atkpotentialAtr) ? globalThis.Number(object.atkpotentialAtr) : 0,
      matpotentialAtr: isSet(object.matpotentialAtr) ? globalThis.Number(object.matpotentialAtr) : 0,
      defpotentialAtr: isSet(object.defpotentialAtr) ? globalThis.Number(object.defpotentialAtr) : 0,
      mdfpotentialAtr: isSet(object.mdfpotentialAtr) ? globalThis.Number(object.mdfpotentialAtr) : 0,
      hppotentialAtr: isSet(object.hppotentialAtr) ? globalThis.Number(object.hppotentialAtr) : 0,
    };
  },

  toJSON(message: HeroMsg): unknown {
    const obj: any = {};
    if (message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.livingId !== 0) {
      obj.livingId = Math.round(message.livingId);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.userPics !== 0) {
      obj.userPics = Math.round(message.userPics);
    }
    if (message.tempId !== 0) {
      obj.tempId = Math.round(message.tempId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.side !== 0) {
      obj.side = Math.round(message.side);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.maxHp !== 0) {
      obj.maxHp = Math.round(message.maxHp);
    }
    if (message.initHp !== 0) {
      obj.initHp = Math.round(message.initHp);
    }
    if (message.hp !== 0) {
      obj.hp = Math.round(message.hp);
    }
    if (message.initHp2 !== 0) {
      obj.initHp2 = Math.round(message.initHp2);
    }
    if (message.hp2 !== 0) {
      obj.hp2 = Math.round(message.hp2);
    }
    if (message.sp !== 0) {
      obj.sp = Math.round(message.sp);
    }
    if (message.slotAvata !== "") {
      obj.slotAvata = message.slotAvata;
    }
    if (message.clothAvate !== "") {
      obj.clothAvate = message.clothAvate;
    }
    if (message.cloakPath !== "") {
      obj.cloakPath = message.cloakPath;
    }
    if (message.hairPath !== "") {
      obj.hairPath = message.hairPath;
    }
    if (message.captain !== 0) {
      obj.captain = Math.round(message.captain);
    }
    if (message.res !== "") {
      obj.res = message.res;
    }
    if (message.qteTime !== 0) {
      obj.qteTime = Math.round(message.qteTime);
    }
    if (message.castTime !== 0) {
      obj.castTime = Math.round(message.castTime);
    }
    if (message.pics !== 0) {
      obj.pics = Math.round(message.pics);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.phyAttack !== 0) {
      obj.phyAttack = Math.round(message.phyAttack);
    }
    if (message.phyDefence !== 0) {
      obj.phyDefence = Math.round(message.phyDefence);
    }
    if (message.magAttack !== 0) {
      obj.magAttack = Math.round(message.magAttack);
    }
    if (message.magDefence !== 0) {
      obj.magDefence = Math.round(message.magDefence);
    }
    if (message.forceHit !== 0) {
      obj.forceHit = Math.round(message.forceHit);
    }
    if (message.parry !== 0) {
      obj.parry = Math.round(message.parry);
    }
    if (message.sites !== 0) {
      obj.sites = Math.round(message.sites);
    }
    if (message.skillScript !== "") {
      obj.skillScript = message.skillScript;
    }
    if (message.pawnTempId !== 0) {
      obj.pawnTempId = Math.round(message.pawnTempId);
    }
    if (message.skillId?.length) {
      obj.skillId = message.skillId.map((e) => Math.round(e));
    }
    if (message.attackWound !== 0) {
      obj.attackWound = Math.round(message.attackWound);
    }
    if (message.hitWound !== 0) {
      obj.hitWound = Math.round(message.hitWound);
    }
    if (message.attackModel !== 0) {
      obj.attackModel = Math.round(message.attackModel);
    }
    if (message.starBuffer?.length) {
      obj.starBuffer = message.starBuffer.map((e) => Math.round(e));
    }
    if (message.item?.length) {
      obj.item = message.item.map((e) => Math.round(e));
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.buffers?.length) {
      obj.buffers = message.buffers.map((e) => Math.round(e));
    }
    if (message.isShow !== false) {
      obj.isShow = message.isShow;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.wingAvata !== "") {
      obj.wingAvata = message.wingAvata;
    }
    if (message.trials?.length) {
      obj.trials = message.trials.map((e) => Math.round(e));
    }
    if (message.battleDrop?.length) {
      obj.battleDrop = message.battleDrop.map((e) => Math.round(e));
    }
    if (message.hatAvata !== "") {
      obj.hatAvata = message.hatAvata;
    }
    if (message.fashionArmAvata !== "") {
      obj.fashionArmAvata = message.fashionArmAvata;
    }
    if (message.fashionClothAvata !== "") {
      obj.fashionClothAvata = message.fashionClothAvata;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    if (message.fireResi !== 0) {
      obj.fireResi = Math.round(message.fireResi);
    }
    if (message.waterResi !== 0) {
      obj.waterResi = Math.round(message.waterResi);
    }
    if (message.electResi !== 0) {
      obj.electResi = Math.round(message.electResi);
    }
    if (message.windResi !== 0) {
      obj.windResi = Math.round(message.windResi);
    }
    if (message.darkResi !== 0) {
      obj.darkResi = Math.round(message.darkResi);
    }
    if (message.lightResi !== 0) {
      obj.lightResi = Math.round(message.lightResi);
    }
    if (message.followSkills !== "") {
      obj.followSkills = message.followSkills;
    }
    if (message.changeSkills !== "") {
      obj.changeSkills = message.changeSkills;
    }
    if (message.defaultSkills !== "") {
      obj.defaultSkills = message.defaultSkills;
    }
    if (message.awake !== 0) {
      obj.awake = Math.round(message.awake);
    }
    if (message.livingId2 !== 0) {
      obj.livingId2 = Math.round(message.livingId2);
    }
    if (message.changeSkillId?.length) {
      obj.changeSkillId = message.changeSkillId.map((e) => Math.round(e));
    }
    if (message.fateSkillTempIds !== "") {
      obj.fateSkillTempIds = message.fateSkillTempIds;
    }
    if (message.isChange !== false) {
      obj.isChange = message.isChange;
    }
    if (message.petQuality !== 0) {
      obj.petQuality = Math.round(message.petQuality);
    }
    if (message.fightCapacity !== 0) {
      obj.fightCapacity = Math.round(message.fightCapacity);
    }
    if (message.reduceResi !== 0) {
      obj.reduceResi = Math.round(message.reduceResi);
    }
    if (message.strength !== 0) {
      obj.strength = Math.round(message.strength);
    }
    if (message.tenacity !== 0) {
      obj.tenacity = Math.round(message.tenacity);
    }
    if (message.hasShadow !== false) {
      obj.hasShadow = message.hasShadow;
    }
    if (message.marriageSkills?.length) {
      obj.marriageSkills = message.marriageSkills.map((e) => Math.round(e));
    }
    if (message.mateId !== 0) {
      obj.mateId = Math.round(message.mateId);
    }
    if (message.marSkills?.length) {
      obj.marSkills = message.marSkills.map((e) => Math.round(e));
    }
    if (message.mateServerName !== "") {
      obj.mateServerName = message.mateServerName;
    }
    if (message.curturn !== 0) {
      obj.curturn = Math.round(message.curturn);
    }
    if (message.talentSealOrder?.length) {
      obj.talentSealOrder = message.talentSealOrder.map((e) => Math.round(e));
    }
    if (message.multiLanNickName?.length) {
      obj.multiLanNickName = message.multiLanNickName.map((e) => Math.round(e));
    }
    if (message.segmentId !== 0) {
      obj.segmentId = Math.round(message.segmentId);
    }
    if (message.mulSportScore !== 0) {
      obj.mulSportScore = Math.round(message.mulSportScore);
    }
    if (message.spMax !== 0) {
      obj.spMax = Math.round(message.spMax);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.isRobot !== false) {
      obj.isRobot = message.isRobot;
    }
    if (message.atkpotentialAtr !== 0) {
      obj.atkpotentialAtr = Math.round(message.atkpotentialAtr);
    }
    if (message.matpotentialAtr !== 0) {
      obj.matpotentialAtr = Math.round(message.matpotentialAtr);
    }
    if (message.defpotentialAtr !== 0) {
      obj.defpotentialAtr = Math.round(message.defpotentialAtr);
    }
    if (message.mdfpotentialAtr !== 0) {
      obj.mdfpotentialAtr = Math.round(message.mdfpotentialAtr);
    }
    if (message.hppotentialAtr !== 0) {
      obj.hppotentialAtr = Math.round(message.hppotentialAtr);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroMsg>, I>>(base?: I): HeroMsg {
    return HeroMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroMsg>, I>>(object: I): HeroMsg {
    const message = createBaseHeroMsg();
    message.heroId = object.heroId ?? 0;
    message.livingId = object.livingId ?? 0;
    message.userId = object.userId ?? 0;
    message.userPics = object.userPics ?? 0;
    message.tempId = object.tempId ?? 0;
    message.type = object.type ?? 0;
    message.nickName = object.nickName ?? "";
    message.grade = object.grade ?? 0;
    message.side = object.side ?? 0;
    message.pos = object.pos ?? 0;
    message.maxHp = object.maxHp ?? 0;
    message.initHp = object.initHp ?? 0;
    message.hp = object.hp ?? 0;
    message.initHp2 = object.initHp2 ?? 0;
    message.hp2 = object.hp2 ?? 0;
    message.sp = object.sp ?? 0;
    message.slotAvata = object.slotAvata ?? "";
    message.clothAvate = object.clothAvate ?? "";
    message.cloakPath = object.cloakPath ?? "";
    message.hairPath = object.hairPath ?? "";
    message.captain = object.captain ?? 0;
    message.res = object.res ?? "";
    message.qteTime = object.qteTime ?? 0;
    message.castTime = object.castTime ?? 0;
    message.pics = object.pics ?? 0;
    message.job = object.job ?? 0;
    message.phyAttack = object.phyAttack ?? 0;
    message.phyDefence = object.phyDefence ?? 0;
    message.magAttack = object.magAttack ?? 0;
    message.magDefence = object.magDefence ?? 0;
    message.forceHit = object.forceHit ?? 0;
    message.parry = object.parry ?? 0;
    message.sites = object.sites ?? 0;
    message.skillScript = object.skillScript ?? "";
    message.pawnTempId = object.pawnTempId ?? 0;
    message.skillId = object.skillId?.map((e) => e) || [];
    message.attackWound = object.attackWound ?? 0;
    message.hitWound = object.hitWound ?? 0;
    message.attackModel = object.attackModel ?? 0;
    message.starBuffer = object.starBuffer?.map((e) => e) || [];
    message.item = object.item?.map((e) => e) || [];
    message.headId = object.headId ?? 0;
    message.buffers = object.buffers?.map((e) => e) || [];
    message.isShow = object.isShow ?? false;
    message.serverName = object.serverName ?? "";
    message.wingAvata = object.wingAvata ?? "";
    message.trials = object.trials?.map((e) => e) || [];
    message.battleDrop = object.battleDrop?.map((e) => e) || [];
    message.hatAvata = object.hatAvata ?? "";
    message.fashionArmAvata = object.fashionArmAvata ?? "";
    message.fashionClothAvata = object.fashionClothAvata ?? "";
    message.hide = object.hide ?? false;
    message.appellId = object.appellId ?? 0;
    message.fireResi = object.fireResi ?? 0;
    message.waterResi = object.waterResi ?? 0;
    message.electResi = object.electResi ?? 0;
    message.windResi = object.windResi ?? 0;
    message.darkResi = object.darkResi ?? 0;
    message.lightResi = object.lightResi ?? 0;
    message.followSkills = object.followSkills ?? "";
    message.changeSkills = object.changeSkills ?? "";
    message.defaultSkills = object.defaultSkills ?? "";
    message.awake = object.awake ?? 0;
    message.livingId2 = object.livingId2 ?? 0;
    message.changeSkillId = object.changeSkillId?.map((e) => e) || [];
    message.fateSkillTempIds = object.fateSkillTempIds ?? "";
    message.isChange = object.isChange ?? false;
    message.petQuality = object.petQuality ?? 0;
    message.fightCapacity = object.fightCapacity ?? 0;
    message.reduceResi = object.reduceResi ?? 0;
    message.strength = object.strength ?? 0;
    message.tenacity = object.tenacity ?? 0;
    message.hasShadow = object.hasShadow ?? false;
    message.marriageSkills = object.marriageSkills?.map((e) => e) || [];
    message.mateId = object.mateId ?? 0;
    message.marSkills = object.marSkills?.map((e) => e) || [];
    message.mateServerName = object.mateServerName ?? "";
    message.curturn = object.curturn ?? 0;
    message.talentSealOrder = object.talentSealOrder?.map((e) => e) || [];
    message.multiLanNickName = object.multiLanNickName?.map((e) => e) || [];
    message.segmentId = object.segmentId ?? 0;
    message.mulSportScore = object.mulSportScore ?? 0;
    message.spMax = object.spMax ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.isRobot = object.isRobot ?? false;
    message.atkpotentialAtr = object.atkpotentialAtr ?? 0;
    message.matpotentialAtr = object.matpotentialAtr ?? 0;
    message.defpotentialAtr = object.defpotentialAtr ?? 0;
    message.mdfpotentialAtr = object.mdfpotentialAtr ?? 0;
    message.hppotentialAtr = object.hppotentialAtr ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
