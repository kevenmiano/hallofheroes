// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/ChargePointLotteryMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface ChargePointLotteryMsg {
  op: number;
  chargePoint: number;
  oneNeedPoint: number;
  leftNeedPoint: number;
  leftCount: number;
  dayMaxCount: number;
  dayAddCount: number;
  openTime: string;
  stopTime: string;
  reward: number[];
  logs: number[];
  isOneKey: boolean;
  isRare: boolean;
  resultPos: number[];
  lotteryInfo: number[];
  activeId: string;
  lotteryNum: number;
}

function createBaseChargePointLotteryMsg(): ChargePointLotteryMsg {
  return {
    op: 0,
    chargePoint: 0,
    oneNeedPoint: 0,
    leftNeedPoint: 0,
    leftCount: 0,
    dayMaxCount: 0,
    dayAddCount: 0,
    openTime: "",
    stopTime: "",
    reward: [],
    logs: [],
    isOneKey: false,
    isRare: false,
    resultPos: [],
    lotteryInfo: [],
    activeId: "",
    lotteryNum: 0,
  };
}

export const ChargePointLotteryMsg: MessageFns<ChargePointLotteryMsg> = {
  encode(message: ChargePointLotteryMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.chargePoint !== 0) {
      writer.uint32(16).int32(message.chargePoint);
    }
    if (message.oneNeedPoint !== 0) {
      writer.uint32(24).int32(message.oneNeedPoint);
    }
    if (message.leftNeedPoint !== 0) {
      writer.uint32(32).int32(message.leftNeedPoint);
    }
    if (message.leftCount !== 0) {
      writer.uint32(40).int32(message.leftCount);
    }
    if (message.dayMaxCount !== 0) {
      writer.uint32(48).int32(message.dayMaxCount);
    }
    if (message.dayAddCount !== 0) {
      writer.uint32(56).int32(message.dayAddCount);
    }
    if (message.openTime !== "") {
      writer.uint32(66).string(message.openTime);
    }
    if (message.stopTime !== "") {
      writer.uint32(74).string(message.stopTime);
    }
    writer.uint32(82).fork();
    for (const v of message.reward) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(90).fork();
    for (const v of message.logs) {
      writer.int32(v);
    }
    writer.join();
    if (message.isOneKey !== false) {
      writer.uint32(96).bool(message.isOneKey);
    }
    if (message.isRare !== false) {
      writer.uint32(104).bool(message.isRare);
    }
    writer.uint32(114).fork();
    for (const v of message.resultPos) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(122).fork();
    for (const v of message.lotteryInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.activeId !== "") {
      writer.uint32(130).string(message.activeId);
    }
    if (message.lotteryNum !== 0) {
      writer.uint32(136).int32(message.lotteryNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargePointLotteryMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargePointLotteryMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chargePoint = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.oneNeedPoint = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leftNeedPoint = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.leftCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.dayMaxCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.dayAddCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.openTime = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.stopTime = reader.string();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.reward.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.reward.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag === 88) {
            message.logs.push(reader.int32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.logs.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isOneKey = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isRare = reader.bool();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.resultPos.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.resultPos.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag === 120) {
            message.lotteryInfo.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.lotteryInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.lotteryNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargePointLotteryMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      chargePoint: isSet(object.chargePoint) ? globalThis.Number(object.chargePoint) : 0,
      oneNeedPoint: isSet(object.oneNeedPoint) ? globalThis.Number(object.oneNeedPoint) : 0,
      leftNeedPoint: isSet(object.leftNeedPoint) ? globalThis.Number(object.leftNeedPoint) : 0,
      leftCount: isSet(object.leftCount) ? globalThis.Number(object.leftCount) : 0,
      dayMaxCount: isSet(object.dayMaxCount) ? globalThis.Number(object.dayMaxCount) : 0,
      dayAddCount: isSet(object.dayAddCount) ? globalThis.Number(object.dayAddCount) : 0,
      openTime: isSet(object.openTime) ? globalThis.String(object.openTime) : "",
      stopTime: isSet(object.stopTime) ? globalThis.String(object.stopTime) : "",
      reward: globalThis.Array.isArray(object?.reward) ? object.reward.map((e: any) => globalThis.Number(e)) : [],
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.Number(e)) : [],
      isOneKey: isSet(object.isOneKey) ? globalThis.Boolean(object.isOneKey) : false,
      isRare: isSet(object.isRare) ? globalThis.Boolean(object.isRare) : false,
      resultPos: globalThis.Array.isArray(object?.resultPos)
        ? object.resultPos.map((e: any) => globalThis.Number(e))
        : [],
      lotteryInfo: globalThis.Array.isArray(object?.lotteryInfo)
        ? object.lotteryInfo.map((e: any) => globalThis.Number(e))
        : [],
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      lotteryNum: isSet(object.lotteryNum) ? globalThis.Number(object.lotteryNum) : 0,
    };
  },

  toJSON(message: ChargePointLotteryMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.chargePoint !== 0) {
      obj.chargePoint = Math.round(message.chargePoint);
    }
    if (message.oneNeedPoint !== 0) {
      obj.oneNeedPoint = Math.round(message.oneNeedPoint);
    }
    if (message.leftNeedPoint !== 0) {
      obj.leftNeedPoint = Math.round(message.leftNeedPoint);
    }
    if (message.leftCount !== 0) {
      obj.leftCount = Math.round(message.leftCount);
    }
    if (message.dayMaxCount !== 0) {
      obj.dayMaxCount = Math.round(message.dayMaxCount);
    }
    if (message.dayAddCount !== 0) {
      obj.dayAddCount = Math.round(message.dayAddCount);
    }
    if (message.openTime !== "") {
      obj.openTime = message.openTime;
    }
    if (message.stopTime !== "") {
      obj.stopTime = message.stopTime;
    }
    if (message.reward?.length) {
      obj.reward = message.reward.map((e) => Math.round(e));
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => Math.round(e));
    }
    if (message.isOneKey !== false) {
      obj.isOneKey = message.isOneKey;
    }
    if (message.isRare !== false) {
      obj.isRare = message.isRare;
    }
    if (message.resultPos?.length) {
      obj.resultPos = message.resultPos.map((e) => Math.round(e));
    }
    if (message.lotteryInfo?.length) {
      obj.lotteryInfo = message.lotteryInfo.map((e) => Math.round(e));
    }
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.lotteryNum !== 0) {
      obj.lotteryNum = Math.round(message.lotteryNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargePointLotteryMsg>, I>>(base?: I): ChargePointLotteryMsg {
    return ChargePointLotteryMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargePointLotteryMsg>, I>>(object: I): ChargePointLotteryMsg {
    const message = createBaseChargePointLotteryMsg();
    message.op = object.op ?? 0;
    message.chargePoint = object.chargePoint ?? 0;
    message.oneNeedPoint = object.oneNeedPoint ?? 0;
    message.leftNeedPoint = object.leftNeedPoint ?? 0;
    message.leftCount = object.leftCount ?? 0;
    message.dayMaxCount = object.dayMaxCount ?? 0;
    message.dayAddCount = object.dayAddCount ?? 0;
    message.openTime = object.openTime ?? "";
    message.stopTime = object.stopTime ?? "";
    message.reward = object.reward?.map((e) => e) || [];
    message.logs = object.logs?.map((e) => e) || [];
    message.isOneKey = object.isOneKey ?? false;
    message.isRare = object.isRare ?? false;
    message.resultPos = object.resultPos?.map((e) => e) || [];
    message.lotteryInfo = object.lotteryInfo?.map((e) => e) || [];
    message.activeId = object.activeId ?? "";
    message.lotteryNum = object.lotteryNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
