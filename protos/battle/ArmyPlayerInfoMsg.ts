// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/ArmyPlayerInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface ArmyPlayerInfoMsg {
  aasFactor: number;
  isVip: boolean;
  vipType: number;
  gesteDecCount: number;
  consortiaId: number;
  consortiaName: string;
  changeShapeId: number;
  arm: string;
  geste: number;
  mountTempId: number;
  mountGrade: number;
  wing: string;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  isMaxCount: boolean;
  vipGrade: number;
  fateSkills: string;
  petTempId: number;
  petQuality: number;
  petName: string;
  isNoGet: boolean;
  isCrossMultiReward: boolean;
  mulSportScore: number;
}

function createBaseArmyPlayerInfoMsg(): ArmyPlayerInfoMsg {
  return {
    aasFactor: 0,
    isVip: false,
    vipType: 0,
    gesteDecCount: 0,
    consortiaId: 0,
    consortiaName: "",
    changeShapeId: 0,
    arm: "",
    geste: 0,
    mountTempId: 0,
    mountGrade: 0,
    wing: "",
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    isMaxCount: false,
    vipGrade: 0,
    fateSkills: "",
    petTempId: 0,
    petQuality: 0,
    petName: "",
    isNoGet: false,
    isCrossMultiReward: false,
    mulSportScore: 0,
  };
}

export const ArmyPlayerInfoMsg: MessageFns<ArmyPlayerInfoMsg> = {
  encode(message: ArmyPlayerInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aasFactor !== 0) {
      writer.uint32(8).int32(message.aasFactor);
    }
    if (message.isVip !== false) {
      writer.uint32(16).bool(message.isVip);
    }
    if (message.vipType !== 0) {
      writer.uint32(24).int32(message.vipType);
    }
    if (message.gesteDecCount !== 0) {
      writer.uint32(32).int32(message.gesteDecCount);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(40).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(50).string(message.consortiaName);
    }
    if (message.changeShapeId !== 0) {
      writer.uint32(56).int32(message.changeShapeId);
    }
    if (message.arm !== "") {
      writer.uint32(66).string(message.arm);
    }
    if (message.geste !== 0) {
      writer.uint32(72).int32(message.geste);
    }
    if (message.mountTempId !== 0) {
      writer.uint32(80).int32(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      writer.uint32(88).int32(message.mountGrade);
    }
    if (message.wing !== "") {
      writer.uint32(98).string(message.wing);
    }
    if (message.hat !== "") {
      writer.uint32(106).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(114).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(122).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(128).bool(message.hide);
    }
    if (message.isMaxCount !== false) {
      writer.uint32(136).bool(message.isMaxCount);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(144).int32(message.vipGrade);
    }
    if (message.fateSkills !== "") {
      writer.uint32(154).string(message.fateSkills);
    }
    if (message.petTempId !== 0) {
      writer.uint32(160).int32(message.petTempId);
    }
    if (message.petQuality !== 0) {
      writer.uint32(168).int32(message.petQuality);
    }
    if (message.petName !== "") {
      writer.uint32(178).string(message.petName);
    }
    if (message.isNoGet !== false) {
      writer.uint32(184).bool(message.isNoGet);
    }
    if (message.isCrossMultiReward !== false) {
      writer.uint32(192).bool(message.isCrossMultiReward);
    }
    if (message.mulSportScore !== 0) {
      writer.uint32(200).int32(message.mulSportScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArmyPlayerInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArmyPlayerInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.aasFactor = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gesteDecCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.changeShapeId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mountTempId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mountGrade = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.isMaxCount = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.fateSkills = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.petTempId = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.petQuality = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.isNoGet = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.isCrossMultiReward = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.mulSportScore = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArmyPlayerInfoMsg {
    return {
      aasFactor: isSet(object.aasFactor) ? globalThis.Number(object.aasFactor) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      gesteDecCount: isSet(object.gesteDecCount) ? globalThis.Number(object.gesteDecCount) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      changeShapeId: isSet(object.changeShapeId) ? globalThis.Number(object.changeShapeId) : 0,
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      mountTempId: isSet(object.mountTempId) ? globalThis.Number(object.mountTempId) : 0,
      mountGrade: isSet(object.mountGrade) ? globalThis.Number(object.mountGrade) : 0,
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      isMaxCount: isSet(object.isMaxCount) ? globalThis.Boolean(object.isMaxCount) : false,
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
      fateSkills: isSet(object.fateSkills) ? globalThis.String(object.fateSkills) : "",
      petTempId: isSet(object.petTempId) ? globalThis.Number(object.petTempId) : 0,
      petQuality: isSet(object.petQuality) ? globalThis.Number(object.petQuality) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      isNoGet: isSet(object.isNoGet) ? globalThis.Boolean(object.isNoGet) : false,
      isCrossMultiReward: isSet(object.isCrossMultiReward) ? globalThis.Boolean(object.isCrossMultiReward) : false,
      mulSportScore: isSet(object.mulSportScore) ? globalThis.Number(object.mulSportScore) : 0,
    };
  },

  toJSON(message: ArmyPlayerInfoMsg): unknown {
    const obj: any = {};
    if (message.aasFactor !== 0) {
      obj.aasFactor = Math.round(message.aasFactor);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.gesteDecCount !== 0) {
      obj.gesteDecCount = Math.round(message.gesteDecCount);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.changeShapeId !== 0) {
      obj.changeShapeId = Math.round(message.changeShapeId);
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.mountTempId !== 0) {
      obj.mountTempId = Math.round(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      obj.mountGrade = Math.round(message.mountGrade);
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.isMaxCount !== false) {
      obj.isMaxCount = message.isMaxCount;
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    if (message.fateSkills !== "") {
      obj.fateSkills = message.fateSkills;
    }
    if (message.petTempId !== 0) {
      obj.petTempId = Math.round(message.petTempId);
    }
    if (message.petQuality !== 0) {
      obj.petQuality = Math.round(message.petQuality);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.isNoGet !== false) {
      obj.isNoGet = message.isNoGet;
    }
    if (message.isCrossMultiReward !== false) {
      obj.isCrossMultiReward = message.isCrossMultiReward;
    }
    if (message.mulSportScore !== 0) {
      obj.mulSportScore = Math.round(message.mulSportScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArmyPlayerInfoMsg>, I>>(base?: I): ArmyPlayerInfoMsg {
    return ArmyPlayerInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArmyPlayerInfoMsg>, I>>(object: I): ArmyPlayerInfoMsg {
    const message = createBaseArmyPlayerInfoMsg();
    message.aasFactor = object.aasFactor ?? 0;
    message.isVip = object.isVip ?? false;
    message.vipType = object.vipType ?? 0;
    message.gesteDecCount = object.gesteDecCount ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.changeShapeId = object.changeShapeId ?? 0;
    message.arm = object.arm ?? "";
    message.geste = object.geste ?? 0;
    message.mountTempId = object.mountTempId ?? 0;
    message.mountGrade = object.mountGrade ?? 0;
    message.wing = object.wing ?? "";
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.isMaxCount = object.isMaxCount ?? false;
    message.vipGrade = object.vipGrade ?? 0;
    message.fateSkills = object.fateSkills ?? "";
    message.petTempId = object.petTempId ?? 0;
    message.petQuality = object.petQuality ?? 0;
    message.petName = object.petName ?? "";
    message.isNoGet = object.isNoGet ?? false;
    message.isCrossMultiReward = object.isCrossMultiReward ?? false;
    message.mulSportScore = object.mulSportScore ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
