// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: guildcampaign/GuildChallengeInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.guildcampaign";

export interface GuildChallengeInfoMsg {
  isExist: boolean;
  startTime: string;
  endTime: string;
  attackGuildId: number;
  defencGuildId: number;
  attackName: string;
  defencName: string;
}

function createBaseGuildChallengeInfoMsg(): GuildChallengeInfoMsg {
  return {
    isExist: false,
    startTime: "",
    endTime: "",
    attackGuildId: 0,
    defencGuildId: 0,
    attackName: "",
    defencName: "",
  };
}

export const GuildChallengeInfoMsg: MessageFns<GuildChallengeInfoMsg> = {
  encode(message: GuildChallengeInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isExist !== false) {
      writer.uint32(8).bool(message.isExist);
    }
    if (message.startTime !== "") {
      writer.uint32(18).string(message.startTime);
    }
    if (message.endTime !== "") {
      writer.uint32(26).string(message.endTime);
    }
    if (message.attackGuildId !== 0) {
      writer.uint32(32).int32(message.attackGuildId);
    }
    if (message.defencGuildId !== 0) {
      writer.uint32(40).int32(message.defencGuildId);
    }
    if (message.attackName !== "") {
      writer.uint32(50).string(message.attackName);
    }
    if (message.defencName !== "") {
      writer.uint32(58).string(message.defencName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GuildChallengeInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuildChallengeInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.attackGuildId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.defencGuildId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.attackName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.defencName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GuildChallengeInfoMsg {
    return {
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      attackGuildId: isSet(object.attackGuildId) ? globalThis.Number(object.attackGuildId) : 0,
      defencGuildId: isSet(object.defencGuildId) ? globalThis.Number(object.defencGuildId) : 0,
      attackName: isSet(object.attackName) ? globalThis.String(object.attackName) : "",
      defencName: isSet(object.defencName) ? globalThis.String(object.defencName) : "",
    };
  },

  toJSON(message: GuildChallengeInfoMsg): unknown {
    const obj: any = {};
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.attackGuildId !== 0) {
      obj.attackGuildId = Math.round(message.attackGuildId);
    }
    if (message.defencGuildId !== 0) {
      obj.defencGuildId = Math.round(message.defencGuildId);
    }
    if (message.attackName !== "") {
      obj.attackName = message.attackName;
    }
    if (message.defencName !== "") {
      obj.defencName = message.defencName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GuildChallengeInfoMsg>, I>>(base?: I): GuildChallengeInfoMsg {
    return GuildChallengeInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GuildChallengeInfoMsg>, I>>(object: I): GuildChallengeInfoMsg {
    const message = createBaseGuildChallengeInfoMsg();
    message.isExist = object.isExist ?? false;
    message.startTime = object.startTime ?? "";
    message.endTime = object.endTime ?? "";
    message.attackGuildId = object.attackGuildId ?? 0;
    message.defencGuildId = object.defencGuildId ?? 0;
    message.attackName = object.attackName ?? "";
    message.defencName = object.defencName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
