// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaUserOfferReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaUserOfferReqMsg {
  offerGold: number;
  offerPoint: number;
  payType: number;
}

function createBaseConsortiaUserOfferReqMsg(): ConsortiaUserOfferReqMsg {
  return { offerGold: 0, offerPoint: 0, payType: 0 };
}

export const ConsortiaUserOfferReqMsg: MessageFns<ConsortiaUserOfferReqMsg> = {
  encode(message: ConsortiaUserOfferReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offerGold !== 0) {
      writer.uint32(8).int32(message.offerGold);
    }
    if (message.offerPoint !== 0) {
      writer.uint32(16).int32(message.offerPoint);
    }
    if (message.payType !== 0) {
      writer.uint32(24).int32(message.payType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaUserOfferReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaUserOfferReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offerGold = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offerPoint = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaUserOfferReqMsg {
    return {
      offerGold: isSet(object.offerGold) ? globalThis.Number(object.offerGold) : 0,
      offerPoint: isSet(object.offerPoint) ? globalThis.Number(object.offerPoint) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
    };
  },

  toJSON(message: ConsortiaUserOfferReqMsg): unknown {
    const obj: any = {};
    if (message.offerGold !== 0) {
      obj.offerGold = Math.round(message.offerGold);
    }
    if (message.offerPoint !== 0) {
      obj.offerPoint = Math.round(message.offerPoint);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaUserOfferReqMsg>, I>>(base?: I): ConsortiaUserOfferReqMsg {
    return ConsortiaUserOfferReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaUserOfferReqMsg>, I>>(object: I): ConsortiaUserOfferReqMsg {
    const message = createBaseConsortiaUserOfferReqMsg();
    message.offerGold = object.offerGold ?? 0;
    message.offerPoint = object.offerPoint ?? 0;
    message.payType = object.payType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
