// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignNpcMoveMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignNpcMoveMsg {
  nodeId: number;
  startX: number;
  startY: number;
  endX: number;
  endY: number;
  showTime: string;
  uuId: string;
  centerX: number;
  centerY: number;
  isMove: boolean;
}

function createBaseCampaignNpcMoveMsg(): CampaignNpcMoveMsg {
  return {
    nodeId: 0,
    startX: 0,
    startY: 0,
    endX: 0,
    endY: 0,
    showTime: "",
    uuId: "",
    centerX: 0,
    centerY: 0,
    isMove: false,
  };
}

export const CampaignNpcMoveMsg: MessageFns<CampaignNpcMoveMsg> = {
  encode(message: CampaignNpcMoveMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== 0) {
      writer.uint32(8).int32(message.nodeId);
    }
    if (message.startX !== 0) {
      writer.uint32(16).int32(message.startX);
    }
    if (message.startY !== 0) {
      writer.uint32(24).int32(message.startY);
    }
    if (message.endX !== 0) {
      writer.uint32(32).int32(message.endX);
    }
    if (message.endY !== 0) {
      writer.uint32(40).int32(message.endY);
    }
    if (message.showTime !== "") {
      writer.uint32(50).string(message.showTime);
    }
    if (message.uuId !== "") {
      writer.uint32(58).string(message.uuId);
    }
    if (message.centerX !== 0) {
      writer.uint32(64).int32(message.centerX);
    }
    if (message.centerY !== 0) {
      writer.uint32(72).int32(message.centerY);
    }
    if (message.isMove !== false) {
      writer.uint32(80).bool(message.isMove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignNpcMoveMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignNpcMoveMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startX = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startY = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endX = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endY = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.showTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.uuId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.centerX = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.centerY = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isMove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignNpcMoveMsg {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      startX: isSet(object.startX) ? globalThis.Number(object.startX) : 0,
      startY: isSet(object.startY) ? globalThis.Number(object.startY) : 0,
      endX: isSet(object.endX) ? globalThis.Number(object.endX) : 0,
      endY: isSet(object.endY) ? globalThis.Number(object.endY) : 0,
      showTime: isSet(object.showTime) ? globalThis.String(object.showTime) : "",
      uuId: isSet(object.uuId) ? globalThis.String(object.uuId) : "",
      centerX: isSet(object.centerX) ? globalThis.Number(object.centerX) : 0,
      centerY: isSet(object.centerY) ? globalThis.Number(object.centerY) : 0,
      isMove: isSet(object.isMove) ? globalThis.Boolean(object.isMove) : false,
    };
  },

  toJSON(message: CampaignNpcMoveMsg): unknown {
    const obj: any = {};
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.startX !== 0) {
      obj.startX = Math.round(message.startX);
    }
    if (message.startY !== 0) {
      obj.startY = Math.round(message.startY);
    }
    if (message.endX !== 0) {
      obj.endX = Math.round(message.endX);
    }
    if (message.endY !== 0) {
      obj.endY = Math.round(message.endY);
    }
    if (message.showTime !== "") {
      obj.showTime = message.showTime;
    }
    if (message.uuId !== "") {
      obj.uuId = message.uuId;
    }
    if (message.centerX !== 0) {
      obj.centerX = Math.round(message.centerX);
    }
    if (message.centerY !== 0) {
      obj.centerY = Math.round(message.centerY);
    }
    if (message.isMove !== false) {
      obj.isMove = message.isMove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignNpcMoveMsg>, I>>(base?: I): CampaignNpcMoveMsg {
    return CampaignNpcMoveMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignNpcMoveMsg>, I>>(object: I): CampaignNpcMoveMsg {
    const message = createBaseCampaignNpcMoveMsg();
    message.nodeId = object.nodeId ?? 0;
    message.startX = object.startX ?? 0;
    message.startY = object.startY ?? 0;
    message.endX = object.endX ?? 0;
    message.endY = object.endY ?? 0;
    message.showTime = object.showTime ?? "";
    message.uuId = object.uuId ?? "";
    message.centerX = object.centerX ?? 0;
    message.centerY = object.centerY ?? 0;
    message.isMove = object.isMove ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
