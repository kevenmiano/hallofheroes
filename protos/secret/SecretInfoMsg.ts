// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: secret/SecretInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.secret";

export interface SecretInfoMsg {
  secretId: number;
  type: number;
  maxLayer: number;
  curLayer: number;
  eventId: number;
  passSecret: string;
  curStatus: number;
  treasure: string;
  enterNum: number;
  dropItem: string;
  dropType: number;
}

function createBaseSecretInfoMsg(): SecretInfoMsg {
  return {
    secretId: 0,
    type: 0,
    maxLayer: 0,
    curLayer: 0,
    eventId: 0,
    passSecret: "",
    curStatus: 0,
    treasure: "",
    enterNum: 0,
    dropItem: "",
    dropType: 0,
  };
}

export const SecretInfoMsg: MessageFns<SecretInfoMsg> = {
  encode(message: SecretInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretId !== 0) {
      writer.uint32(8).int32(message.secretId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.maxLayer !== 0) {
      writer.uint32(24).int32(message.maxLayer);
    }
    if (message.curLayer !== 0) {
      writer.uint32(32).int32(message.curLayer);
    }
    if (message.eventId !== 0) {
      writer.uint32(40).int32(message.eventId);
    }
    if (message.passSecret !== "") {
      writer.uint32(50).string(message.passSecret);
    }
    if (message.curStatus !== 0) {
      writer.uint32(56).int32(message.curStatus);
    }
    if (message.treasure !== "") {
      writer.uint32(66).string(message.treasure);
    }
    if (message.enterNum !== 0) {
      writer.uint32(72).int32(message.enterNum);
    }
    if (message.dropItem !== "") {
      writer.uint32(82).string(message.dropItem);
    }
    if (message.dropType !== 0) {
      writer.uint32(88).int32(message.dropType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.secretId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxLayer = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.curLayer = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.eventId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.passSecret = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curStatus = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.treasure = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enterNum = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.dropItem = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.dropType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretInfoMsg {
    return {
      secretId: isSet(object.secretId) ? globalThis.Number(object.secretId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      maxLayer: isSet(object.maxLayer) ? globalThis.Number(object.maxLayer) : 0,
      curLayer: isSet(object.curLayer) ? globalThis.Number(object.curLayer) : 0,
      eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
      passSecret: isSet(object.passSecret) ? globalThis.String(object.passSecret) : "",
      curStatus: isSet(object.curStatus) ? globalThis.Number(object.curStatus) : 0,
      treasure: isSet(object.treasure) ? globalThis.String(object.treasure) : "",
      enterNum: isSet(object.enterNum) ? globalThis.Number(object.enterNum) : 0,
      dropItem: isSet(object.dropItem) ? globalThis.String(object.dropItem) : "",
      dropType: isSet(object.dropType) ? globalThis.Number(object.dropType) : 0,
    };
  },

  toJSON(message: SecretInfoMsg): unknown {
    const obj: any = {};
    if (message.secretId !== 0) {
      obj.secretId = Math.round(message.secretId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.maxLayer !== 0) {
      obj.maxLayer = Math.round(message.maxLayer);
    }
    if (message.curLayer !== 0) {
      obj.curLayer = Math.round(message.curLayer);
    }
    if (message.eventId !== 0) {
      obj.eventId = Math.round(message.eventId);
    }
    if (message.passSecret !== "") {
      obj.passSecret = message.passSecret;
    }
    if (message.curStatus !== 0) {
      obj.curStatus = Math.round(message.curStatus);
    }
    if (message.treasure !== "") {
      obj.treasure = message.treasure;
    }
    if (message.enterNum !== 0) {
      obj.enterNum = Math.round(message.enterNum);
    }
    if (message.dropItem !== "") {
      obj.dropItem = message.dropItem;
    }
    if (message.dropType !== 0) {
      obj.dropType = Math.round(message.dropType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecretInfoMsg>, I>>(base?: I): SecretInfoMsg {
    return SecretInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecretInfoMsg>, I>>(object: I): SecretInfoMsg {
    const message = createBaseSecretInfoMsg();
    message.secretId = object.secretId ?? 0;
    message.type = object.type ?? 0;
    message.maxLayer = object.maxLayer ?? 0;
    message.curLayer = object.curLayer ?? 0;
    message.eventId = object.eventId ?? 0;
    message.passSecret = object.passSecret ?? "";
    message.curStatus = object.curStatus ?? 0;
    message.treasure = object.treasure ?? "";
    message.enterNum = object.enterNum ?? 0;
    message.dropItem = object.dropItem ?? "";
    message.dropType = object.dropType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
