// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: goldenroad/CastDiceMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.goldenroad";

export interface CastDiceMsg {
  curPos: string;
  diceNumber: string;
  score: string;
  tempIds: string;
}

function createBaseCastDiceMsg(): CastDiceMsg {
  return { curPos: "", diceNumber: "", score: "", tempIds: "" };
}

export const CastDiceMsg: MessageFns<CastDiceMsg> = {
  encode(message: CastDiceMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.curPos !== "") {
      writer.uint32(10).string(message.curPos);
    }
    if (message.diceNumber !== "") {
      writer.uint32(18).string(message.diceNumber);
    }
    if (message.score !== "") {
      writer.uint32(26).string(message.score);
    }
    if (message.tempIds !== "") {
      writer.uint32(34).string(message.tempIds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CastDiceMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCastDiceMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.curPos = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diceNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.score = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tempIds = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CastDiceMsg {
    return {
      curPos: isSet(object.curPos) ? globalThis.String(object.curPos) : "",
      diceNumber: isSet(object.diceNumber) ? globalThis.String(object.diceNumber) : "",
      score: isSet(object.score) ? globalThis.String(object.score) : "",
      tempIds: isSet(object.tempIds) ? globalThis.String(object.tempIds) : "",
    };
  },

  toJSON(message: CastDiceMsg): unknown {
    const obj: any = {};
    if (message.curPos !== "") {
      obj.curPos = message.curPos;
    }
    if (message.diceNumber !== "") {
      obj.diceNumber = message.diceNumber;
    }
    if (message.score !== "") {
      obj.score = message.score;
    }
    if (message.tempIds !== "") {
      obj.tempIds = message.tempIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CastDiceMsg>, I>>(base?: I): CastDiceMsg {
    return CastDiceMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CastDiceMsg>, I>>(object: I): CastDiceMsg {
    const message = createBaseCastDiceMsg();
    message.curPos = object.curPos ?? "";
    message.diceNumber = object.diceNumber ?? "";
    message.score = object.score ?? "";
    message.tempIds = object.tempIds ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
