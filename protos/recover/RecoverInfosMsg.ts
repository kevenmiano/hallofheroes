// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: recover/RecoverInfosMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.recover";

export interface RecoverInfosMsg {
  openState: number;
  freeGp: number;
  freeGold: number;
  otherGp: number;
  otherGold: number;
}

function createBaseRecoverInfosMsg(): RecoverInfosMsg {
  return { openState: 0, freeGp: 0, freeGold: 0, otherGp: 0, otherGold: 0 };
}

export const RecoverInfosMsg: MessageFns<RecoverInfosMsg> = {
  encode(message: RecoverInfosMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.openState !== 0) {
      writer.uint32(8).int32(message.openState);
    }
    if (message.freeGp !== 0) {
      writer.uint32(16).int32(message.freeGp);
    }
    if (message.freeGold !== 0) {
      writer.uint32(24).int32(message.freeGold);
    }
    if (message.otherGp !== 0) {
      writer.uint32(32).int32(message.otherGp);
    }
    if (message.otherGold !== 0) {
      writer.uint32(40).int32(message.otherGold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecoverInfosMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecoverInfosMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.openState = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.freeGp = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.freeGold = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.otherGp = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.otherGold = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecoverInfosMsg {
    return {
      openState: isSet(object.openState) ? globalThis.Number(object.openState) : 0,
      freeGp: isSet(object.freeGp) ? globalThis.Number(object.freeGp) : 0,
      freeGold: isSet(object.freeGold) ? globalThis.Number(object.freeGold) : 0,
      otherGp: isSet(object.otherGp) ? globalThis.Number(object.otherGp) : 0,
      otherGold: isSet(object.otherGold) ? globalThis.Number(object.otherGold) : 0,
    };
  },

  toJSON(message: RecoverInfosMsg): unknown {
    const obj: any = {};
    if (message.openState !== 0) {
      obj.openState = Math.round(message.openState);
    }
    if (message.freeGp !== 0) {
      obj.freeGp = Math.round(message.freeGp);
    }
    if (message.freeGold !== 0) {
      obj.freeGold = Math.round(message.freeGold);
    }
    if (message.otherGp !== 0) {
      obj.otherGp = Math.round(message.otherGp);
    }
    if (message.otherGold !== 0) {
      obj.otherGold = Math.round(message.otherGold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecoverInfosMsg>, I>>(base?: I): RecoverInfosMsg {
    return RecoverInfosMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecoverInfosMsg>, I>>(object: I): RecoverInfosMsg {
    const message = createBaseRecoverInfosMsg();
    message.openState = object.openState ?? 0;
    message.freeGp = object.freeGp ?? 0;
    message.freeGold = object.freeGold ?? 0;
    message.otherGp = object.otherGp ?? 0;
    message.otherGold = object.otherGold ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
