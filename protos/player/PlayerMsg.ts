// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/PlayerMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface PlayerMsg {
  playerId: number;
  nickName: string;
  sex: number;
  pic: number;
  camp: number;
  point: number;
  giftToken: number;
  state: number;
  lastAward: string;
  questSiteLen: number;
  questSite: string;
  consortiaId: number;
  consortiaName: string;
  claimId: number;
  claimName: string;
  grades: number;
  gp: number;
  repute: number;
  consortiaOffer: number;
  strategy: string;
  weary: number;
  attackLeftCount: number;
  noviceProcess: number;
  consortiaAttack: number;
  consortiaDefence: number;
  consortiaAgility: number;
  consortiaAbility: number;
  consortiaCaptain: number;
  gpOrder: number;
  fightingCapacity: number;
  gradeProcess: string;
  timeProcess: number;
  timeGet: boolean;
  campaignSite: string;
  bagCount: number;
  matchWin: number;
  matchFailed: number;
  consortiaGold: number;
  consortiaPhysique: number;
  right: number;
  job: number;
  leedProcess: number;
  starCount: number;
  signDate: string;
  signTimes: number;
  signSite: number;
  order: string;
  startFree: number;
  totalGp: string;
  refuseFriend: boolean;
  refuseInvite: boolean;
  consortiaTotaloffer: number;
  showVersion: boolean;
  campaignCount: number;
  timeRun: number;
  qteGuide: number;
  starpoint: number;
  isAuto: boolean;
  lastOutConsortia: string;
  geste: number;
  storeGrade: number;
  storeGp: number;
  reloginProcess: number;
  reloginCount: number;
  blessingCount: number;
  blessingBuff: number;
  blessingMaxCount: number;
  firstCharge: boolean;
  charm: number;
  matchRoomCount: number;
  kingBuff: boolean;
  leaveGp: number;
  altarConsortiaId: number;
  serverName: string;
  rewardTimes: number;
  warFieldCount: number;
  trialCount: number;
  appellId: number;
  crossScore: number;
  trialMaxCount: number;
  wearyLimit: number;
  lordsScore: number;
  isReceived: boolean;
  mineScore: number;
  isBackPlayer: boolean;
  refuseTeamInvite: boolean;
  campaignMaxcount: number;
  hasVicePassword: number;
  isDuringToResetTime: number;
  signRewardState: string;
  weekActive: number;
  freeGradeSite: number;
  buyGradeSite: number;
  isTargetOpen: boolean;
  isSignOpen: boolean;
  sonNoviceProcess: number;
  refuseFamInvite: boolean;
  refuseLookInfo: boolean;
  refuseConsortiaInvite: boolean;
  receivePushMsg: boolean;
  mbSetingTK: boolean;
  mbSetingYW: boolean;
  mbSetingFB: boolean;
  mbSetingHD: boolean;
  mbSetingZD: boolean;
  mbSetingDW: boolean;
  pushFarm: boolean;
  pushWorldBoss: boolean;
  pushGuildTree: boolean;
  pushGuildWar: boolean;
  pushMultiCamp: boolean;
  pushBuildingOrder: boolean;
  pushTempleReward: boolean;
  isShowOpenAll: boolean;
  teamQChat: string;
  battleQChat: string;
  isPassOpen: boolean;
  bossScore: number;
  runeCount: number;
  runePowerPoint: number;
  translateLan: string;
  onlineTime: string;
  petEquipStrengNum: number;
  petBagCount: number;
  terraTempleCount: number;
  terraTempleMaxCount: number;
  magicCardBagCount: number;
  addGuildCount: number;
  lastFreeSkillLearnTime: string;
  mulSportScore: number;
  segmentId: number;
  runeNum: number;
  autoRecruit: boolean;
  isBindVertifyPrompted: boolean;
  newNoviceProcess: string;
  createTime: string;
  guildDuty: number;
  consortiaBuild: number;
  consortiaTotalBuild: number;
  hiSkillList: number[];
  nuid: string;
}

function createBasePlayerMsg(): PlayerMsg {
  return {
    playerId: 0,
    nickName: "",
    sex: 0,
    pic: 0,
    camp: 0,
    point: 0,
    giftToken: 0,
    state: 0,
    lastAward: "",
    questSiteLen: 0,
    questSite: "",
    consortiaId: 0,
    consortiaName: "",
    claimId: 0,
    claimName: "",
    grades: 0,
    gp: 0,
    repute: 0,
    consortiaOffer: 0,
    strategy: "",
    weary: 0,
    attackLeftCount: 0,
    noviceProcess: 0,
    consortiaAttack: 0,
    consortiaDefence: 0,
    consortiaAgility: 0,
    consortiaAbility: 0,
    consortiaCaptain: 0,
    gpOrder: 0,
    fightingCapacity: 0,
    gradeProcess: "",
    timeProcess: 0,
    timeGet: false,
    campaignSite: "",
    bagCount: 0,
    matchWin: 0,
    matchFailed: 0,
    consortiaGold: 0,
    consortiaPhysique: 0,
    right: 0,
    job: 0,
    leedProcess: 0,
    starCount: 0,
    signDate: "",
    signTimes: 0,
    signSite: 0,
    order: "",
    startFree: 0,
    totalGp: "",
    refuseFriend: false,
    refuseInvite: false,
    consortiaTotaloffer: 0,
    showVersion: false,
    campaignCount: 0,
    timeRun: 0,
    qteGuide: 0,
    starpoint: 0,
    isAuto: false,
    lastOutConsortia: "",
    geste: 0,
    storeGrade: 0,
    storeGp: 0,
    reloginProcess: 0,
    reloginCount: 0,
    blessingCount: 0,
    blessingBuff: 0,
    blessingMaxCount: 0,
    firstCharge: false,
    charm: 0,
    matchRoomCount: 0,
    kingBuff: false,
    leaveGp: 0,
    altarConsortiaId: 0,
    serverName: "",
    rewardTimes: 0,
    warFieldCount: 0,
    trialCount: 0,
    appellId: 0,
    crossScore: 0,
    trialMaxCount: 0,
    wearyLimit: 0,
    lordsScore: 0,
    isReceived: false,
    mineScore: 0,
    isBackPlayer: false,
    refuseTeamInvite: false,
    campaignMaxcount: 0,
    hasVicePassword: 0,
    isDuringToResetTime: 0,
    signRewardState: "",
    weekActive: 0,
    freeGradeSite: 0,
    buyGradeSite: 0,
    isTargetOpen: false,
    isSignOpen: false,
    sonNoviceProcess: 0,
    refuseFamInvite: false,
    refuseLookInfo: false,
    refuseConsortiaInvite: false,
    receivePushMsg: false,
    mbSetingTK: false,
    mbSetingYW: false,
    mbSetingFB: false,
    mbSetingHD: false,
    mbSetingZD: false,
    mbSetingDW: false,
    pushFarm: false,
    pushWorldBoss: false,
    pushGuildTree: false,
    pushGuildWar: false,
    pushMultiCamp: false,
    pushBuildingOrder: false,
    pushTempleReward: false,
    isShowOpenAll: false,
    teamQChat: "",
    battleQChat: "",
    isPassOpen: false,
    bossScore: 0,
    runeCount: 0,
    runePowerPoint: 0,
    translateLan: "",
    onlineTime: "",
    petEquipStrengNum: 0,
    petBagCount: 0,
    terraTempleCount: 0,
    terraTempleMaxCount: 0,
    magicCardBagCount: 0,
    addGuildCount: 0,
    lastFreeSkillLearnTime: "",
    mulSportScore: 0,
    segmentId: 0,
    runeNum: 0,
    autoRecruit: false,
    isBindVertifyPrompted: false,
    newNoviceProcess: "",
    createTime: "",
    guildDuty: 0,
    consortiaBuild: 0,
    consortiaTotalBuild: 0,
    hiSkillList: [],
    nuid: "",
  };
}

export const PlayerMsg: MessageFns<PlayerMsg> = {
  encode(message: PlayerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.sex !== 0) {
      writer.uint32(24).int32(message.sex);
    }
    if (message.pic !== 0) {
      writer.uint32(32).int32(message.pic);
    }
    if (message.camp !== 0) {
      writer.uint32(40).int32(message.camp);
    }
    if (message.point !== 0) {
      writer.uint32(48).int32(message.point);
    }
    if (message.giftToken !== 0) {
      writer.uint32(56).int32(message.giftToken);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.lastAward !== "") {
      writer.uint32(74).string(message.lastAward);
    }
    if (message.questSiteLen !== 0) {
      writer.uint32(80).int32(message.questSiteLen);
    }
    if (message.questSite !== "") {
      writer.uint32(90).string(message.questSite);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(96).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(106).string(message.consortiaName);
    }
    if (message.claimId !== 0) {
      writer.uint32(112).int32(message.claimId);
    }
    if (message.claimName !== "") {
      writer.uint32(122).string(message.claimName);
    }
    if (message.grades !== 0) {
      writer.uint32(128).int32(message.grades);
    }
    if (message.gp !== 0) {
      writer.uint32(136).int32(message.gp);
    }
    if (message.repute !== 0) {
      writer.uint32(144).int32(message.repute);
    }
    if (message.consortiaOffer !== 0) {
      writer.uint32(152).int32(message.consortiaOffer);
    }
    if (message.strategy !== "") {
      writer.uint32(162).string(message.strategy);
    }
    if (message.weary !== 0) {
      writer.uint32(168).int32(message.weary);
    }
    if (message.attackLeftCount !== 0) {
      writer.uint32(176).int32(message.attackLeftCount);
    }
    if (message.noviceProcess !== 0) {
      writer.uint32(184).int32(message.noviceProcess);
    }
    if (message.consortiaAttack !== 0) {
      writer.uint32(192).int32(message.consortiaAttack);
    }
    if (message.consortiaDefence !== 0) {
      writer.uint32(200).int32(message.consortiaDefence);
    }
    if (message.consortiaAgility !== 0) {
      writer.uint32(208).int32(message.consortiaAgility);
    }
    if (message.consortiaAbility !== 0) {
      writer.uint32(216).int32(message.consortiaAbility);
    }
    if (message.consortiaCaptain !== 0) {
      writer.uint32(224).int32(message.consortiaCaptain);
    }
    if (message.gpOrder !== 0) {
      writer.uint32(232).int32(message.gpOrder);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(240).int32(message.fightingCapacity);
    }
    if (message.gradeProcess !== "") {
      writer.uint32(250).string(message.gradeProcess);
    }
    if (message.timeProcess !== 0) {
      writer.uint32(256).int32(message.timeProcess);
    }
    if (message.timeGet !== false) {
      writer.uint32(264).bool(message.timeGet);
    }
    if (message.campaignSite !== "") {
      writer.uint32(274).string(message.campaignSite);
    }
    if (message.bagCount !== 0) {
      writer.uint32(280).int32(message.bagCount);
    }
    if (message.matchWin !== 0) {
      writer.uint32(288).int32(message.matchWin);
    }
    if (message.matchFailed !== 0) {
      writer.uint32(296).int32(message.matchFailed);
    }
    if (message.consortiaGold !== 0) {
      writer.uint32(304).int32(message.consortiaGold);
    }
    if (message.consortiaPhysique !== 0) {
      writer.uint32(312).int32(message.consortiaPhysique);
    }
    if (message.right !== 0) {
      writer.uint32(320).int32(message.right);
    }
    if (message.job !== 0) {
      writer.uint32(328).int32(message.job);
    }
    if (message.leedProcess !== 0) {
      writer.uint32(336).int32(message.leedProcess);
    }
    if (message.starCount !== 0) {
      writer.uint32(344).int32(message.starCount);
    }
    if (message.signDate !== "") {
      writer.uint32(354).string(message.signDate);
    }
    if (message.signTimes !== 0) {
      writer.uint32(360).int32(message.signTimes);
    }
    if (message.signSite !== 0) {
      writer.uint32(368).int32(message.signSite);
    }
    if (message.order !== "") {
      writer.uint32(378).string(message.order);
    }
    if (message.startFree !== 0) {
      writer.uint32(384).int32(message.startFree);
    }
    if (message.totalGp !== "") {
      writer.uint32(394).string(message.totalGp);
    }
    if (message.refuseFriend !== false) {
      writer.uint32(400).bool(message.refuseFriend);
    }
    if (message.refuseInvite !== false) {
      writer.uint32(408).bool(message.refuseInvite);
    }
    if (message.consortiaTotaloffer !== 0) {
      writer.uint32(416).int32(message.consortiaTotaloffer);
    }
    if (message.showVersion !== false) {
      writer.uint32(424).bool(message.showVersion);
    }
    if (message.campaignCount !== 0) {
      writer.uint32(432).int32(message.campaignCount);
    }
    if (message.timeRun !== 0) {
      writer.uint32(440).int32(message.timeRun);
    }
    if (message.qteGuide !== 0) {
      writer.uint32(448).int32(message.qteGuide);
    }
    if (message.starpoint !== 0) {
      writer.uint32(456).int32(message.starpoint);
    }
    if (message.isAuto !== false) {
      writer.uint32(464).bool(message.isAuto);
    }
    if (message.lastOutConsortia !== "") {
      writer.uint32(474).string(message.lastOutConsortia);
    }
    if (message.geste !== 0) {
      writer.uint32(480).int32(message.geste);
    }
    if (message.storeGrade !== 0) {
      writer.uint32(488).int32(message.storeGrade);
    }
    if (message.storeGp !== 0) {
      writer.uint32(496).int32(message.storeGp);
    }
    if (message.reloginProcess !== 0) {
      writer.uint32(504).int32(message.reloginProcess);
    }
    if (message.reloginCount !== 0) {
      writer.uint32(512).int32(message.reloginCount);
    }
    if (message.blessingCount !== 0) {
      writer.uint32(520).int32(message.blessingCount);
    }
    if (message.blessingBuff !== 0) {
      writer.uint32(528).int32(message.blessingBuff);
    }
    if (message.blessingMaxCount !== 0) {
      writer.uint32(536).int32(message.blessingMaxCount);
    }
    if (message.firstCharge !== false) {
      writer.uint32(544).bool(message.firstCharge);
    }
    if (message.charm !== 0) {
      writer.uint32(552).int32(message.charm);
    }
    if (message.matchRoomCount !== 0) {
      writer.uint32(560).int32(message.matchRoomCount);
    }
    if (message.kingBuff !== false) {
      writer.uint32(568).bool(message.kingBuff);
    }
    if (message.leaveGp !== 0) {
      writer.uint32(576).int32(message.leaveGp);
    }
    if (message.altarConsortiaId !== 0) {
      writer.uint32(584).int32(message.altarConsortiaId);
    }
    if (message.serverName !== "") {
      writer.uint32(594).string(message.serverName);
    }
    if (message.rewardTimes !== 0) {
      writer.uint32(600).int32(message.rewardTimes);
    }
    if (message.warFieldCount !== 0) {
      writer.uint32(608).int32(message.warFieldCount);
    }
    if (message.trialCount !== 0) {
      writer.uint32(616).int32(message.trialCount);
    }
    if (message.appellId !== 0) {
      writer.uint32(624).int32(message.appellId);
    }
    if (message.crossScore !== 0) {
      writer.uint32(632).int32(message.crossScore);
    }
    if (message.trialMaxCount !== 0) {
      writer.uint32(640).int32(message.trialMaxCount);
    }
    if (message.wearyLimit !== 0) {
      writer.uint32(648).int32(message.wearyLimit);
    }
    if (message.lordsScore !== 0) {
      writer.uint32(656).int32(message.lordsScore);
    }
    if (message.isReceived !== false) {
      writer.uint32(664).bool(message.isReceived);
    }
    if (message.mineScore !== 0) {
      writer.uint32(672).int32(message.mineScore);
    }
    if (message.isBackPlayer !== false) {
      writer.uint32(680).bool(message.isBackPlayer);
    }
    if (message.refuseTeamInvite !== false) {
      writer.uint32(688).bool(message.refuseTeamInvite);
    }
    if (message.campaignMaxcount !== 0) {
      writer.uint32(696).int32(message.campaignMaxcount);
    }
    if (message.hasVicePassword !== 0) {
      writer.uint32(704).int32(message.hasVicePassword);
    }
    if (message.isDuringToResetTime !== 0) {
      writer.uint32(712).int32(message.isDuringToResetTime);
    }
    if (message.signRewardState !== "") {
      writer.uint32(722).string(message.signRewardState);
    }
    if (message.weekActive !== 0) {
      writer.uint32(728).int32(message.weekActive);
    }
    if (message.freeGradeSite !== 0) {
      writer.uint32(736).int32(message.freeGradeSite);
    }
    if (message.buyGradeSite !== 0) {
      writer.uint32(744).int32(message.buyGradeSite);
    }
    if (message.isTargetOpen !== false) {
      writer.uint32(752).bool(message.isTargetOpen);
    }
    if (message.isSignOpen !== false) {
      writer.uint32(760).bool(message.isSignOpen);
    }
    if (message.sonNoviceProcess !== 0) {
      writer.uint32(768).int32(message.sonNoviceProcess);
    }
    if (message.refuseFamInvite !== false) {
      writer.uint32(776).bool(message.refuseFamInvite);
    }
    if (message.refuseLookInfo !== false) {
      writer.uint32(784).bool(message.refuseLookInfo);
    }
    if (message.refuseConsortiaInvite !== false) {
      writer.uint32(792).bool(message.refuseConsortiaInvite);
    }
    if (message.receivePushMsg !== false) {
      writer.uint32(800).bool(message.receivePushMsg);
    }
    if (message.mbSetingTK !== false) {
      writer.uint32(808).bool(message.mbSetingTK);
    }
    if (message.mbSetingYW !== false) {
      writer.uint32(816).bool(message.mbSetingYW);
    }
    if (message.mbSetingFB !== false) {
      writer.uint32(824).bool(message.mbSetingFB);
    }
    if (message.mbSetingHD !== false) {
      writer.uint32(832).bool(message.mbSetingHD);
    }
    if (message.mbSetingZD !== false) {
      writer.uint32(840).bool(message.mbSetingZD);
    }
    if (message.mbSetingDW !== false) {
      writer.uint32(848).bool(message.mbSetingDW);
    }
    if (message.pushFarm !== false) {
      writer.uint32(856).bool(message.pushFarm);
    }
    if (message.pushWorldBoss !== false) {
      writer.uint32(864).bool(message.pushWorldBoss);
    }
    if (message.pushGuildTree !== false) {
      writer.uint32(872).bool(message.pushGuildTree);
    }
    if (message.pushGuildWar !== false) {
      writer.uint32(880).bool(message.pushGuildWar);
    }
    if (message.pushMultiCamp !== false) {
      writer.uint32(888).bool(message.pushMultiCamp);
    }
    if (message.pushBuildingOrder !== false) {
      writer.uint32(896).bool(message.pushBuildingOrder);
    }
    if (message.pushTempleReward !== false) {
      writer.uint32(904).bool(message.pushTempleReward);
    }
    if (message.isShowOpenAll !== false) {
      writer.uint32(912).bool(message.isShowOpenAll);
    }
    if (message.teamQChat !== "") {
      writer.uint32(922).string(message.teamQChat);
    }
    if (message.battleQChat !== "") {
      writer.uint32(930).string(message.battleQChat);
    }
    if (message.isPassOpen !== false) {
      writer.uint32(936).bool(message.isPassOpen);
    }
    if (message.bossScore !== 0) {
      writer.uint32(944).int32(message.bossScore);
    }
    if (message.runeCount !== 0) {
      writer.uint32(952).int32(message.runeCount);
    }
    if (message.runePowerPoint !== 0) {
      writer.uint32(960).int32(message.runePowerPoint);
    }
    if (message.translateLan !== "") {
      writer.uint32(970).string(message.translateLan);
    }
    if (message.onlineTime !== "") {
      writer.uint32(978).string(message.onlineTime);
    }
    if (message.petEquipStrengNum !== 0) {
      writer.uint32(984).int32(message.petEquipStrengNum);
    }
    if (message.petBagCount !== 0) {
      writer.uint32(992).int32(message.petBagCount);
    }
    if (message.terraTempleCount !== 0) {
      writer.uint32(1000).int32(message.terraTempleCount);
    }
    if (message.terraTempleMaxCount !== 0) {
      writer.uint32(1008).int32(message.terraTempleMaxCount);
    }
    if (message.magicCardBagCount !== 0) {
      writer.uint32(1016).int32(message.magicCardBagCount);
    }
    if (message.addGuildCount !== 0) {
      writer.uint32(1024).int32(message.addGuildCount);
    }
    if (message.lastFreeSkillLearnTime !== "") {
      writer.uint32(1034).string(message.lastFreeSkillLearnTime);
    }
    if (message.mulSportScore !== 0) {
      writer.uint32(1040).int32(message.mulSportScore);
    }
    if (message.segmentId !== 0) {
      writer.uint32(1048).int32(message.segmentId);
    }
    if (message.runeNum !== 0) {
      writer.uint32(1056).int32(message.runeNum);
    }
    if (message.autoRecruit !== false) {
      writer.uint32(1064).bool(message.autoRecruit);
    }
    if (message.isBindVertifyPrompted !== false) {
      writer.uint32(1072).bool(message.isBindVertifyPrompted);
    }
    if (message.newNoviceProcess !== "") {
      writer.uint32(1082).string(message.newNoviceProcess);
    }
    if (message.createTime !== "") {
      writer.uint32(1090).string(message.createTime);
    }
    if (message.guildDuty !== 0) {
      writer.uint32(1096).int32(message.guildDuty);
    }
    if (message.consortiaBuild !== 0) {
      writer.uint32(1104).int32(message.consortiaBuild);
    }
    if (message.consortiaTotalBuild !== 0) {
      writer.uint32(1112).int32(message.consortiaTotalBuild);
    }
    writer.uint32(1122).fork();
    for (const v of message.hiSkillList) {
      writer.int32(v);
    }
    writer.join();
    if (message.nuid !== "") {
      writer.uint32(1130).string(message.nuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pic = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.camp = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.giftToken = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastAward = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.questSiteLen = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.questSite = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.claimId = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.claimName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.gp = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.repute = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.consortiaOffer = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.strategy = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.weary = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.attackLeftCount = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.noviceProcess = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.consortiaAttack = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.consortiaDefence = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.consortiaAgility = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.consortiaAbility = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.consortiaCaptain = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.gpOrder = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.gradeProcess = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.timeProcess = reader.int32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.timeGet = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.campaignSite = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.bagCount = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.matchWin = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.matchFailed = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.consortiaGold = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.consortiaPhysique = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.right = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.leedProcess = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.starCount = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.signDate = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.signTimes = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.signSite = reader.int32();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.order = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.startFree = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.totalGp = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.refuseFriend = reader.bool();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.refuseInvite = reader.bool();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.consortiaTotaloffer = reader.int32();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.showVersion = reader.bool();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.campaignCount = reader.int32();
          continue;
        }
        case 55: {
          if (tag !== 440) {
            break;
          }

          message.timeRun = reader.int32();
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.qteGuide = reader.int32();
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.starpoint = reader.int32();
          continue;
        }
        case 58: {
          if (tag !== 464) {
            break;
          }

          message.isAuto = reader.bool();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.lastOutConsortia = reader.string();
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.storeGrade = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 496) {
            break;
          }

          message.storeGp = reader.int32();
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.reloginProcess = reader.int32();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.reloginCount = reader.int32();
          continue;
        }
        case 65: {
          if (tag !== 520) {
            break;
          }

          message.blessingCount = reader.int32();
          continue;
        }
        case 66: {
          if (tag !== 528) {
            break;
          }

          message.blessingBuff = reader.int32();
          continue;
        }
        case 67: {
          if (tag !== 536) {
            break;
          }

          message.blessingMaxCount = reader.int32();
          continue;
        }
        case 68: {
          if (tag !== 544) {
            break;
          }

          message.firstCharge = reader.bool();
          continue;
        }
        case 69: {
          if (tag !== 552) {
            break;
          }

          message.charm = reader.int32();
          continue;
        }
        case 70: {
          if (tag !== 560) {
            break;
          }

          message.matchRoomCount = reader.int32();
          continue;
        }
        case 71: {
          if (tag !== 568) {
            break;
          }

          message.kingBuff = reader.bool();
          continue;
        }
        case 72: {
          if (tag !== 576) {
            break;
          }

          message.leaveGp = reader.int32();
          continue;
        }
        case 73: {
          if (tag !== 584) {
            break;
          }

          message.altarConsortiaId = reader.int32();
          continue;
        }
        case 74: {
          if (tag !== 594) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 75: {
          if (tag !== 600) {
            break;
          }

          message.rewardTimes = reader.int32();
          continue;
        }
        case 76: {
          if (tag !== 608) {
            break;
          }

          message.warFieldCount = reader.int32();
          continue;
        }
        case 77: {
          if (tag !== 616) {
            break;
          }

          message.trialCount = reader.int32();
          continue;
        }
        case 78: {
          if (tag !== 624) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
        case 79: {
          if (tag !== 632) {
            break;
          }

          message.crossScore = reader.int32();
          continue;
        }
        case 80: {
          if (tag !== 640) {
            break;
          }

          message.trialMaxCount = reader.int32();
          continue;
        }
        case 81: {
          if (tag !== 648) {
            break;
          }

          message.wearyLimit = reader.int32();
          continue;
        }
        case 82: {
          if (tag !== 656) {
            break;
          }

          message.lordsScore = reader.int32();
          continue;
        }
        case 83: {
          if (tag !== 664) {
            break;
          }

          message.isReceived = reader.bool();
          continue;
        }
        case 84: {
          if (tag !== 672) {
            break;
          }

          message.mineScore = reader.int32();
          continue;
        }
        case 85: {
          if (tag !== 680) {
            break;
          }

          message.isBackPlayer = reader.bool();
          continue;
        }
        case 86: {
          if (tag !== 688) {
            break;
          }

          message.refuseTeamInvite = reader.bool();
          continue;
        }
        case 87: {
          if (tag !== 696) {
            break;
          }

          message.campaignMaxcount = reader.int32();
          continue;
        }
        case 88: {
          if (tag !== 704) {
            break;
          }

          message.hasVicePassword = reader.int32();
          continue;
        }
        case 89: {
          if (tag !== 712) {
            break;
          }

          message.isDuringToResetTime = reader.int32();
          continue;
        }
        case 90: {
          if (tag !== 722) {
            break;
          }

          message.signRewardState = reader.string();
          continue;
        }
        case 91: {
          if (tag !== 728) {
            break;
          }

          message.weekActive = reader.int32();
          continue;
        }
        case 92: {
          if (tag !== 736) {
            break;
          }

          message.freeGradeSite = reader.int32();
          continue;
        }
        case 93: {
          if (tag !== 744) {
            break;
          }

          message.buyGradeSite = reader.int32();
          continue;
        }
        case 94: {
          if (tag !== 752) {
            break;
          }

          message.isTargetOpen = reader.bool();
          continue;
        }
        case 95: {
          if (tag !== 760) {
            break;
          }

          message.isSignOpen = reader.bool();
          continue;
        }
        case 96: {
          if (tag !== 768) {
            break;
          }

          message.sonNoviceProcess = reader.int32();
          continue;
        }
        case 97: {
          if (tag !== 776) {
            break;
          }

          message.refuseFamInvite = reader.bool();
          continue;
        }
        case 98: {
          if (tag !== 784) {
            break;
          }

          message.refuseLookInfo = reader.bool();
          continue;
        }
        case 99: {
          if (tag !== 792) {
            break;
          }

          message.refuseConsortiaInvite = reader.bool();
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.receivePushMsg = reader.bool();
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.mbSetingTK = reader.bool();
          continue;
        }
        case 102: {
          if (tag !== 816) {
            break;
          }

          message.mbSetingYW = reader.bool();
          continue;
        }
        case 103: {
          if (tag !== 824) {
            break;
          }

          message.mbSetingFB = reader.bool();
          continue;
        }
        case 104: {
          if (tag !== 832) {
            break;
          }

          message.mbSetingHD = reader.bool();
          continue;
        }
        case 105: {
          if (tag !== 840) {
            break;
          }

          message.mbSetingZD = reader.bool();
          continue;
        }
        case 106: {
          if (tag !== 848) {
            break;
          }

          message.mbSetingDW = reader.bool();
          continue;
        }
        case 107: {
          if (tag !== 856) {
            break;
          }

          message.pushFarm = reader.bool();
          continue;
        }
        case 108: {
          if (tag !== 864) {
            break;
          }

          message.pushWorldBoss = reader.bool();
          continue;
        }
        case 109: {
          if (tag !== 872) {
            break;
          }

          message.pushGuildTree = reader.bool();
          continue;
        }
        case 110: {
          if (tag !== 880) {
            break;
          }

          message.pushGuildWar = reader.bool();
          continue;
        }
        case 111: {
          if (tag !== 888) {
            break;
          }

          message.pushMultiCamp = reader.bool();
          continue;
        }
        case 112: {
          if (tag !== 896) {
            break;
          }

          message.pushBuildingOrder = reader.bool();
          continue;
        }
        case 113: {
          if (tag !== 904) {
            break;
          }

          message.pushTempleReward = reader.bool();
          continue;
        }
        case 114: {
          if (tag !== 912) {
            break;
          }

          message.isShowOpenAll = reader.bool();
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.teamQChat = reader.string();
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.battleQChat = reader.string();
          continue;
        }
        case 117: {
          if (tag !== 936) {
            break;
          }

          message.isPassOpen = reader.bool();
          continue;
        }
        case 118: {
          if (tag !== 944) {
            break;
          }

          message.bossScore = reader.int32();
          continue;
        }
        case 119: {
          if (tag !== 952) {
            break;
          }

          message.runeCount = reader.int32();
          continue;
        }
        case 120: {
          if (tag !== 960) {
            break;
          }

          message.runePowerPoint = reader.int32();
          continue;
        }
        case 121: {
          if (tag !== 970) {
            break;
          }

          message.translateLan = reader.string();
          continue;
        }
        case 122: {
          if (tag !== 978) {
            break;
          }

          message.onlineTime = reader.string();
          continue;
        }
        case 123: {
          if (tag !== 984) {
            break;
          }

          message.petEquipStrengNum = reader.int32();
          continue;
        }
        case 124: {
          if (tag !== 992) {
            break;
          }

          message.petBagCount = reader.int32();
          continue;
        }
        case 125: {
          if (tag !== 1000) {
            break;
          }

          message.terraTempleCount = reader.int32();
          continue;
        }
        case 126: {
          if (tag !== 1008) {
            break;
          }

          message.terraTempleMaxCount = reader.int32();
          continue;
        }
        case 127: {
          if (tag !== 1016) {
            break;
          }

          message.magicCardBagCount = reader.int32();
          continue;
        }
        case 128: {
          if (tag !== 1024) {
            break;
          }

          message.addGuildCount = reader.int32();
          continue;
        }
        case 129: {
          if (tag !== 1034) {
            break;
          }

          message.lastFreeSkillLearnTime = reader.string();
          continue;
        }
        case 130: {
          if (tag !== 1040) {
            break;
          }

          message.mulSportScore = reader.int32();
          continue;
        }
        case 131: {
          if (tag !== 1048) {
            break;
          }

          message.segmentId = reader.int32();
          continue;
        }
        case 132: {
          if (tag !== 1056) {
            break;
          }

          message.runeNum = reader.int32();
          continue;
        }
        case 133: {
          if (tag !== 1064) {
            break;
          }

          message.autoRecruit = reader.bool();
          continue;
        }
        case 134: {
          if (tag !== 1072) {
            break;
          }

          message.isBindVertifyPrompted = reader.bool();
          continue;
        }
        case 135: {
          if (tag !== 1082) {
            break;
          }

          message.newNoviceProcess = reader.string();
          continue;
        }
        case 136: {
          if (tag !== 1090) {
            break;
          }

          message.createTime = reader.string();
          continue;
        }
        case 137: {
          if (tag !== 1096) {
            break;
          }

          message.guildDuty = reader.int32();
          continue;
        }
        case 138: {
          if (tag !== 1104) {
            break;
          }

          message.consortiaBuild = reader.int32();
          continue;
        }
        case 139: {
          if (tag !== 1112) {
            break;
          }

          message.consortiaTotalBuild = reader.int32();
          continue;
        }
        case 140: {
          if (tag === 1120) {
            message.hiSkillList.push(reader.int32());

            continue;
          }

          if (tag === 1122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.hiSkillList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 141: {
          if (tag !== 1130) {
            break;
          }

          message.nuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerMsg {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      sex: isSet(object.sex) ? globalThis.Number(object.sex) : 0,
      pic: isSet(object.pic) ? globalThis.Number(object.pic) : 0,
      camp: isSet(object.camp) ? globalThis.Number(object.camp) : 0,
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      giftToken: isSet(object.giftToken) ? globalThis.Number(object.giftToken) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      lastAward: isSet(object.lastAward) ? globalThis.String(object.lastAward) : "",
      questSiteLen: isSet(object.questSiteLen) ? globalThis.Number(object.questSiteLen) : 0,
      questSite: isSet(object.questSite) ? globalThis.String(object.questSite) : "",
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      claimId: isSet(object.claimId) ? globalThis.Number(object.claimId) : 0,
      claimName: isSet(object.claimName) ? globalThis.String(object.claimName) : "",
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      gp: isSet(object.gp) ? globalThis.Number(object.gp) : 0,
      repute: isSet(object.repute) ? globalThis.Number(object.repute) : 0,
      consortiaOffer: isSet(object.consortiaOffer) ? globalThis.Number(object.consortiaOffer) : 0,
      strategy: isSet(object.strategy) ? globalThis.String(object.strategy) : "",
      weary: isSet(object.weary) ? globalThis.Number(object.weary) : 0,
      attackLeftCount: isSet(object.attackLeftCount) ? globalThis.Number(object.attackLeftCount) : 0,
      noviceProcess: isSet(object.noviceProcess) ? globalThis.Number(object.noviceProcess) : 0,
      consortiaAttack: isSet(object.consortiaAttack) ? globalThis.Number(object.consortiaAttack) : 0,
      consortiaDefence: isSet(object.consortiaDefence) ? globalThis.Number(object.consortiaDefence) : 0,
      consortiaAgility: isSet(object.consortiaAgility) ? globalThis.Number(object.consortiaAgility) : 0,
      consortiaAbility: isSet(object.consortiaAbility) ? globalThis.Number(object.consortiaAbility) : 0,
      consortiaCaptain: isSet(object.consortiaCaptain) ? globalThis.Number(object.consortiaCaptain) : 0,
      gpOrder: isSet(object.gpOrder) ? globalThis.Number(object.gpOrder) : 0,
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      gradeProcess: isSet(object.gradeProcess) ? globalThis.String(object.gradeProcess) : "",
      timeProcess: isSet(object.timeProcess) ? globalThis.Number(object.timeProcess) : 0,
      timeGet: isSet(object.timeGet) ? globalThis.Boolean(object.timeGet) : false,
      campaignSite: isSet(object.campaignSite) ? globalThis.String(object.campaignSite) : "",
      bagCount: isSet(object.bagCount) ? globalThis.Number(object.bagCount) : 0,
      matchWin: isSet(object.matchWin) ? globalThis.Number(object.matchWin) : 0,
      matchFailed: isSet(object.matchFailed) ? globalThis.Number(object.matchFailed) : 0,
      consortiaGold: isSet(object.consortiaGold) ? globalThis.Number(object.consortiaGold) : 0,
      consortiaPhysique: isSet(object.consortiaPhysique) ? globalThis.Number(object.consortiaPhysique) : 0,
      right: isSet(object.right) ? globalThis.Number(object.right) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      leedProcess: isSet(object.leedProcess) ? globalThis.Number(object.leedProcess) : 0,
      starCount: isSet(object.starCount) ? globalThis.Number(object.starCount) : 0,
      signDate: isSet(object.signDate) ? globalThis.String(object.signDate) : "",
      signTimes: isSet(object.signTimes) ? globalThis.Number(object.signTimes) : 0,
      signSite: isSet(object.signSite) ? globalThis.Number(object.signSite) : 0,
      order: isSet(object.order) ? globalThis.String(object.order) : "",
      startFree: isSet(object.startFree) ? globalThis.Number(object.startFree) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.String(object.totalGp) : "",
      refuseFriend: isSet(object.refuseFriend) ? globalThis.Boolean(object.refuseFriend) : false,
      refuseInvite: isSet(object.refuseInvite) ? globalThis.Boolean(object.refuseInvite) : false,
      consortiaTotaloffer: isSet(object.consortiaTotaloffer) ? globalThis.Number(object.consortiaTotaloffer) : 0,
      showVersion: isSet(object.showVersion) ? globalThis.Boolean(object.showVersion) : false,
      campaignCount: isSet(object.campaignCount) ? globalThis.Number(object.campaignCount) : 0,
      timeRun: isSet(object.timeRun) ? globalThis.Number(object.timeRun) : 0,
      qteGuide: isSet(object.qteGuide) ? globalThis.Number(object.qteGuide) : 0,
      starpoint: isSet(object.starpoint) ? globalThis.Number(object.starpoint) : 0,
      isAuto: isSet(object.isAuto) ? globalThis.Boolean(object.isAuto) : false,
      lastOutConsortia: isSet(object.lastOutConsortia) ? globalThis.String(object.lastOutConsortia) : "",
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      storeGrade: isSet(object.storeGrade) ? globalThis.Number(object.storeGrade) : 0,
      storeGp: isSet(object.storeGp) ? globalThis.Number(object.storeGp) : 0,
      reloginProcess: isSet(object.reloginProcess) ? globalThis.Number(object.reloginProcess) : 0,
      reloginCount: isSet(object.reloginCount) ? globalThis.Number(object.reloginCount) : 0,
      blessingCount: isSet(object.blessingCount) ? globalThis.Number(object.blessingCount) : 0,
      blessingBuff: isSet(object.blessingBuff) ? globalThis.Number(object.blessingBuff) : 0,
      blessingMaxCount: isSet(object.blessingMaxCount) ? globalThis.Number(object.blessingMaxCount) : 0,
      firstCharge: isSet(object.firstCharge) ? globalThis.Boolean(object.firstCharge) : false,
      charm: isSet(object.charm) ? globalThis.Number(object.charm) : 0,
      matchRoomCount: isSet(object.matchRoomCount) ? globalThis.Number(object.matchRoomCount) : 0,
      kingBuff: isSet(object.kingBuff) ? globalThis.Boolean(object.kingBuff) : false,
      leaveGp: isSet(object.leaveGp) ? globalThis.Number(object.leaveGp) : 0,
      altarConsortiaId: isSet(object.altarConsortiaId) ? globalThis.Number(object.altarConsortiaId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      rewardTimes: isSet(object.rewardTimes) ? globalThis.Number(object.rewardTimes) : 0,
      warFieldCount: isSet(object.warFieldCount) ? globalThis.Number(object.warFieldCount) : 0,
      trialCount: isSet(object.trialCount) ? globalThis.Number(object.trialCount) : 0,
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
      crossScore: isSet(object.crossScore) ? globalThis.Number(object.crossScore) : 0,
      trialMaxCount: isSet(object.trialMaxCount) ? globalThis.Number(object.trialMaxCount) : 0,
      wearyLimit: isSet(object.wearyLimit) ? globalThis.Number(object.wearyLimit) : 0,
      lordsScore: isSet(object.lordsScore) ? globalThis.Number(object.lordsScore) : 0,
      isReceived: isSet(object.isReceived) ? globalThis.Boolean(object.isReceived) : false,
      mineScore: isSet(object.mineScore) ? globalThis.Number(object.mineScore) : 0,
      isBackPlayer: isSet(object.isBackPlayer) ? globalThis.Boolean(object.isBackPlayer) : false,
      refuseTeamInvite: isSet(object.refuseTeamInvite) ? globalThis.Boolean(object.refuseTeamInvite) : false,
      campaignMaxcount: isSet(object.campaignMaxcount) ? globalThis.Number(object.campaignMaxcount) : 0,
      hasVicePassword: isSet(object.hasVicePassword) ? globalThis.Number(object.hasVicePassword) : 0,
      isDuringToResetTime: isSet(object.isDuringToResetTime) ? globalThis.Number(object.isDuringToResetTime) : 0,
      signRewardState: isSet(object.signRewardState) ? globalThis.String(object.signRewardState) : "",
      weekActive: isSet(object.weekActive) ? globalThis.Number(object.weekActive) : 0,
      freeGradeSite: isSet(object.freeGradeSite) ? globalThis.Number(object.freeGradeSite) : 0,
      buyGradeSite: isSet(object.buyGradeSite) ? globalThis.Number(object.buyGradeSite) : 0,
      isTargetOpen: isSet(object.isTargetOpen) ? globalThis.Boolean(object.isTargetOpen) : false,
      isSignOpen: isSet(object.isSignOpen) ? globalThis.Boolean(object.isSignOpen) : false,
      sonNoviceProcess: isSet(object.sonNoviceProcess) ? globalThis.Number(object.sonNoviceProcess) : 0,
      refuseFamInvite: isSet(object.refuseFamInvite) ? globalThis.Boolean(object.refuseFamInvite) : false,
      refuseLookInfo: isSet(object.refuseLookInfo) ? globalThis.Boolean(object.refuseLookInfo) : false,
      refuseConsortiaInvite: isSet(object.refuseConsortiaInvite)
        ? globalThis.Boolean(object.refuseConsortiaInvite)
        : false,
      receivePushMsg: isSet(object.receivePushMsg) ? globalThis.Boolean(object.receivePushMsg) : false,
      mbSetingTK: isSet(object.mbSetingTK) ? globalThis.Boolean(object.mbSetingTK) : false,
      mbSetingYW: isSet(object.mbSetingYW) ? globalThis.Boolean(object.mbSetingYW) : false,
      mbSetingFB: isSet(object.mbSetingFB) ? globalThis.Boolean(object.mbSetingFB) : false,
      mbSetingHD: isSet(object.mbSetingHD) ? globalThis.Boolean(object.mbSetingHD) : false,
      mbSetingZD: isSet(object.mbSetingZD) ? globalThis.Boolean(object.mbSetingZD) : false,
      mbSetingDW: isSet(object.mbSetingDW) ? globalThis.Boolean(object.mbSetingDW) : false,
      pushFarm: isSet(object.pushFarm) ? globalThis.Boolean(object.pushFarm) : false,
      pushWorldBoss: isSet(object.pushWorldBoss) ? globalThis.Boolean(object.pushWorldBoss) : false,
      pushGuildTree: isSet(object.pushGuildTree) ? globalThis.Boolean(object.pushGuildTree) : false,
      pushGuildWar: isSet(object.pushGuildWar) ? globalThis.Boolean(object.pushGuildWar) : false,
      pushMultiCamp: isSet(object.pushMultiCamp) ? globalThis.Boolean(object.pushMultiCamp) : false,
      pushBuildingOrder: isSet(object.pushBuildingOrder) ? globalThis.Boolean(object.pushBuildingOrder) : false,
      pushTempleReward: isSet(object.pushTempleReward) ? globalThis.Boolean(object.pushTempleReward) : false,
      isShowOpenAll: isSet(object.isShowOpenAll) ? globalThis.Boolean(object.isShowOpenAll) : false,
      teamQChat: isSet(object.teamQChat) ? globalThis.String(object.teamQChat) : "",
      battleQChat: isSet(object.battleQChat) ? globalThis.String(object.battleQChat) : "",
      isPassOpen: isSet(object.isPassOpen) ? globalThis.Boolean(object.isPassOpen) : false,
      bossScore: isSet(object.bossScore) ? globalThis.Number(object.bossScore) : 0,
      runeCount: isSet(object.runeCount) ? globalThis.Number(object.runeCount) : 0,
      runePowerPoint: isSet(object.runePowerPoint) ? globalThis.Number(object.runePowerPoint) : 0,
      translateLan: isSet(object.translateLan) ? globalThis.String(object.translateLan) : "",
      onlineTime: isSet(object.onlineTime) ? globalThis.String(object.onlineTime) : "",
      petEquipStrengNum: isSet(object.petEquipStrengNum) ? globalThis.Number(object.petEquipStrengNum) : 0,
      petBagCount: isSet(object.petBagCount) ? globalThis.Number(object.petBagCount) : 0,
      terraTempleCount: isSet(object.terraTempleCount) ? globalThis.Number(object.terraTempleCount) : 0,
      terraTempleMaxCount: isSet(object.terraTempleMaxCount) ? globalThis.Number(object.terraTempleMaxCount) : 0,
      magicCardBagCount: isSet(object.magicCardBagCount) ? globalThis.Number(object.magicCardBagCount) : 0,
      addGuildCount: isSet(object.addGuildCount) ? globalThis.Number(object.addGuildCount) : 0,
      lastFreeSkillLearnTime: isSet(object.lastFreeSkillLearnTime)
        ? globalThis.String(object.lastFreeSkillLearnTime)
        : "",
      mulSportScore: isSet(object.mulSportScore) ? globalThis.Number(object.mulSportScore) : 0,
      segmentId: isSet(object.segmentId) ? globalThis.Number(object.segmentId) : 0,
      runeNum: isSet(object.runeNum) ? globalThis.Number(object.runeNum) : 0,
      autoRecruit: isSet(object.autoRecruit) ? globalThis.Boolean(object.autoRecruit) : false,
      isBindVertifyPrompted: isSet(object.isBindVertifyPrompted)
        ? globalThis.Boolean(object.isBindVertifyPrompted)
        : false,
      newNoviceProcess: isSet(object.newNoviceProcess) ? globalThis.String(object.newNoviceProcess) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "",
      guildDuty: isSet(object.guildDuty) ? globalThis.Number(object.guildDuty) : 0,
      consortiaBuild: isSet(object.consortiaBuild) ? globalThis.Number(object.consortiaBuild) : 0,
      consortiaTotalBuild: isSet(object.consortiaTotalBuild) ? globalThis.Number(object.consortiaTotalBuild) : 0,
      hiSkillList: globalThis.Array.isArray(object?.hiSkillList)
        ? object.hiSkillList.map((e: any) => globalThis.Number(e))
        : [],
      nuid: isSet(object.nuid) ? globalThis.String(object.nuid) : "",
    };
  },

  toJSON(message: PlayerMsg): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.sex !== 0) {
      obj.sex = Math.round(message.sex);
    }
    if (message.pic !== 0) {
      obj.pic = Math.round(message.pic);
    }
    if (message.camp !== 0) {
      obj.camp = Math.round(message.camp);
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.giftToken !== 0) {
      obj.giftToken = Math.round(message.giftToken);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.lastAward !== "") {
      obj.lastAward = message.lastAward;
    }
    if (message.questSiteLen !== 0) {
      obj.questSiteLen = Math.round(message.questSiteLen);
    }
    if (message.questSite !== "") {
      obj.questSite = message.questSite;
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.claimId !== 0) {
      obj.claimId = Math.round(message.claimId);
    }
    if (message.claimName !== "") {
      obj.claimName = message.claimName;
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.gp !== 0) {
      obj.gp = Math.round(message.gp);
    }
    if (message.repute !== 0) {
      obj.repute = Math.round(message.repute);
    }
    if (message.consortiaOffer !== 0) {
      obj.consortiaOffer = Math.round(message.consortiaOffer);
    }
    if (message.strategy !== "") {
      obj.strategy = message.strategy;
    }
    if (message.weary !== 0) {
      obj.weary = Math.round(message.weary);
    }
    if (message.attackLeftCount !== 0) {
      obj.attackLeftCount = Math.round(message.attackLeftCount);
    }
    if (message.noviceProcess !== 0) {
      obj.noviceProcess = Math.round(message.noviceProcess);
    }
    if (message.consortiaAttack !== 0) {
      obj.consortiaAttack = Math.round(message.consortiaAttack);
    }
    if (message.consortiaDefence !== 0) {
      obj.consortiaDefence = Math.round(message.consortiaDefence);
    }
    if (message.consortiaAgility !== 0) {
      obj.consortiaAgility = Math.round(message.consortiaAgility);
    }
    if (message.consortiaAbility !== 0) {
      obj.consortiaAbility = Math.round(message.consortiaAbility);
    }
    if (message.consortiaCaptain !== 0) {
      obj.consortiaCaptain = Math.round(message.consortiaCaptain);
    }
    if (message.gpOrder !== 0) {
      obj.gpOrder = Math.round(message.gpOrder);
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.gradeProcess !== "") {
      obj.gradeProcess = message.gradeProcess;
    }
    if (message.timeProcess !== 0) {
      obj.timeProcess = Math.round(message.timeProcess);
    }
    if (message.timeGet !== false) {
      obj.timeGet = message.timeGet;
    }
    if (message.campaignSite !== "") {
      obj.campaignSite = message.campaignSite;
    }
    if (message.bagCount !== 0) {
      obj.bagCount = Math.round(message.bagCount);
    }
    if (message.matchWin !== 0) {
      obj.matchWin = Math.round(message.matchWin);
    }
    if (message.matchFailed !== 0) {
      obj.matchFailed = Math.round(message.matchFailed);
    }
    if (message.consortiaGold !== 0) {
      obj.consortiaGold = Math.round(message.consortiaGold);
    }
    if (message.consortiaPhysique !== 0) {
      obj.consortiaPhysique = Math.round(message.consortiaPhysique);
    }
    if (message.right !== 0) {
      obj.right = Math.round(message.right);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.leedProcess !== 0) {
      obj.leedProcess = Math.round(message.leedProcess);
    }
    if (message.starCount !== 0) {
      obj.starCount = Math.round(message.starCount);
    }
    if (message.signDate !== "") {
      obj.signDate = message.signDate;
    }
    if (message.signTimes !== 0) {
      obj.signTimes = Math.round(message.signTimes);
    }
    if (message.signSite !== 0) {
      obj.signSite = Math.round(message.signSite);
    }
    if (message.order !== "") {
      obj.order = message.order;
    }
    if (message.startFree !== 0) {
      obj.startFree = Math.round(message.startFree);
    }
    if (message.totalGp !== "") {
      obj.totalGp = message.totalGp;
    }
    if (message.refuseFriend !== false) {
      obj.refuseFriend = message.refuseFriend;
    }
    if (message.refuseInvite !== false) {
      obj.refuseInvite = message.refuseInvite;
    }
    if (message.consortiaTotaloffer !== 0) {
      obj.consortiaTotaloffer = Math.round(message.consortiaTotaloffer);
    }
    if (message.showVersion !== false) {
      obj.showVersion = message.showVersion;
    }
    if (message.campaignCount !== 0) {
      obj.campaignCount = Math.round(message.campaignCount);
    }
    if (message.timeRun !== 0) {
      obj.timeRun = Math.round(message.timeRun);
    }
    if (message.qteGuide !== 0) {
      obj.qteGuide = Math.round(message.qteGuide);
    }
    if (message.starpoint !== 0) {
      obj.starpoint = Math.round(message.starpoint);
    }
    if (message.isAuto !== false) {
      obj.isAuto = message.isAuto;
    }
    if (message.lastOutConsortia !== "") {
      obj.lastOutConsortia = message.lastOutConsortia;
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.storeGrade !== 0) {
      obj.storeGrade = Math.round(message.storeGrade);
    }
    if (message.storeGp !== 0) {
      obj.storeGp = Math.round(message.storeGp);
    }
    if (message.reloginProcess !== 0) {
      obj.reloginProcess = Math.round(message.reloginProcess);
    }
    if (message.reloginCount !== 0) {
      obj.reloginCount = Math.round(message.reloginCount);
    }
    if (message.blessingCount !== 0) {
      obj.blessingCount = Math.round(message.blessingCount);
    }
    if (message.blessingBuff !== 0) {
      obj.blessingBuff = Math.round(message.blessingBuff);
    }
    if (message.blessingMaxCount !== 0) {
      obj.blessingMaxCount = Math.round(message.blessingMaxCount);
    }
    if (message.firstCharge !== false) {
      obj.firstCharge = message.firstCharge;
    }
    if (message.charm !== 0) {
      obj.charm = Math.round(message.charm);
    }
    if (message.matchRoomCount !== 0) {
      obj.matchRoomCount = Math.round(message.matchRoomCount);
    }
    if (message.kingBuff !== false) {
      obj.kingBuff = message.kingBuff;
    }
    if (message.leaveGp !== 0) {
      obj.leaveGp = Math.round(message.leaveGp);
    }
    if (message.altarConsortiaId !== 0) {
      obj.altarConsortiaId = Math.round(message.altarConsortiaId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.rewardTimes !== 0) {
      obj.rewardTimes = Math.round(message.rewardTimes);
    }
    if (message.warFieldCount !== 0) {
      obj.warFieldCount = Math.round(message.warFieldCount);
    }
    if (message.trialCount !== 0) {
      obj.trialCount = Math.round(message.trialCount);
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    if (message.crossScore !== 0) {
      obj.crossScore = Math.round(message.crossScore);
    }
    if (message.trialMaxCount !== 0) {
      obj.trialMaxCount = Math.round(message.trialMaxCount);
    }
    if (message.wearyLimit !== 0) {
      obj.wearyLimit = Math.round(message.wearyLimit);
    }
    if (message.lordsScore !== 0) {
      obj.lordsScore = Math.round(message.lordsScore);
    }
    if (message.isReceived !== false) {
      obj.isReceived = message.isReceived;
    }
    if (message.mineScore !== 0) {
      obj.mineScore = Math.round(message.mineScore);
    }
    if (message.isBackPlayer !== false) {
      obj.isBackPlayer = message.isBackPlayer;
    }
    if (message.refuseTeamInvite !== false) {
      obj.refuseTeamInvite = message.refuseTeamInvite;
    }
    if (message.campaignMaxcount !== 0) {
      obj.campaignMaxcount = Math.round(message.campaignMaxcount);
    }
    if (message.hasVicePassword !== 0) {
      obj.hasVicePassword = Math.round(message.hasVicePassword);
    }
    if (message.isDuringToResetTime !== 0) {
      obj.isDuringToResetTime = Math.round(message.isDuringToResetTime);
    }
    if (message.signRewardState !== "") {
      obj.signRewardState = message.signRewardState;
    }
    if (message.weekActive !== 0) {
      obj.weekActive = Math.round(message.weekActive);
    }
    if (message.freeGradeSite !== 0) {
      obj.freeGradeSite = Math.round(message.freeGradeSite);
    }
    if (message.buyGradeSite !== 0) {
      obj.buyGradeSite = Math.round(message.buyGradeSite);
    }
    if (message.isTargetOpen !== false) {
      obj.isTargetOpen = message.isTargetOpen;
    }
    if (message.isSignOpen !== false) {
      obj.isSignOpen = message.isSignOpen;
    }
    if (message.sonNoviceProcess !== 0) {
      obj.sonNoviceProcess = Math.round(message.sonNoviceProcess);
    }
    if (message.refuseFamInvite !== false) {
      obj.refuseFamInvite = message.refuseFamInvite;
    }
    if (message.refuseLookInfo !== false) {
      obj.refuseLookInfo = message.refuseLookInfo;
    }
    if (message.refuseConsortiaInvite !== false) {
      obj.refuseConsortiaInvite = message.refuseConsortiaInvite;
    }
    if (message.receivePushMsg !== false) {
      obj.receivePushMsg = message.receivePushMsg;
    }
    if (message.mbSetingTK !== false) {
      obj.mbSetingTK = message.mbSetingTK;
    }
    if (message.mbSetingYW !== false) {
      obj.mbSetingYW = message.mbSetingYW;
    }
    if (message.mbSetingFB !== false) {
      obj.mbSetingFB = message.mbSetingFB;
    }
    if (message.mbSetingHD !== false) {
      obj.mbSetingHD = message.mbSetingHD;
    }
    if (message.mbSetingZD !== false) {
      obj.mbSetingZD = message.mbSetingZD;
    }
    if (message.mbSetingDW !== false) {
      obj.mbSetingDW = message.mbSetingDW;
    }
    if (message.pushFarm !== false) {
      obj.pushFarm = message.pushFarm;
    }
    if (message.pushWorldBoss !== false) {
      obj.pushWorldBoss = message.pushWorldBoss;
    }
    if (message.pushGuildTree !== false) {
      obj.pushGuildTree = message.pushGuildTree;
    }
    if (message.pushGuildWar !== false) {
      obj.pushGuildWar = message.pushGuildWar;
    }
    if (message.pushMultiCamp !== false) {
      obj.pushMultiCamp = message.pushMultiCamp;
    }
    if (message.pushBuildingOrder !== false) {
      obj.pushBuildingOrder = message.pushBuildingOrder;
    }
    if (message.pushTempleReward !== false) {
      obj.pushTempleReward = message.pushTempleReward;
    }
    if (message.isShowOpenAll !== false) {
      obj.isShowOpenAll = message.isShowOpenAll;
    }
    if (message.teamQChat !== "") {
      obj.teamQChat = message.teamQChat;
    }
    if (message.battleQChat !== "") {
      obj.battleQChat = message.battleQChat;
    }
    if (message.isPassOpen !== false) {
      obj.isPassOpen = message.isPassOpen;
    }
    if (message.bossScore !== 0) {
      obj.bossScore = Math.round(message.bossScore);
    }
    if (message.runeCount !== 0) {
      obj.runeCount = Math.round(message.runeCount);
    }
    if (message.runePowerPoint !== 0) {
      obj.runePowerPoint = Math.round(message.runePowerPoint);
    }
    if (message.translateLan !== "") {
      obj.translateLan = message.translateLan;
    }
    if (message.onlineTime !== "") {
      obj.onlineTime = message.onlineTime;
    }
    if (message.petEquipStrengNum !== 0) {
      obj.petEquipStrengNum = Math.round(message.petEquipStrengNum);
    }
    if (message.petBagCount !== 0) {
      obj.petBagCount = Math.round(message.petBagCount);
    }
    if (message.terraTempleCount !== 0) {
      obj.terraTempleCount = Math.round(message.terraTempleCount);
    }
    if (message.terraTempleMaxCount !== 0) {
      obj.terraTempleMaxCount = Math.round(message.terraTempleMaxCount);
    }
    if (message.magicCardBagCount !== 0) {
      obj.magicCardBagCount = Math.round(message.magicCardBagCount);
    }
    if (message.addGuildCount !== 0) {
      obj.addGuildCount = Math.round(message.addGuildCount);
    }
    if (message.lastFreeSkillLearnTime !== "") {
      obj.lastFreeSkillLearnTime = message.lastFreeSkillLearnTime;
    }
    if (message.mulSportScore !== 0) {
      obj.mulSportScore = Math.round(message.mulSportScore);
    }
    if (message.segmentId !== 0) {
      obj.segmentId = Math.round(message.segmentId);
    }
    if (message.runeNum !== 0) {
      obj.runeNum = Math.round(message.runeNum);
    }
    if (message.autoRecruit !== false) {
      obj.autoRecruit = message.autoRecruit;
    }
    if (message.isBindVertifyPrompted !== false) {
      obj.isBindVertifyPrompted = message.isBindVertifyPrompted;
    }
    if (message.newNoviceProcess !== "") {
      obj.newNoviceProcess = message.newNoviceProcess;
    }
    if (message.createTime !== "") {
      obj.createTime = message.createTime;
    }
    if (message.guildDuty !== 0) {
      obj.guildDuty = Math.round(message.guildDuty);
    }
    if (message.consortiaBuild !== 0) {
      obj.consortiaBuild = Math.round(message.consortiaBuild);
    }
    if (message.consortiaTotalBuild !== 0) {
      obj.consortiaTotalBuild = Math.round(message.consortiaTotalBuild);
    }
    if (message.hiSkillList?.length) {
      obj.hiSkillList = message.hiSkillList.map((e) => Math.round(e));
    }
    if (message.nuid !== "") {
      obj.nuid = message.nuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerMsg>, I>>(base?: I): PlayerMsg {
    return PlayerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerMsg>, I>>(object: I): PlayerMsg {
    const message = createBasePlayerMsg();
    message.playerId = object.playerId ?? 0;
    message.nickName = object.nickName ?? "";
    message.sex = object.sex ?? 0;
    message.pic = object.pic ?? 0;
    message.camp = object.camp ?? 0;
    message.point = object.point ?? 0;
    message.giftToken = object.giftToken ?? 0;
    message.state = object.state ?? 0;
    message.lastAward = object.lastAward ?? "";
    message.questSiteLen = object.questSiteLen ?? 0;
    message.questSite = object.questSite ?? "";
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.claimId = object.claimId ?? 0;
    message.claimName = object.claimName ?? "";
    message.grades = object.grades ?? 0;
    message.gp = object.gp ?? 0;
    message.repute = object.repute ?? 0;
    message.consortiaOffer = object.consortiaOffer ?? 0;
    message.strategy = object.strategy ?? "";
    message.weary = object.weary ?? 0;
    message.attackLeftCount = object.attackLeftCount ?? 0;
    message.noviceProcess = object.noviceProcess ?? 0;
    message.consortiaAttack = object.consortiaAttack ?? 0;
    message.consortiaDefence = object.consortiaDefence ?? 0;
    message.consortiaAgility = object.consortiaAgility ?? 0;
    message.consortiaAbility = object.consortiaAbility ?? 0;
    message.consortiaCaptain = object.consortiaCaptain ?? 0;
    message.gpOrder = object.gpOrder ?? 0;
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.gradeProcess = object.gradeProcess ?? "";
    message.timeProcess = object.timeProcess ?? 0;
    message.timeGet = object.timeGet ?? false;
    message.campaignSite = object.campaignSite ?? "";
    message.bagCount = object.bagCount ?? 0;
    message.matchWin = object.matchWin ?? 0;
    message.matchFailed = object.matchFailed ?? 0;
    message.consortiaGold = object.consortiaGold ?? 0;
    message.consortiaPhysique = object.consortiaPhysique ?? 0;
    message.right = object.right ?? 0;
    message.job = object.job ?? 0;
    message.leedProcess = object.leedProcess ?? 0;
    message.starCount = object.starCount ?? 0;
    message.signDate = object.signDate ?? "";
    message.signTimes = object.signTimes ?? 0;
    message.signSite = object.signSite ?? 0;
    message.order = object.order ?? "";
    message.startFree = object.startFree ?? 0;
    message.totalGp = object.totalGp ?? "";
    message.refuseFriend = object.refuseFriend ?? false;
    message.refuseInvite = object.refuseInvite ?? false;
    message.consortiaTotaloffer = object.consortiaTotaloffer ?? 0;
    message.showVersion = object.showVersion ?? false;
    message.campaignCount = object.campaignCount ?? 0;
    message.timeRun = object.timeRun ?? 0;
    message.qteGuide = object.qteGuide ?? 0;
    message.starpoint = object.starpoint ?? 0;
    message.isAuto = object.isAuto ?? false;
    message.lastOutConsortia = object.lastOutConsortia ?? "";
    message.geste = object.geste ?? 0;
    message.storeGrade = object.storeGrade ?? 0;
    message.storeGp = object.storeGp ?? 0;
    message.reloginProcess = object.reloginProcess ?? 0;
    message.reloginCount = object.reloginCount ?? 0;
    message.blessingCount = object.blessingCount ?? 0;
    message.blessingBuff = object.blessingBuff ?? 0;
    message.blessingMaxCount = object.blessingMaxCount ?? 0;
    message.firstCharge = object.firstCharge ?? false;
    message.charm = object.charm ?? 0;
    message.matchRoomCount = object.matchRoomCount ?? 0;
    message.kingBuff = object.kingBuff ?? false;
    message.leaveGp = object.leaveGp ?? 0;
    message.altarConsortiaId = object.altarConsortiaId ?? 0;
    message.serverName = object.serverName ?? "";
    message.rewardTimes = object.rewardTimes ?? 0;
    message.warFieldCount = object.warFieldCount ?? 0;
    message.trialCount = object.trialCount ?? 0;
    message.appellId = object.appellId ?? 0;
    message.crossScore = object.crossScore ?? 0;
    message.trialMaxCount = object.trialMaxCount ?? 0;
    message.wearyLimit = object.wearyLimit ?? 0;
    message.lordsScore = object.lordsScore ?? 0;
    message.isReceived = object.isReceived ?? false;
    message.mineScore = object.mineScore ?? 0;
    message.isBackPlayer = object.isBackPlayer ?? false;
    message.refuseTeamInvite = object.refuseTeamInvite ?? false;
    message.campaignMaxcount = object.campaignMaxcount ?? 0;
    message.hasVicePassword = object.hasVicePassword ?? 0;
    message.isDuringToResetTime = object.isDuringToResetTime ?? 0;
    message.signRewardState = object.signRewardState ?? "";
    message.weekActive = object.weekActive ?? 0;
    message.freeGradeSite = object.freeGradeSite ?? 0;
    message.buyGradeSite = object.buyGradeSite ?? 0;
    message.isTargetOpen = object.isTargetOpen ?? false;
    message.isSignOpen = object.isSignOpen ?? false;
    message.sonNoviceProcess = object.sonNoviceProcess ?? 0;
    message.refuseFamInvite = object.refuseFamInvite ?? false;
    message.refuseLookInfo = object.refuseLookInfo ?? false;
    message.refuseConsortiaInvite = object.refuseConsortiaInvite ?? false;
    message.receivePushMsg = object.receivePushMsg ?? false;
    message.mbSetingTK = object.mbSetingTK ?? false;
    message.mbSetingYW = object.mbSetingYW ?? false;
    message.mbSetingFB = object.mbSetingFB ?? false;
    message.mbSetingHD = object.mbSetingHD ?? false;
    message.mbSetingZD = object.mbSetingZD ?? false;
    message.mbSetingDW = object.mbSetingDW ?? false;
    message.pushFarm = object.pushFarm ?? false;
    message.pushWorldBoss = object.pushWorldBoss ?? false;
    message.pushGuildTree = object.pushGuildTree ?? false;
    message.pushGuildWar = object.pushGuildWar ?? false;
    message.pushMultiCamp = object.pushMultiCamp ?? false;
    message.pushBuildingOrder = object.pushBuildingOrder ?? false;
    message.pushTempleReward = object.pushTempleReward ?? false;
    message.isShowOpenAll = object.isShowOpenAll ?? false;
    message.teamQChat = object.teamQChat ?? "";
    message.battleQChat = object.battleQChat ?? "";
    message.isPassOpen = object.isPassOpen ?? false;
    message.bossScore = object.bossScore ?? 0;
    message.runeCount = object.runeCount ?? 0;
    message.runePowerPoint = object.runePowerPoint ?? 0;
    message.translateLan = object.translateLan ?? "";
    message.onlineTime = object.onlineTime ?? "";
    message.petEquipStrengNum = object.petEquipStrengNum ?? 0;
    message.petBagCount = object.petBagCount ?? 0;
    message.terraTempleCount = object.terraTempleCount ?? 0;
    message.terraTempleMaxCount = object.terraTempleMaxCount ?? 0;
    message.magicCardBagCount = object.magicCardBagCount ?? 0;
    message.addGuildCount = object.addGuildCount ?? 0;
    message.lastFreeSkillLearnTime = object.lastFreeSkillLearnTime ?? "";
    message.mulSportScore = object.mulSportScore ?? 0;
    message.segmentId = object.segmentId ?? 0;
    message.runeNum = object.runeNum ?? 0;
    message.autoRecruit = object.autoRecruit ?? false;
    message.isBindVertifyPrompted = object.isBindVertifyPrompted ?? false;
    message.newNoviceProcess = object.newNoviceProcess ?? "";
    message.createTime = object.createTime ?? "";
    message.guildDuty = object.guildDuty ?? 0;
    message.consortiaBuild = object.consortiaBuild ?? 0;
    message.consortiaTotalBuild = object.consortiaTotalBuild ?? 0;
    message.hiSkillList = object.hiSkillList?.map((e) => e) || [];
    message.nuid = object.nuid ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
