// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/LotteryRecordPB.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface LotteryRecordPB {
  time: string;
  activeName: string;
  itemId: number;
  itemCount: number;
  serverId: string;
  nickName: string;
}

function createBaseLotteryRecordPB(): LotteryRecordPB {
  return { time: "", activeName: "", itemId: 0, itemCount: 0, serverId: "", nickName: "" };
}

export const LotteryRecordPB: MessageFns<LotteryRecordPB> = {
  encode(message: LotteryRecordPB, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== "") {
      writer.uint32(10).string(message.time);
    }
    if (message.activeName !== "") {
      writer.uint32(18).string(message.activeName);
    }
    if (message.itemId !== 0) {
      writer.uint32(24).int32(message.itemId);
    }
    if (message.itemCount !== 0) {
      writer.uint32(32).int32(message.itemCount);
    }
    if (message.serverId !== "") {
      writer.uint32(42).string(message.serverId);
    }
    if (message.nickName !== "") {
      writer.uint32(50).string(message.nickName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LotteryRecordPB {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLotteryRecordPB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.activeName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.itemId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.itemCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LotteryRecordPB {
    return {
      time: isSet(object.time) ? globalThis.String(object.time) : "",
      activeName: isSet(object.activeName) ? globalThis.String(object.activeName) : "",
      itemId: isSet(object.itemId) ? globalThis.Number(object.itemId) : 0,
      itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : 0,
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
    };
  },

  toJSON(message: LotteryRecordPB): unknown {
    const obj: any = {};
    if (message.time !== "") {
      obj.time = message.time;
    }
    if (message.activeName !== "") {
      obj.activeName = message.activeName;
    }
    if (message.itemId !== 0) {
      obj.itemId = Math.round(message.itemId);
    }
    if (message.itemCount !== 0) {
      obj.itemCount = Math.round(message.itemCount);
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LotteryRecordPB>, I>>(base?: I): LotteryRecordPB {
    return LotteryRecordPB.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LotteryRecordPB>, I>>(object: I): LotteryRecordPB {
    const message = createBaseLotteryRecordPB();
    message.time = object.time ?? "";
    message.activeName = object.activeName ?? "";
    message.itemId = object.itemId ?? 0;
    message.itemCount = object.itemCount ?? 0;
    message.serverId = object.serverId ?? "";
    message.nickName = object.nickName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
