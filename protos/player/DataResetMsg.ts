// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/DataResetMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface DataResetMsg {
  weary: number;
  hangupCount: number;
  transEnergy: number;
  attackCount: number;
  challengeCount: number;
  leftHangupWeary: number;
  tower1EnterCount: number;
  tower2EnterCount: number;
  blessingCount: number;
  blessingBuff: number;
  buyCount: number;
  kingBuff: boolean;
  serverName: string;
  UpRuneByPointTimes: number;
}

function createBaseDataResetMsg(): DataResetMsg {
  return {
    weary: 0,
    hangupCount: 0,
    transEnergy: 0,
    attackCount: 0,
    challengeCount: 0,
    leftHangupWeary: 0,
    tower1EnterCount: 0,
    tower2EnterCount: 0,
    blessingCount: 0,
    blessingBuff: 0,
    buyCount: 0,
    kingBuff: false,
    serverName: "",
    UpRuneByPointTimes: 0,
  };
}

export const DataResetMsg: MessageFns<DataResetMsg> = {
  encode(message: DataResetMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weary !== 0) {
      writer.uint32(8).int32(message.weary);
    }
    if (message.hangupCount !== 0) {
      writer.uint32(16).int32(message.hangupCount);
    }
    if (message.transEnergy !== 0) {
      writer.uint32(24).int32(message.transEnergy);
    }
    if (message.attackCount !== 0) {
      writer.uint32(32).int32(message.attackCount);
    }
    if (message.challengeCount !== 0) {
      writer.uint32(40).int32(message.challengeCount);
    }
    if (message.leftHangupWeary !== 0) {
      writer.uint32(48).int32(message.leftHangupWeary);
    }
    if (message.tower1EnterCount !== 0) {
      writer.uint32(56).int32(message.tower1EnterCount);
    }
    if (message.tower2EnterCount !== 0) {
      writer.uint32(64).int32(message.tower2EnterCount);
    }
    if (message.blessingCount !== 0) {
      writer.uint32(72).int32(message.blessingCount);
    }
    if (message.blessingBuff !== 0) {
      writer.uint32(80).int32(message.blessingBuff);
    }
    if (message.buyCount !== 0) {
      writer.uint32(88).int32(message.buyCount);
    }
    if (message.kingBuff !== false) {
      writer.uint32(96).bool(message.kingBuff);
    }
    if (message.serverName !== "") {
      writer.uint32(106).string(message.serverName);
    }
    if (message.UpRuneByPointTimes !== 0) {
      writer.uint32(112).int32(message.UpRuneByPointTimes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataResetMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataResetMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.weary = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hangupCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.transEnergy = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.attackCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.challengeCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftHangupWeary = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.tower1EnterCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.tower2EnterCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.blessingCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.blessingBuff = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.buyCount = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.kingBuff = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.UpRuneByPointTimes = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataResetMsg {
    return {
      weary: isSet(object.weary) ? globalThis.Number(object.weary) : 0,
      hangupCount: isSet(object.hangupCount) ? globalThis.Number(object.hangupCount) : 0,
      transEnergy: isSet(object.transEnergy) ? globalThis.Number(object.transEnergy) : 0,
      attackCount: isSet(object.attackCount) ? globalThis.Number(object.attackCount) : 0,
      challengeCount: isSet(object.challengeCount) ? globalThis.Number(object.challengeCount) : 0,
      leftHangupWeary: isSet(object.leftHangupWeary) ? globalThis.Number(object.leftHangupWeary) : 0,
      tower1EnterCount: isSet(object.tower1EnterCount) ? globalThis.Number(object.tower1EnterCount) : 0,
      tower2EnterCount: isSet(object.tower2EnterCount) ? globalThis.Number(object.tower2EnterCount) : 0,
      blessingCount: isSet(object.blessingCount) ? globalThis.Number(object.blessingCount) : 0,
      blessingBuff: isSet(object.blessingBuff) ? globalThis.Number(object.blessingBuff) : 0,
      buyCount: isSet(object.buyCount) ? globalThis.Number(object.buyCount) : 0,
      kingBuff: isSet(object.kingBuff) ? globalThis.Boolean(object.kingBuff) : false,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      UpRuneByPointTimes: isSet(object.UpRuneByPointTimes) ? globalThis.Number(object.UpRuneByPointTimes) : 0,
    };
  },

  toJSON(message: DataResetMsg): unknown {
    const obj: any = {};
    if (message.weary !== 0) {
      obj.weary = Math.round(message.weary);
    }
    if (message.hangupCount !== 0) {
      obj.hangupCount = Math.round(message.hangupCount);
    }
    if (message.transEnergy !== 0) {
      obj.transEnergy = Math.round(message.transEnergy);
    }
    if (message.attackCount !== 0) {
      obj.attackCount = Math.round(message.attackCount);
    }
    if (message.challengeCount !== 0) {
      obj.challengeCount = Math.round(message.challengeCount);
    }
    if (message.leftHangupWeary !== 0) {
      obj.leftHangupWeary = Math.round(message.leftHangupWeary);
    }
    if (message.tower1EnterCount !== 0) {
      obj.tower1EnterCount = Math.round(message.tower1EnterCount);
    }
    if (message.tower2EnterCount !== 0) {
      obj.tower2EnterCount = Math.round(message.tower2EnterCount);
    }
    if (message.blessingCount !== 0) {
      obj.blessingCount = Math.round(message.blessingCount);
    }
    if (message.blessingBuff !== 0) {
      obj.blessingBuff = Math.round(message.blessingBuff);
    }
    if (message.buyCount !== 0) {
      obj.buyCount = Math.round(message.buyCount);
    }
    if (message.kingBuff !== false) {
      obj.kingBuff = message.kingBuff;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.UpRuneByPointTimes !== 0) {
      obj.UpRuneByPointTimes = Math.round(message.UpRuneByPointTimes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataResetMsg>, I>>(base?: I): DataResetMsg {
    return DataResetMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataResetMsg>, I>>(object: I): DataResetMsg {
    const message = createBaseDataResetMsg();
    message.weary = object.weary ?? 0;
    message.hangupCount = object.hangupCount ?? 0;
    message.transEnergy = object.transEnergy ?? 0;
    message.attackCount = object.attackCount ?? 0;
    message.challengeCount = object.challengeCount ?? 0;
    message.leftHangupWeary = object.leftHangupWeary ?? 0;
    message.tower1EnterCount = object.tower1EnterCount ?? 0;
    message.tower2EnterCount = object.tower2EnterCount ?? 0;
    message.blessingCount = object.blessingCount ?? 0;
    message.blessingBuff = object.blessingBuff ?? 0;
    message.buyCount = object.buyCount ?? 0;
    message.kingBuff = object.kingBuff ?? false;
    message.serverName = object.serverName ?? "";
    message.UpRuneByPointTimes = object.UpRuneByPointTimes ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
