// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/HeroAddPointReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface HeroAddPointReqMsg {
  powerPoint: number;
  agilityPoint: number;
  intellectPoint: number;
  captainPoint: number;
  physiquePoint: number;
  skillTempId: number;
  type: number;
  subType: number;
}

function createBaseHeroAddPointReqMsg(): HeroAddPointReqMsg {
  return {
    powerPoint: 0,
    agilityPoint: 0,
    intellectPoint: 0,
    captainPoint: 0,
    physiquePoint: 0,
    skillTempId: 0,
    type: 0,
    subType: 0,
  };
}

export const HeroAddPointReqMsg: MessageFns<HeroAddPointReqMsg> = {
  encode(message: HeroAddPointReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.powerPoint !== 0) {
      writer.uint32(8).int32(message.powerPoint);
    }
    if (message.agilityPoint !== 0) {
      writer.uint32(16).int32(message.agilityPoint);
    }
    if (message.intellectPoint !== 0) {
      writer.uint32(24).int32(message.intellectPoint);
    }
    if (message.captainPoint !== 0) {
      writer.uint32(32).int32(message.captainPoint);
    }
    if (message.physiquePoint !== 0) {
      writer.uint32(40).int32(message.physiquePoint);
    }
    if (message.skillTempId !== 0) {
      writer.uint32(48).int32(message.skillTempId);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.subType !== 0) {
      writer.uint32(64).int32(message.subType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroAddPointReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroAddPointReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.powerPoint = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.agilityPoint = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intellectPoint = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.captainPoint = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.physiquePoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.skillTempId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.subType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroAddPointReqMsg {
    return {
      powerPoint: isSet(object.powerPoint) ? globalThis.Number(object.powerPoint) : 0,
      agilityPoint: isSet(object.agilityPoint) ? globalThis.Number(object.agilityPoint) : 0,
      intellectPoint: isSet(object.intellectPoint) ? globalThis.Number(object.intellectPoint) : 0,
      captainPoint: isSet(object.captainPoint) ? globalThis.Number(object.captainPoint) : 0,
      physiquePoint: isSet(object.physiquePoint) ? globalThis.Number(object.physiquePoint) : 0,
      skillTempId: isSet(object.skillTempId) ? globalThis.Number(object.skillTempId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      subType: isSet(object.subType) ? globalThis.Number(object.subType) : 0,
    };
  },

  toJSON(message: HeroAddPointReqMsg): unknown {
    const obj: any = {};
    if (message.powerPoint !== 0) {
      obj.powerPoint = Math.round(message.powerPoint);
    }
    if (message.agilityPoint !== 0) {
      obj.agilityPoint = Math.round(message.agilityPoint);
    }
    if (message.intellectPoint !== 0) {
      obj.intellectPoint = Math.round(message.intellectPoint);
    }
    if (message.captainPoint !== 0) {
      obj.captainPoint = Math.round(message.captainPoint);
    }
    if (message.physiquePoint !== 0) {
      obj.physiquePoint = Math.round(message.physiquePoint);
    }
    if (message.skillTempId !== 0) {
      obj.skillTempId = Math.round(message.skillTempId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.subType !== 0) {
      obj.subType = Math.round(message.subType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroAddPointReqMsg>, I>>(base?: I): HeroAddPointReqMsg {
    return HeroAddPointReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroAddPointReqMsg>, I>>(object: I): HeroAddPointReqMsg {
    const message = createBaseHeroAddPointReqMsg();
    message.powerPoint = object.powerPoint ?? 0;
    message.agilityPoint = object.agilityPoint ?? 0;
    message.intellectPoint = object.intellectPoint ?? 0;
    message.captainPoint = object.captainPoint ?? 0;
    message.physiquePoint = object.physiquePoint ?? 0;
    message.skillTempId = object.skillTempId ?? 0;
    message.type = object.type ?? 0;
    message.subType = object.subType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
