// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vip/VipRouletteMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vip";

export interface VipRouletteMsg {
  leftCount: number;
  needVipItem: number;
  openIndex: number[];
  leftItem: number[];
  takeItem: number[];
  isStart: boolean;
  opType: number;
}

function createBaseVipRouletteMsg(): VipRouletteMsg {
  return { leftCount: 0, needVipItem: 0, openIndex: [], leftItem: [], takeItem: [], isStart: false, opType: 0 };
}

export const VipRouletteMsg: MessageFns<VipRouletteMsg> = {
  encode(message: VipRouletteMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftCount !== 0) {
      writer.uint32(8).int32(message.leftCount);
    }
    if (message.needVipItem !== 0) {
      writer.uint32(16).int32(message.needVipItem);
    }
    writer.uint32(26).fork();
    for (const v of message.openIndex) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.leftItem) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.takeItem) {
      writer.int32(v);
    }
    writer.join();
    if (message.isStart !== false) {
      writer.uint32(48).bool(message.isStart);
    }
    if (message.opType !== 0) {
      writer.uint32(56).int32(message.opType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VipRouletteMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipRouletteMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.leftCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.needVipItem = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.openIndex.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.openIndex.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.leftItem.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.leftItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.takeItem.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.takeItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isStart = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipRouletteMsg {
    return {
      leftCount: isSet(object.leftCount) ? globalThis.Number(object.leftCount) : 0,
      needVipItem: isSet(object.needVipItem) ? globalThis.Number(object.needVipItem) : 0,
      openIndex: globalThis.Array.isArray(object?.openIndex)
        ? object.openIndex.map((e: any) => globalThis.Number(e))
        : [],
      leftItem: globalThis.Array.isArray(object?.leftItem) ? object.leftItem.map((e: any) => globalThis.Number(e)) : [],
      takeItem: globalThis.Array.isArray(object?.takeItem) ? object.takeItem.map((e: any) => globalThis.Number(e)) : [],
      isStart: isSet(object.isStart) ? globalThis.Boolean(object.isStart) : false,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
    };
  },

  toJSON(message: VipRouletteMsg): unknown {
    const obj: any = {};
    if (message.leftCount !== 0) {
      obj.leftCount = Math.round(message.leftCount);
    }
    if (message.needVipItem !== 0) {
      obj.needVipItem = Math.round(message.needVipItem);
    }
    if (message.openIndex?.length) {
      obj.openIndex = message.openIndex.map((e) => Math.round(e));
    }
    if (message.leftItem?.length) {
      obj.leftItem = message.leftItem.map((e) => Math.round(e));
    }
    if (message.takeItem?.length) {
      obj.takeItem = message.takeItem.map((e) => Math.round(e));
    }
    if (message.isStart !== false) {
      obj.isStart = message.isStart;
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipRouletteMsg>, I>>(base?: I): VipRouletteMsg {
    return VipRouletteMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipRouletteMsg>, I>>(object: I): VipRouletteMsg {
    const message = createBaseVipRouletteMsg();
    message.leftCount = object.leftCount ?? 0;
    message.needVipItem = object.needVipItem ?? 0;
    message.openIndex = object.openIndex?.map((e) => e) || [];
    message.leftItem = object.leftItem?.map((e) => e) || [];
    message.takeItem = object.takeItem?.map((e) => e) || [];
    message.isStart = object.isStart ?? false;
    message.opType = object.opType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
