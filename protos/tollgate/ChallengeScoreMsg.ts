// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: tollgate/ChallengeScoreMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.tollgate";

export interface ChallengeScoreMsg {
  userId: number;
  tollgateId: number;
  score: number;
  order: number;
  isLucky: boolean;
  nickName: string;
  isVip: boolean;
  grade: number;
  consortiaName: string;
  fightCapacity: number;
}

function createBaseChallengeScoreMsg(): ChallengeScoreMsg {
  return {
    userId: 0,
    tollgateId: 0,
    score: 0,
    order: 0,
    isLucky: false,
    nickName: "",
    isVip: false,
    grade: 0,
    consortiaName: "",
    fightCapacity: 0,
  };
}

export const ChallengeScoreMsg: MessageFns<ChallengeScoreMsg> = {
  encode(message: ChallengeScoreMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.tollgateId !== 0) {
      writer.uint32(16).int32(message.tollgateId);
    }
    if (message.score !== 0) {
      writer.uint32(24).int32(message.score);
    }
    if (message.order !== 0) {
      writer.uint32(32).int32(message.order);
    }
    if (message.isLucky !== false) {
      writer.uint32(40).bool(message.isLucky);
    }
    if (message.nickName !== "") {
      writer.uint32(50).string(message.nickName);
    }
    if (message.isVip !== false) {
      writer.uint32(56).bool(message.isVip);
    }
    if (message.grade !== 0) {
      writer.uint32(64).int32(message.grade);
    }
    if (message.consortiaName !== "") {
      writer.uint32(74).string(message.consortiaName);
    }
    if (message.fightCapacity !== 0) {
      writer.uint32(80).int32(message.fightCapacity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChallengeScoreMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChallengeScoreMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tollgateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isLucky = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.fightCapacity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChallengeScoreMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      tollgateId: isSet(object.tollgateId) ? globalThis.Number(object.tollgateId) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      isLucky: isSet(object.isLucky) ? globalThis.Boolean(object.isLucky) : false,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      fightCapacity: isSet(object.fightCapacity) ? globalThis.Number(object.fightCapacity) : 0,
    };
  },

  toJSON(message: ChallengeScoreMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.tollgateId !== 0) {
      obj.tollgateId = Math.round(message.tollgateId);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.isLucky !== false) {
      obj.isLucky = message.isLucky;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.fightCapacity !== 0) {
      obj.fightCapacity = Math.round(message.fightCapacity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChallengeScoreMsg>, I>>(base?: I): ChallengeScoreMsg {
    return ChallengeScoreMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChallengeScoreMsg>, I>>(object: I): ChallengeScoreMsg {
    const message = createBaseChallengeScoreMsg();
    message.userId = object.userId ?? 0;
    message.tollgateId = object.tollgateId ?? 0;
    message.score = object.score ?? 0;
    message.order = object.order ?? 0;
    message.isLucky = object.isLucky ?? false;
    message.nickName = object.nickName ?? "";
    message.isVip = object.isVip ?? false;
    message.grade = object.grade ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.fightCapacity = object.fightCapacity ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
