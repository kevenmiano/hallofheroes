// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: market/MarketOrderMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.market";

export interface MarketOrderMsg {
  orderId: string;
  type: number;
  templateId: number;
  count: number;
  point: number;
  status: number;
  createTime: string;
  extract: boolean;
  tradingPoint: number;
  tax: number;
  isExist: boolean;
  actionTime: string;
}

function createBaseMarketOrderMsg(): MarketOrderMsg {
  return {
    orderId: "",
    type: 0,
    templateId: 0,
    count: 0,
    point: 0,
    status: 0,
    createTime: "",
    extract: false,
    tradingPoint: 0,
    tax: 0,
    isExist: false,
    actionTime: "",
  };
}

export const MarketOrderMsg: MessageFns<MarketOrderMsg> = {
  encode(message: MarketOrderMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.templateId !== 0) {
      writer.uint32(24).int32(message.templateId);
    }
    if (message.count !== 0) {
      writer.uint32(32).int32(message.count);
    }
    if (message.point !== 0) {
      writer.uint32(40).int32(message.point);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.createTime !== "") {
      writer.uint32(58).string(message.createTime);
    }
    if (message.extract !== false) {
      writer.uint32(64).bool(message.extract);
    }
    if (message.tradingPoint !== 0) {
      writer.uint32(72).int32(message.tradingPoint);
    }
    if (message.tax !== 0) {
      writer.uint32(80).int32(message.tax);
    }
    if (message.isExist !== false) {
      writer.uint32(88).bool(message.isExist);
    }
    if (message.actionTime !== "") {
      writer.uint32(98).string(message.actionTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarketOrderMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarketOrderMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createTime = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.extract = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.tradingPoint = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.tax = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.actionTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarketOrderMsg {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "",
      extract: isSet(object.extract) ? globalThis.Boolean(object.extract) : false,
      tradingPoint: isSet(object.tradingPoint) ? globalThis.Number(object.tradingPoint) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      actionTime: isSet(object.actionTime) ? globalThis.String(object.actionTime) : "",
    };
  },

  toJSON(message: MarketOrderMsg): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.createTime !== "") {
      obj.createTime = message.createTime;
    }
    if (message.extract !== false) {
      obj.extract = message.extract;
    }
    if (message.tradingPoint !== 0) {
      obj.tradingPoint = Math.round(message.tradingPoint);
    }
    if (message.tax !== 0) {
      obj.tax = Math.round(message.tax);
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.actionTime !== "") {
      obj.actionTime = message.actionTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarketOrderMsg>, I>>(base?: I): MarketOrderMsg {
    return MarketOrderMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarketOrderMsg>, I>>(object: I): MarketOrderMsg {
    const message = createBaseMarketOrderMsg();
    message.orderId = object.orderId ?? "";
    message.type = object.type ?? 0;
    message.templateId = object.templateId ?? 0;
    message.count = object.count ?? 0;
    message.point = object.point ?? 0;
    message.status = object.status ?? 0;
    message.createTime = object.createTime ?? "";
    message.extract = object.extract ?? false;
    message.tradingPoint = object.tradingPoint ?? 0;
    message.tax = object.tax ?? 0;
    message.isExist = object.isExist ?? false;
    message.actionTime = object.actionTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
