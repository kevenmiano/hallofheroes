// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/BattleReportMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface BattleReportMsg {
  battleResult: number;
  strategyBonus: number;
  gpBonus: number;
  posX: number;
  posY: number;
  signId: string;
  baseItem: number[];
  battleScene: number;
  failCount: number;
  goldBonus: number;
  petGpBonus: number;
  param1: number;
  param2: number;
  battleId: string;
}

function createBaseBattleReportMsg(): BattleReportMsg {
  return {
    battleResult: 0,
    strategyBonus: 0,
    gpBonus: 0,
    posX: 0,
    posY: 0,
    signId: "",
    baseItem: [],
    battleScene: 0,
    failCount: 0,
    goldBonus: 0,
    petGpBonus: 0,
    param1: 0,
    param2: 0,
    battleId: "",
  };
}

export const BattleReportMsg: MessageFns<BattleReportMsg> = {
  encode(message: BattleReportMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.battleResult !== 0) {
      writer.uint32(8).int32(message.battleResult);
    }
    if (message.strategyBonus !== 0) {
      writer.uint32(16).int32(message.strategyBonus);
    }
    if (message.gpBonus !== 0) {
      writer.uint32(24).int32(message.gpBonus);
    }
    if (message.posX !== 0) {
      writer.uint32(32).int32(message.posX);
    }
    if (message.posY !== 0) {
      writer.uint32(40).int32(message.posY);
    }
    if (message.signId !== "") {
      writer.uint32(50).string(message.signId);
    }
    writer.uint32(58).fork();
    for (const v of message.baseItem) {
      writer.int32(v);
    }
    writer.join();
    if (message.battleScene !== 0) {
      writer.uint32(64).int32(message.battleScene);
    }
    if (message.failCount !== 0) {
      writer.uint32(72).int32(message.failCount);
    }
    if (message.goldBonus !== 0) {
      writer.uint32(80).int32(message.goldBonus);
    }
    if (message.petGpBonus !== 0) {
      writer.uint32(88).int32(message.petGpBonus);
    }
    if (message.param1 !== 0) {
      writer.uint32(96).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(104).int32(message.param2);
    }
    if (message.battleId !== "") {
      writer.uint32(114).string(message.battleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleReportMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleReportMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.battleResult = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.strategyBonus = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gpBonus = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.posX = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.posY = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.signId = reader.string();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.baseItem.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.baseItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.battleScene = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.failCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.goldBonus = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.petGpBonus = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.battleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleReportMsg {
    return {
      battleResult: isSet(object.battleResult) ? globalThis.Number(object.battleResult) : 0,
      strategyBonus: isSet(object.strategyBonus) ? globalThis.Number(object.strategyBonus) : 0,
      gpBonus: isSet(object.gpBonus) ? globalThis.Number(object.gpBonus) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      signId: isSet(object.signId) ? globalThis.String(object.signId) : "",
      baseItem: globalThis.Array.isArray(object?.baseItem) ? object.baseItem.map((e: any) => globalThis.Number(e)) : [],
      battleScene: isSet(object.battleScene) ? globalThis.Number(object.battleScene) : 0,
      failCount: isSet(object.failCount) ? globalThis.Number(object.failCount) : 0,
      goldBonus: isSet(object.goldBonus) ? globalThis.Number(object.goldBonus) : 0,
      petGpBonus: isSet(object.petGpBonus) ? globalThis.Number(object.petGpBonus) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "",
    };
  },

  toJSON(message: BattleReportMsg): unknown {
    const obj: any = {};
    if (message.battleResult !== 0) {
      obj.battleResult = Math.round(message.battleResult);
    }
    if (message.strategyBonus !== 0) {
      obj.strategyBonus = Math.round(message.strategyBonus);
    }
    if (message.gpBonus !== 0) {
      obj.gpBonus = Math.round(message.gpBonus);
    }
    if (message.posX !== 0) {
      obj.posX = Math.round(message.posX);
    }
    if (message.posY !== 0) {
      obj.posY = Math.round(message.posY);
    }
    if (message.signId !== "") {
      obj.signId = message.signId;
    }
    if (message.baseItem?.length) {
      obj.baseItem = message.baseItem.map((e) => Math.round(e));
    }
    if (message.battleScene !== 0) {
      obj.battleScene = Math.round(message.battleScene);
    }
    if (message.failCount !== 0) {
      obj.failCount = Math.round(message.failCount);
    }
    if (message.goldBonus !== 0) {
      obj.goldBonus = Math.round(message.goldBonus);
    }
    if (message.petGpBonus !== 0) {
      obj.petGpBonus = Math.round(message.petGpBonus);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    if (message.battleId !== "") {
      obj.battleId = message.battleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleReportMsg>, I>>(base?: I): BattleReportMsg {
    return BattleReportMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleReportMsg>, I>>(object: I): BattleReportMsg {
    const message = createBaseBattleReportMsg();
    message.battleResult = object.battleResult ?? 0;
    message.strategyBonus = object.strategyBonus ?? 0;
    message.gpBonus = object.gpBonus ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.signId = object.signId ?? "";
    message.baseItem = object.baseItem?.map((e) => e) || [];
    message.battleScene = object.battleScene ?? 0;
    message.failCount = object.failCount ?? 0;
    message.goldBonus = object.goldBonus ?? 0;
    message.petGpBonus = object.petGpBonus ?? 0;
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    message.battleId = object.battleId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
