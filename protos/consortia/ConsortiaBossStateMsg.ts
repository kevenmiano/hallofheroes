// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaBossStateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaBossStateMsg {
  missionAProcess: number;
  missionBProcess: number;
  missionCProcess: number;
  playerList: number[];
  missionASkillId: number;
  missionBSkillId: number;
  missionCSkillId: number;
}

function createBaseConsortiaBossStateMsg(): ConsortiaBossStateMsg {
  return {
    missionAProcess: 0,
    missionBProcess: 0,
    missionCProcess: 0,
    playerList: [],
    missionASkillId: 0,
    missionBSkillId: 0,
    missionCSkillId: 0,
  };
}

export const ConsortiaBossStateMsg: MessageFns<ConsortiaBossStateMsg> = {
  encode(message: ConsortiaBossStateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.missionAProcess !== 0) {
      writer.uint32(8).int32(message.missionAProcess);
    }
    if (message.missionBProcess !== 0) {
      writer.uint32(16).int32(message.missionBProcess);
    }
    if (message.missionCProcess !== 0) {
      writer.uint32(24).int32(message.missionCProcess);
    }
    writer.uint32(34).fork();
    for (const v of message.playerList) {
      writer.int32(v);
    }
    writer.join();
    if (message.missionASkillId !== 0) {
      writer.uint32(40).int32(message.missionASkillId);
    }
    if (message.missionBSkillId !== 0) {
      writer.uint32(48).int32(message.missionBSkillId);
    }
    if (message.missionCSkillId !== 0) {
      writer.uint32(56).int32(message.missionCSkillId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaBossStateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaBossStateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.missionAProcess = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.missionBProcess = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.missionCProcess = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.playerList.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playerList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.missionASkillId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.missionBSkillId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.missionCSkillId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaBossStateMsg {
    return {
      missionAProcess: isSet(object.missionAProcess) ? globalThis.Number(object.missionAProcess) : 0,
      missionBProcess: isSet(object.missionBProcess) ? globalThis.Number(object.missionBProcess) : 0,
      missionCProcess: isSet(object.missionCProcess) ? globalThis.Number(object.missionCProcess) : 0,
      playerList: globalThis.Array.isArray(object?.playerList)
        ? object.playerList.map((e: any) => globalThis.Number(e))
        : [],
      missionASkillId: isSet(object.missionASkillId) ? globalThis.Number(object.missionASkillId) : 0,
      missionBSkillId: isSet(object.missionBSkillId) ? globalThis.Number(object.missionBSkillId) : 0,
      missionCSkillId: isSet(object.missionCSkillId) ? globalThis.Number(object.missionCSkillId) : 0,
    };
  },

  toJSON(message: ConsortiaBossStateMsg): unknown {
    const obj: any = {};
    if (message.missionAProcess !== 0) {
      obj.missionAProcess = Math.round(message.missionAProcess);
    }
    if (message.missionBProcess !== 0) {
      obj.missionBProcess = Math.round(message.missionBProcess);
    }
    if (message.missionCProcess !== 0) {
      obj.missionCProcess = Math.round(message.missionCProcess);
    }
    if (message.playerList?.length) {
      obj.playerList = message.playerList.map((e) => Math.round(e));
    }
    if (message.missionASkillId !== 0) {
      obj.missionASkillId = Math.round(message.missionASkillId);
    }
    if (message.missionBSkillId !== 0) {
      obj.missionBSkillId = Math.round(message.missionBSkillId);
    }
    if (message.missionCSkillId !== 0) {
      obj.missionCSkillId = Math.round(message.missionCSkillId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaBossStateMsg>, I>>(base?: I): ConsortiaBossStateMsg {
    return ConsortiaBossStateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaBossStateMsg>, I>>(object: I): ConsortiaBossStateMsg {
    const message = createBaseConsortiaBossStateMsg();
    message.missionAProcess = object.missionAProcess ?? 0;
    message.missionBProcess = object.missionBProcess ?? 0;
    message.missionCProcess = object.missionCProcess ?? 0;
    message.playerList = object.playerList?.map((e) => e) || [];
    message.missionASkillId = object.missionASkillId ?? 0;
    message.missionBSkillId = object.missionBSkillId ?? 0;
    message.missionCSkillId = object.missionCSkillId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
