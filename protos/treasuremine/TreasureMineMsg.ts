// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: treasuremine/TreasureMineMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.treasuremine";

export interface TreasureMineMsg {
  state: number;
  stateEndTime: number;
  failCount: number;
  skipCount: number;
  sumCD: number;
  isDeath: boolean;
  minerals: number[];
  consortiaMinerals: number[];
}

function createBaseTreasureMineMsg(): TreasureMineMsg {
  return {
    state: 0,
    stateEndTime: 0,
    failCount: 0,
    skipCount: 0,
    sumCD: 0,
    isDeath: false,
    minerals: [],
    consortiaMinerals: [],
  };
}

export const TreasureMineMsg: MessageFns<TreasureMineMsg> = {
  encode(message: TreasureMineMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.stateEndTime !== 0) {
      writer.uint32(16).int32(message.stateEndTime);
    }
    if (message.failCount !== 0) {
      writer.uint32(24).int32(message.failCount);
    }
    if (message.skipCount !== 0) {
      writer.uint32(32).int32(message.skipCount);
    }
    if (message.sumCD !== 0) {
      writer.uint32(40).int32(message.sumCD);
    }
    if (message.isDeath !== false) {
      writer.uint32(48).bool(message.isDeath);
    }
    writer.uint32(58).fork();
    for (const v of message.minerals) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.consortiaMinerals) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TreasureMineMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreasureMineMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.stateEndTime = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.failCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.skipCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sumCD = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isDeath = reader.bool();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.minerals.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.minerals.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.consortiaMinerals.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.consortiaMinerals.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreasureMineMsg {
    return {
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      stateEndTime: isSet(object.stateEndTime) ? globalThis.Number(object.stateEndTime) : 0,
      failCount: isSet(object.failCount) ? globalThis.Number(object.failCount) : 0,
      skipCount: isSet(object.skipCount) ? globalThis.Number(object.skipCount) : 0,
      sumCD: isSet(object.sumCD) ? globalThis.Number(object.sumCD) : 0,
      isDeath: isSet(object.isDeath) ? globalThis.Boolean(object.isDeath) : false,
      minerals: globalThis.Array.isArray(object?.minerals) ? object.minerals.map((e: any) => globalThis.Number(e)) : [],
      consortiaMinerals: globalThis.Array.isArray(object?.consortiaMinerals)
        ? object.consortiaMinerals.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: TreasureMineMsg): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.stateEndTime !== 0) {
      obj.stateEndTime = Math.round(message.stateEndTime);
    }
    if (message.failCount !== 0) {
      obj.failCount = Math.round(message.failCount);
    }
    if (message.skipCount !== 0) {
      obj.skipCount = Math.round(message.skipCount);
    }
    if (message.sumCD !== 0) {
      obj.sumCD = Math.round(message.sumCD);
    }
    if (message.isDeath !== false) {
      obj.isDeath = message.isDeath;
    }
    if (message.minerals?.length) {
      obj.minerals = message.minerals.map((e) => Math.round(e));
    }
    if (message.consortiaMinerals?.length) {
      obj.consortiaMinerals = message.consortiaMinerals.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TreasureMineMsg>, I>>(base?: I): TreasureMineMsg {
    return TreasureMineMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TreasureMineMsg>, I>>(object: I): TreasureMineMsg {
    const message = createBaseTreasureMineMsg();
    message.state = object.state ?? 0;
    message.stateEndTime = object.stateEndTime ?? 0;
    message.failCount = object.failCount ?? 0;
    message.skipCount = object.skipCount ?? 0;
    message.sumCD = object.sumCD ?? 0;
    message.isDeath = object.isDeath ?? false;
    message.minerals = object.minerals?.map((e) => e) || [];
    message.consortiaMinerals = object.consortiaMinerals?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
