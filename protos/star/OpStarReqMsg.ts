// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: star/OpStarReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.star";

export interface OpStarReqMsg {
  itemInfo: number[];
  way: number;
  mergePos: number;
  beginType: number;
  endType: number;
}

function createBaseOpStarReqMsg(): OpStarReqMsg {
  return { itemInfo: [], way: 0, mergePos: 0, beginType: 0, endType: 0 };
}

export const OpStarReqMsg: MessageFns<OpStarReqMsg> = {
  encode(message: OpStarReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.itemInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.way !== 0) {
      writer.uint32(16).int32(message.way);
    }
    if (message.mergePos !== 0) {
      writer.uint32(24).int32(message.mergePos);
    }
    if (message.beginType !== 0) {
      writer.uint32(32).int32(message.beginType);
    }
    if (message.endType !== 0) {
      writer.uint32(40).int32(message.endType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpStarReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpStarReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.itemInfo.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.itemInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.way = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mergePos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.beginType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpStarReqMsg {
    return {
      itemInfo: globalThis.Array.isArray(object?.itemInfo) ? object.itemInfo.map((e: any) => globalThis.Number(e)) : [],
      way: isSet(object.way) ? globalThis.Number(object.way) : 0,
      mergePos: isSet(object.mergePos) ? globalThis.Number(object.mergePos) : 0,
      beginType: isSet(object.beginType) ? globalThis.Number(object.beginType) : 0,
      endType: isSet(object.endType) ? globalThis.Number(object.endType) : 0,
    };
  },

  toJSON(message: OpStarReqMsg): unknown {
    const obj: any = {};
    if (message.itemInfo?.length) {
      obj.itemInfo = message.itemInfo.map((e) => Math.round(e));
    }
    if (message.way !== 0) {
      obj.way = Math.round(message.way);
    }
    if (message.mergePos !== 0) {
      obj.mergePos = Math.round(message.mergePos);
    }
    if (message.beginType !== 0) {
      obj.beginType = Math.round(message.beginType);
    }
    if (message.endType !== 0) {
      obj.endType = Math.round(message.endType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpStarReqMsg>, I>>(base?: I): OpStarReqMsg {
    return OpStarReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpStarReqMsg>, I>>(object: I): OpStarReqMsg {
    const message = createBaseOpStarReqMsg();
    message.itemInfo = object.itemInfo?.map((e) => e) || [];
    message.way = object.way ?? 0;
    message.mergePos = object.mergePos ?? 0;
    message.beginType = object.beginType ?? 0;
    message.endType = object.endType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
