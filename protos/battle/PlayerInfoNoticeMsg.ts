// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/PlayerInfoNoticeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface PlayerInfoNoticeMsg {
  affectGeste: number;
  score: number;
  isAdd: boolean;
  playerState: number;
  isTips: boolean;
  serverName: string;
  manualExit: boolean;
  mountTemplateId: number;
  mountGrade: number;
  wing: string;
  arm: string;
  cloth: string;
  changeShapeId: number;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  crossScore: number;
  gesteJoin: number;
  appellId: number;
  petTemplateId: number;
  petName: string;
  petQuality: number;
  gestePowcardJoin: number;
}

function createBasePlayerInfoNoticeMsg(): PlayerInfoNoticeMsg {
  return {
    affectGeste: 0,
    score: 0,
    isAdd: false,
    playerState: 0,
    isTips: false,
    serverName: "",
    manualExit: false,
    mountTemplateId: 0,
    mountGrade: 0,
    wing: "",
    arm: "",
    cloth: "",
    changeShapeId: 0,
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    crossScore: 0,
    gesteJoin: 0,
    appellId: 0,
    petTemplateId: 0,
    petName: "",
    petQuality: 0,
    gestePowcardJoin: 0,
  };
}

export const PlayerInfoNoticeMsg: MessageFns<PlayerInfoNoticeMsg> = {
  encode(message: PlayerInfoNoticeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.affectGeste !== 0) {
      writer.uint32(8).int32(message.affectGeste);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    if (message.isAdd !== false) {
      writer.uint32(24).bool(message.isAdd);
    }
    if (message.playerState !== 0) {
      writer.uint32(32).int32(message.playerState);
    }
    if (message.isTips !== false) {
      writer.uint32(40).bool(message.isTips);
    }
    if (message.serverName !== "") {
      writer.uint32(50).string(message.serverName);
    }
    if (message.manualExit !== false) {
      writer.uint32(56).bool(message.manualExit);
    }
    if (message.mountTemplateId !== 0) {
      writer.uint32(64).int32(message.mountTemplateId);
    }
    if (message.mountGrade !== 0) {
      writer.uint32(72).int32(message.mountGrade);
    }
    if (message.wing !== "") {
      writer.uint32(82).string(message.wing);
    }
    if (message.arm !== "") {
      writer.uint32(90).string(message.arm);
    }
    if (message.cloth !== "") {
      writer.uint32(98).string(message.cloth);
    }
    if (message.changeShapeId !== 0) {
      writer.uint32(104).int32(message.changeShapeId);
    }
    if (message.hat !== "") {
      writer.uint32(114).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(122).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(130).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(136).bool(message.hide);
    }
    if (message.crossScore !== 0) {
      writer.uint32(144).int32(message.crossScore);
    }
    if (message.gesteJoin !== 0) {
      writer.uint32(152).int32(message.gesteJoin);
    }
    if (message.appellId !== 0) {
      writer.uint32(160).int32(message.appellId);
    }
    if (message.petTemplateId !== 0) {
      writer.uint32(168).int32(message.petTemplateId);
    }
    if (message.petName !== "") {
      writer.uint32(178).string(message.petName);
    }
    if (message.petQuality !== 0) {
      writer.uint32(184).int32(message.petQuality);
    }
    if (message.gestePowcardJoin !== 0) {
      writer.uint32(192).int32(message.gestePowcardJoin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerInfoNoticeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInfoNoticeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.affectGeste = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isAdd = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playerState = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isTips = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.manualExit = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.mountTemplateId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.mountGrade = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.cloth = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.changeShapeId = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.crossScore = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.gesteJoin = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.petTemplateId = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.petQuality = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.gestePowcardJoin = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInfoNoticeMsg {
    return {
      affectGeste: isSet(object.affectGeste) ? globalThis.Number(object.affectGeste) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      isAdd: isSet(object.isAdd) ? globalThis.Boolean(object.isAdd) : false,
      playerState: isSet(object.playerState) ? globalThis.Number(object.playerState) : 0,
      isTips: isSet(object.isTips) ? globalThis.Boolean(object.isTips) : false,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      manualExit: isSet(object.manualExit) ? globalThis.Boolean(object.manualExit) : false,
      mountTemplateId: isSet(object.mountTemplateId) ? globalThis.Number(object.mountTemplateId) : 0,
      mountGrade: isSet(object.mountGrade) ? globalThis.Number(object.mountGrade) : 0,
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      cloth: isSet(object.cloth) ? globalThis.String(object.cloth) : "",
      changeShapeId: isSet(object.changeShapeId) ? globalThis.Number(object.changeShapeId) : 0,
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      crossScore: isSet(object.crossScore) ? globalThis.Number(object.crossScore) : 0,
      gesteJoin: isSet(object.gesteJoin) ? globalThis.Number(object.gesteJoin) : 0,
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
      petTemplateId: isSet(object.petTemplateId) ? globalThis.Number(object.petTemplateId) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      petQuality: isSet(object.petQuality) ? globalThis.Number(object.petQuality) : 0,
      gestePowcardJoin: isSet(object.gestePowcardJoin) ? globalThis.Number(object.gestePowcardJoin) : 0,
    };
  },

  toJSON(message: PlayerInfoNoticeMsg): unknown {
    const obj: any = {};
    if (message.affectGeste !== 0) {
      obj.affectGeste = Math.round(message.affectGeste);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.isAdd !== false) {
      obj.isAdd = message.isAdd;
    }
    if (message.playerState !== 0) {
      obj.playerState = Math.round(message.playerState);
    }
    if (message.isTips !== false) {
      obj.isTips = message.isTips;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.manualExit !== false) {
      obj.manualExit = message.manualExit;
    }
    if (message.mountTemplateId !== 0) {
      obj.mountTemplateId = Math.round(message.mountTemplateId);
    }
    if (message.mountGrade !== 0) {
      obj.mountGrade = Math.round(message.mountGrade);
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.cloth !== "") {
      obj.cloth = message.cloth;
    }
    if (message.changeShapeId !== 0) {
      obj.changeShapeId = Math.round(message.changeShapeId);
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.crossScore !== 0) {
      obj.crossScore = Math.round(message.crossScore);
    }
    if (message.gesteJoin !== 0) {
      obj.gesteJoin = Math.round(message.gesteJoin);
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    if (message.petTemplateId !== 0) {
      obj.petTemplateId = Math.round(message.petTemplateId);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.petQuality !== 0) {
      obj.petQuality = Math.round(message.petQuality);
    }
    if (message.gestePowcardJoin !== 0) {
      obj.gestePowcardJoin = Math.round(message.gestePowcardJoin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInfoNoticeMsg>, I>>(base?: I): PlayerInfoNoticeMsg {
    return PlayerInfoNoticeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerInfoNoticeMsg>, I>>(object: I): PlayerInfoNoticeMsg {
    const message = createBasePlayerInfoNoticeMsg();
    message.affectGeste = object.affectGeste ?? 0;
    message.score = object.score ?? 0;
    message.isAdd = object.isAdd ?? false;
    message.playerState = object.playerState ?? 0;
    message.isTips = object.isTips ?? false;
    message.serverName = object.serverName ?? "";
    message.manualExit = object.manualExit ?? false;
    message.mountTemplateId = object.mountTemplateId ?? 0;
    message.mountGrade = object.mountGrade ?? 0;
    message.wing = object.wing ?? "";
    message.arm = object.arm ?? "";
    message.cloth = object.cloth ?? "";
    message.changeShapeId = object.changeShapeId ?? 0;
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.crossScore = object.crossScore ?? 0;
    message.gesteJoin = object.gesteJoin ?? 0;
    message.appellId = object.appellId ?? 0;
    message.petTemplateId = object.petTemplateId ?? 0;
    message.petName = object.petName ?? "";
    message.petQuality = object.petQuality ?? 0;
    message.gestePowcardJoin = object.gestePowcardJoin ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
