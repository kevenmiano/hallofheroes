// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/ActiveParamMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface ActiveParamMsg {
  level: number;
  costDiamond: number;
  costContract: number;
  getBindingDia: number;
  harvestCount: number;
  itemInfos: number[];
  getInfos: number[];
}

function createBaseActiveParamMsg(): ActiveParamMsg {
  return { level: 0, costDiamond: 0, costContract: 0, getBindingDia: 0, harvestCount: 0, itemInfos: [], getInfos: [] };
}

export const ActiveParamMsg: MessageFns<ActiveParamMsg> = {
  encode(message: ActiveParamMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== 0) {
      writer.uint32(8).int32(message.level);
    }
    if (message.costDiamond !== 0) {
      writer.uint32(16).int32(message.costDiamond);
    }
    if (message.costContract !== 0) {
      writer.uint32(24).int32(message.costContract);
    }
    if (message.getBindingDia !== 0) {
      writer.uint32(32).int32(message.getBindingDia);
    }
    if (message.harvestCount !== 0) {
      writer.uint32(40).int32(message.harvestCount);
    }
    writer.uint32(50).fork();
    for (const v of message.itemInfos) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.getInfos) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveParamMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveParamMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.costDiamond = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.costContract = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.getBindingDia = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.harvestCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.itemInfos.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.itemInfos.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 56) {
            message.getInfos.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.getInfos.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveParamMsg {
    return {
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      costDiamond: isSet(object.costDiamond) ? globalThis.Number(object.costDiamond) : 0,
      costContract: isSet(object.costContract) ? globalThis.Number(object.costContract) : 0,
      getBindingDia: isSet(object.getBindingDia) ? globalThis.Number(object.getBindingDia) : 0,
      harvestCount: isSet(object.harvestCount) ? globalThis.Number(object.harvestCount) : 0,
      itemInfos: globalThis.Array.isArray(object?.itemInfos)
        ? object.itemInfos.map((e: any) => globalThis.Number(e))
        : [],
      getInfos: globalThis.Array.isArray(object?.getInfos) ? object.getInfos.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ActiveParamMsg): unknown {
    const obj: any = {};
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.costDiamond !== 0) {
      obj.costDiamond = Math.round(message.costDiamond);
    }
    if (message.costContract !== 0) {
      obj.costContract = Math.round(message.costContract);
    }
    if (message.getBindingDia !== 0) {
      obj.getBindingDia = Math.round(message.getBindingDia);
    }
    if (message.harvestCount !== 0) {
      obj.harvestCount = Math.round(message.harvestCount);
    }
    if (message.itemInfos?.length) {
      obj.itemInfos = message.itemInfos.map((e) => Math.round(e));
    }
    if (message.getInfos?.length) {
      obj.getInfos = message.getInfos.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveParamMsg>, I>>(base?: I): ActiveParamMsg {
    return ActiveParamMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveParamMsg>, I>>(object: I): ActiveParamMsg {
    const message = createBaseActiveParamMsg();
    message.level = object.level ?? 0;
    message.costDiamond = object.costDiamond ?? 0;
    message.costContract = object.costContract ?? 0;
    message.getBindingDia = object.getBindingDia ?? 0;
    message.harvestCount = object.harvestCount ?? 0;
    message.itemInfos = object.itemInfos?.map((e) => e) || [];
    message.getInfos = object.getInfos?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
