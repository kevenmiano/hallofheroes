// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/SevenTargetInfoRsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface SevenTargetInfoRsp {
  startTime: number;
  rewardSite: number;
  sevenTask: number[];
  giftSite: number;
  starNum: number;
  day: number;
  residualTime: number;
}

function createBaseSevenTargetInfoRsp(): SevenTargetInfoRsp {
  return { startTime: 0, rewardSite: 0, sevenTask: [], giftSite: 0, starNum: 0, day: 0, residualTime: 0 };
}

export const SevenTargetInfoRsp: MessageFns<SevenTargetInfoRsp> = {
  encode(message: SevenTargetInfoRsp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== 0) {
      writer.uint32(8).int32(message.startTime);
    }
    if (message.rewardSite !== 0) {
      writer.uint32(16).int32(message.rewardSite);
    }
    writer.uint32(26).fork();
    for (const v of message.sevenTask) {
      writer.int32(v);
    }
    writer.join();
    if (message.giftSite !== 0) {
      writer.uint32(32).int32(message.giftSite);
    }
    if (message.starNum !== 0) {
      writer.uint32(40).int32(message.starNum);
    }
    if (message.day !== 0) {
      writer.uint32(48).int32(message.day);
    }
    if (message.residualTime !== 0) {
      writer.uint32(56).int32(message.residualTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SevenTargetInfoRsp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSevenTargetInfoRsp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.startTime = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rewardSite = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.sevenTask.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sevenTask.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.giftSite = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.starNum = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.day = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.residualTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SevenTargetInfoRsp {
    return {
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      rewardSite: isSet(object.rewardSite) ? globalThis.Number(object.rewardSite) : 0,
      sevenTask: globalThis.Array.isArray(object?.sevenTask)
        ? object.sevenTask.map((e: any) => globalThis.Number(e))
        : [],
      giftSite: isSet(object.giftSite) ? globalThis.Number(object.giftSite) : 0,
      starNum: isSet(object.starNum) ? globalThis.Number(object.starNum) : 0,
      day: isSet(object.day) ? globalThis.Number(object.day) : 0,
      residualTime: isSet(object.residualTime) ? globalThis.Number(object.residualTime) : 0,
    };
  },

  toJSON(message: SevenTargetInfoRsp): unknown {
    const obj: any = {};
    if (message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.rewardSite !== 0) {
      obj.rewardSite = Math.round(message.rewardSite);
    }
    if (message.sevenTask?.length) {
      obj.sevenTask = message.sevenTask.map((e) => Math.round(e));
    }
    if (message.giftSite !== 0) {
      obj.giftSite = Math.round(message.giftSite);
    }
    if (message.starNum !== 0) {
      obj.starNum = Math.round(message.starNum);
    }
    if (message.day !== 0) {
      obj.day = Math.round(message.day);
    }
    if (message.residualTime !== 0) {
      obj.residualTime = Math.round(message.residualTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SevenTargetInfoRsp>, I>>(base?: I): SevenTargetInfoRsp {
    return SevenTargetInfoRsp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SevenTargetInfoRsp>, I>>(object: I): SevenTargetInfoRsp {
    const message = createBaseSevenTargetInfoRsp();
    message.startTime = object.startTime ?? 0;
    message.rewardSite = object.rewardSite ?? 0;
    message.sevenTask = object.sevenTask?.map((e) => e) || [];
    message.giftSite = object.giftSite ?? 0;
    message.starNum = object.starNum ?? 0;
    message.day = object.day ?? 0;
    message.residualTime = object.residualTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
