// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/FarmLandInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface FarmLandInfoMsg {
  userId: number;
  type: number;
  pos: number;
  itemTemplateId: number;
  plantingTime: string;
  matureTime: string;
  cropState: number;
  accelerateCount: number;
  stolenCount: number;
  isWormParam1: boolean;
  isWormParam2: boolean;
  isGrassParam1: boolean;
  isGrassParam2: boolean;
  stolenUsers: number[];
  rewardCount: number;
  opType: number;
  result: number;
  param1: string;
  param2: string;
  originMatureTime: string;
}

function createBaseFarmLandInfoMsg(): FarmLandInfoMsg {
  return {
    userId: 0,
    type: 0,
    pos: 0,
    itemTemplateId: 0,
    plantingTime: "",
    matureTime: "",
    cropState: 0,
    accelerateCount: 0,
    stolenCount: 0,
    isWormParam1: false,
    isWormParam2: false,
    isGrassParam1: false,
    isGrassParam2: false,
    stolenUsers: [],
    rewardCount: 0,
    opType: 0,
    result: 0,
    param1: "",
    param2: "",
    originMatureTime: "",
  };
}

export const FarmLandInfoMsg: MessageFns<FarmLandInfoMsg> = {
  encode(message: FarmLandInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.pos !== 0) {
      writer.uint32(24).int32(message.pos);
    }
    if (message.itemTemplateId !== 0) {
      writer.uint32(32).int32(message.itemTemplateId);
    }
    if (message.plantingTime !== "") {
      writer.uint32(42).string(message.plantingTime);
    }
    if (message.matureTime !== "") {
      writer.uint32(50).string(message.matureTime);
    }
    if (message.cropState !== 0) {
      writer.uint32(56).int32(message.cropState);
    }
    if (message.accelerateCount !== 0) {
      writer.uint32(64).int32(message.accelerateCount);
    }
    if (message.stolenCount !== 0) {
      writer.uint32(72).int32(message.stolenCount);
    }
    if (message.isWormParam1 !== false) {
      writer.uint32(80).bool(message.isWormParam1);
    }
    if (message.isWormParam2 !== false) {
      writer.uint32(88).bool(message.isWormParam2);
    }
    if (message.isGrassParam1 !== false) {
      writer.uint32(96).bool(message.isGrassParam1);
    }
    if (message.isGrassParam2 !== false) {
      writer.uint32(104).bool(message.isGrassParam2);
    }
    writer.uint32(114).fork();
    for (const v of message.stolenUsers) {
      writer.int32(v);
    }
    writer.join();
    if (message.rewardCount !== 0) {
      writer.uint32(120).int32(message.rewardCount);
    }
    if (message.opType !== 0) {
      writer.uint32(128).int32(message.opType);
    }
    if (message.result !== 0) {
      writer.uint32(136).int32(message.result);
    }
    if (message.param1 !== "") {
      writer.uint32(146).string(message.param1);
    }
    if (message.param2 !== "") {
      writer.uint32(154).string(message.param2);
    }
    if (message.originMatureTime !== "") {
      writer.uint32(162).string(message.originMatureTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FarmLandInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFarmLandInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.itemTemplateId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.plantingTime = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.matureTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cropState = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.accelerateCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.stolenCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isWormParam1 = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isWormParam2 = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isGrassParam1 = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isGrassParam2 = reader.bool();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.stolenUsers.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.stolenUsers.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.rewardCount = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.param1 = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.param2 = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.originMatureTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FarmLandInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      itemTemplateId: isSet(object.itemTemplateId) ? globalThis.Number(object.itemTemplateId) : 0,
      plantingTime: isSet(object.plantingTime) ? globalThis.String(object.plantingTime) : "",
      matureTime: isSet(object.matureTime) ? globalThis.String(object.matureTime) : "",
      cropState: isSet(object.cropState) ? globalThis.Number(object.cropState) : 0,
      accelerateCount: isSet(object.accelerateCount) ? globalThis.Number(object.accelerateCount) : 0,
      stolenCount: isSet(object.stolenCount) ? globalThis.Number(object.stolenCount) : 0,
      isWormParam1: isSet(object.isWormParam1) ? globalThis.Boolean(object.isWormParam1) : false,
      isWormParam2: isSet(object.isWormParam2) ? globalThis.Boolean(object.isWormParam2) : false,
      isGrassParam1: isSet(object.isGrassParam1) ? globalThis.Boolean(object.isGrassParam1) : false,
      isGrassParam2: isSet(object.isGrassParam2) ? globalThis.Boolean(object.isGrassParam2) : false,
      stolenUsers: globalThis.Array.isArray(object?.stolenUsers)
        ? object.stolenUsers.map((e: any) => globalThis.Number(e))
        : [],
      rewardCount: isSet(object.rewardCount) ? globalThis.Number(object.rewardCount) : 0,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      param1: isSet(object.param1) ? globalThis.String(object.param1) : "",
      param2: isSet(object.param2) ? globalThis.String(object.param2) : "",
      originMatureTime: isSet(object.originMatureTime) ? globalThis.String(object.originMatureTime) : "",
    };
  },

  toJSON(message: FarmLandInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.itemTemplateId !== 0) {
      obj.itemTemplateId = Math.round(message.itemTemplateId);
    }
    if (message.plantingTime !== "") {
      obj.plantingTime = message.plantingTime;
    }
    if (message.matureTime !== "") {
      obj.matureTime = message.matureTime;
    }
    if (message.cropState !== 0) {
      obj.cropState = Math.round(message.cropState);
    }
    if (message.accelerateCount !== 0) {
      obj.accelerateCount = Math.round(message.accelerateCount);
    }
    if (message.stolenCount !== 0) {
      obj.stolenCount = Math.round(message.stolenCount);
    }
    if (message.isWormParam1 !== false) {
      obj.isWormParam1 = message.isWormParam1;
    }
    if (message.isWormParam2 !== false) {
      obj.isWormParam2 = message.isWormParam2;
    }
    if (message.isGrassParam1 !== false) {
      obj.isGrassParam1 = message.isGrassParam1;
    }
    if (message.isGrassParam2 !== false) {
      obj.isGrassParam2 = message.isGrassParam2;
    }
    if (message.stolenUsers?.length) {
      obj.stolenUsers = message.stolenUsers.map((e) => Math.round(e));
    }
    if (message.rewardCount !== 0) {
      obj.rewardCount = Math.round(message.rewardCount);
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.param1 !== "") {
      obj.param1 = message.param1;
    }
    if (message.param2 !== "") {
      obj.param2 = message.param2;
    }
    if (message.originMatureTime !== "") {
      obj.originMatureTime = message.originMatureTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FarmLandInfoMsg>, I>>(base?: I): FarmLandInfoMsg {
    return FarmLandInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FarmLandInfoMsg>, I>>(object: I): FarmLandInfoMsg {
    const message = createBaseFarmLandInfoMsg();
    message.userId = object.userId ?? 0;
    message.type = object.type ?? 0;
    message.pos = object.pos ?? 0;
    message.itemTemplateId = object.itemTemplateId ?? 0;
    message.plantingTime = object.plantingTime ?? "";
    message.matureTime = object.matureTime ?? "";
    message.cropState = object.cropState ?? 0;
    message.accelerateCount = object.accelerateCount ?? 0;
    message.stolenCount = object.stolenCount ?? 0;
    message.isWormParam1 = object.isWormParam1 ?? false;
    message.isWormParam2 = object.isWormParam2 ?? false;
    message.isGrassParam1 = object.isGrassParam1 ?? false;
    message.isGrassParam2 = object.isGrassParam2 ?? false;
    message.stolenUsers = object.stolenUsers?.map((e) => e) || [];
    message.rewardCount = object.rewardCount ?? 0;
    message.opType = object.opType ?? 0;
    message.result = object.result ?? 0;
    message.param1 = object.param1 ?? "";
    message.param2 = object.param2 ?? "";
    message.originMatureTime = object.originMatureTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
