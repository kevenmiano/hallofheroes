// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: stackhead/StackHeadSimpleGuildMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.stackhead";

export interface StackHeadSimpleGuildMsg {
  pos: number;
  currentScore: number;
  attackBuffLevel: number;
  defenceBuffLevel: number;
  defenceArmyAlive: number;
}

function createBaseStackHeadSimpleGuildMsg(): StackHeadSimpleGuildMsg {
  return { pos: 0, currentScore: 0, attackBuffLevel: 0, defenceBuffLevel: 0, defenceArmyAlive: 0 };
}

export const StackHeadSimpleGuildMsg: MessageFns<StackHeadSimpleGuildMsg> = {
  encode(message: StackHeadSimpleGuildMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pos !== 0) {
      writer.uint32(8).int32(message.pos);
    }
    if (message.currentScore !== 0) {
      writer.uint32(16).int32(message.currentScore);
    }
    if (message.attackBuffLevel !== 0) {
      writer.uint32(24).int32(message.attackBuffLevel);
    }
    if (message.defenceBuffLevel !== 0) {
      writer.uint32(32).int32(message.defenceBuffLevel);
    }
    if (message.defenceArmyAlive !== 0) {
      writer.uint32(40).int32(message.defenceArmyAlive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StackHeadSimpleGuildMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStackHeadSimpleGuildMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.currentScore = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attackBuffLevel = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.defenceBuffLevel = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.defenceArmyAlive = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StackHeadSimpleGuildMsg {
    return {
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      currentScore: isSet(object.currentScore) ? globalThis.Number(object.currentScore) : 0,
      attackBuffLevel: isSet(object.attackBuffLevel) ? globalThis.Number(object.attackBuffLevel) : 0,
      defenceBuffLevel: isSet(object.defenceBuffLevel) ? globalThis.Number(object.defenceBuffLevel) : 0,
      defenceArmyAlive: isSet(object.defenceArmyAlive) ? globalThis.Number(object.defenceArmyAlive) : 0,
    };
  },

  toJSON(message: StackHeadSimpleGuildMsg): unknown {
    const obj: any = {};
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.currentScore !== 0) {
      obj.currentScore = Math.round(message.currentScore);
    }
    if (message.attackBuffLevel !== 0) {
      obj.attackBuffLevel = Math.round(message.attackBuffLevel);
    }
    if (message.defenceBuffLevel !== 0) {
      obj.defenceBuffLevel = Math.round(message.defenceBuffLevel);
    }
    if (message.defenceArmyAlive !== 0) {
      obj.defenceArmyAlive = Math.round(message.defenceArmyAlive);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StackHeadSimpleGuildMsg>, I>>(base?: I): StackHeadSimpleGuildMsg {
    return StackHeadSimpleGuildMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StackHeadSimpleGuildMsg>, I>>(object: I): StackHeadSimpleGuildMsg {
    const message = createBaseStackHeadSimpleGuildMsg();
    message.pos = object.pos ?? 0;
    message.currentScore = object.currentScore ?? 0;
    message.attackBuffLevel = object.attackBuffLevel ?? 0;
    message.defenceBuffLevel = object.defenceBuffLevel ?? 0;
    message.defenceArmyAlive = object.defenceArmyAlive ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
