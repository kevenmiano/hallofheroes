// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: qq/UserQQBlueVipInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.qq";

export interface UserQQBlueVipInfoMsg {
  isBlueVip: number;
  isBlueYearVip: number;
  isSuperBlueVip: number;
  isExpandBlueVip: number;
  blueVipLevel: number;
  isHaveGrowth: number;
  isMobileBlueVip: number;
}

function createBaseUserQQBlueVipInfoMsg(): UserQQBlueVipInfoMsg {
  return {
    isBlueVip: 0,
    isBlueYearVip: 0,
    isSuperBlueVip: 0,
    isExpandBlueVip: 0,
    blueVipLevel: 0,
    isHaveGrowth: 0,
    isMobileBlueVip: 0,
  };
}

export const UserQQBlueVipInfoMsg: MessageFns<UserQQBlueVipInfoMsg> = {
  encode(message: UserQQBlueVipInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isBlueVip !== 0) {
      writer.uint32(8).int32(message.isBlueVip);
    }
    if (message.isBlueYearVip !== 0) {
      writer.uint32(16).int32(message.isBlueYearVip);
    }
    if (message.isSuperBlueVip !== 0) {
      writer.uint32(24).int32(message.isSuperBlueVip);
    }
    if (message.isExpandBlueVip !== 0) {
      writer.uint32(32).int32(message.isExpandBlueVip);
    }
    if (message.blueVipLevel !== 0) {
      writer.uint32(40).int32(message.blueVipLevel);
    }
    if (message.isHaveGrowth !== 0) {
      writer.uint32(48).int32(message.isHaveGrowth);
    }
    if (message.isMobileBlueVip !== 0) {
      writer.uint32(56).int32(message.isMobileBlueVip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserQQBlueVipInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserQQBlueVipInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isBlueVip = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isBlueYearVip = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isSuperBlueVip = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isExpandBlueVip = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blueVipLevel = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isHaveGrowth = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isMobileBlueVip = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserQQBlueVipInfoMsg {
    return {
      isBlueVip: isSet(object.isBlueVip) ? globalThis.Number(object.isBlueVip) : 0,
      isBlueYearVip: isSet(object.isBlueYearVip) ? globalThis.Number(object.isBlueYearVip) : 0,
      isSuperBlueVip: isSet(object.isSuperBlueVip) ? globalThis.Number(object.isSuperBlueVip) : 0,
      isExpandBlueVip: isSet(object.isExpandBlueVip) ? globalThis.Number(object.isExpandBlueVip) : 0,
      blueVipLevel: isSet(object.blueVipLevel) ? globalThis.Number(object.blueVipLevel) : 0,
      isHaveGrowth: isSet(object.isHaveGrowth) ? globalThis.Number(object.isHaveGrowth) : 0,
      isMobileBlueVip: isSet(object.isMobileBlueVip) ? globalThis.Number(object.isMobileBlueVip) : 0,
    };
  },

  toJSON(message: UserQQBlueVipInfoMsg): unknown {
    const obj: any = {};
    if (message.isBlueVip !== 0) {
      obj.isBlueVip = Math.round(message.isBlueVip);
    }
    if (message.isBlueYearVip !== 0) {
      obj.isBlueYearVip = Math.round(message.isBlueYearVip);
    }
    if (message.isSuperBlueVip !== 0) {
      obj.isSuperBlueVip = Math.round(message.isSuperBlueVip);
    }
    if (message.isExpandBlueVip !== 0) {
      obj.isExpandBlueVip = Math.round(message.isExpandBlueVip);
    }
    if (message.blueVipLevel !== 0) {
      obj.blueVipLevel = Math.round(message.blueVipLevel);
    }
    if (message.isHaveGrowth !== 0) {
      obj.isHaveGrowth = Math.round(message.isHaveGrowth);
    }
    if (message.isMobileBlueVip !== 0) {
      obj.isMobileBlueVip = Math.round(message.isMobileBlueVip);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserQQBlueVipInfoMsg>, I>>(base?: I): UserQQBlueVipInfoMsg {
    return UserQQBlueVipInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserQQBlueVipInfoMsg>, I>>(object: I): UserQQBlueVipInfoMsg {
    const message = createBaseUserQQBlueVipInfoMsg();
    message.isBlueVip = object.isBlueVip ?? 0;
    message.isBlueYearVip = object.isBlueYearVip ?? 0;
    message.isSuperBlueVip = object.isSuperBlueVip ?? 0;
    message.isExpandBlueVip = object.isExpandBlueVip ?? 0;
    message.blueVipLevel = object.blueVipLevel ?? 0;
    message.isHaveGrowth = object.isHaveGrowth ?? 0;
    message.isMobileBlueVip = object.isMobileBlueVip ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
