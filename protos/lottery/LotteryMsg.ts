// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: lottery/LotteryMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.lottery";

export interface LotteryMsg {
  payedPoint: number;
  totalCount: number;
  leftCount: number;
  dayMaxCount: number;
  onceNeedPoint: number;
  leftMillis: string;
  isOpen: boolean;
  property1: string;
  property2: string;
  property3: number[];
  property4: number[];
  dayAddCount: number;
}

function createBaseLotteryMsg(): LotteryMsg {
  return {
    payedPoint: 0,
    totalCount: 0,
    leftCount: 0,
    dayMaxCount: 0,
    onceNeedPoint: 0,
    leftMillis: "",
    isOpen: false,
    property1: "",
    property2: "",
    property3: [],
    property4: [],
    dayAddCount: 0,
  };
}

export const LotteryMsg: MessageFns<LotteryMsg> = {
  encode(message: LotteryMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payedPoint !== 0) {
      writer.uint32(8).int32(message.payedPoint);
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.leftCount !== 0) {
      writer.uint32(24).int32(message.leftCount);
    }
    if (message.dayMaxCount !== 0) {
      writer.uint32(32).int32(message.dayMaxCount);
    }
    if (message.onceNeedPoint !== 0) {
      writer.uint32(40).int32(message.onceNeedPoint);
    }
    if (message.leftMillis !== "") {
      writer.uint32(50).string(message.leftMillis);
    }
    if (message.isOpen !== false) {
      writer.uint32(56).bool(message.isOpen);
    }
    if (message.property1 !== "") {
      writer.uint32(66).string(message.property1);
    }
    if (message.property2 !== "") {
      writer.uint32(74).string(message.property2);
    }
    writer.uint32(82).fork();
    for (const v of message.property3) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(90).fork();
    for (const v of message.property4) {
      writer.int32(v);
    }
    writer.join();
    if (message.dayAddCount !== 0) {
      writer.uint32(96).int32(message.dayAddCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LotteryMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLotteryMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.payedPoint = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.leftCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dayMaxCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.onceNeedPoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.leftMillis = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isOpen = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.property1 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.property2 = reader.string();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.property3.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.property3.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag === 88) {
            message.property4.push(reader.int32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.property4.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.dayAddCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LotteryMsg {
    return {
      payedPoint: isSet(object.payedPoint) ? globalThis.Number(object.payedPoint) : 0,
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      leftCount: isSet(object.leftCount) ? globalThis.Number(object.leftCount) : 0,
      dayMaxCount: isSet(object.dayMaxCount) ? globalThis.Number(object.dayMaxCount) : 0,
      onceNeedPoint: isSet(object.onceNeedPoint) ? globalThis.Number(object.onceNeedPoint) : 0,
      leftMillis: isSet(object.leftMillis) ? globalThis.String(object.leftMillis) : "",
      isOpen: isSet(object.isOpen) ? globalThis.Boolean(object.isOpen) : false,
      property1: isSet(object.property1) ? globalThis.String(object.property1) : "",
      property2: isSet(object.property2) ? globalThis.String(object.property2) : "",
      property3: globalThis.Array.isArray(object?.property3)
        ? object.property3.map((e: any) => globalThis.Number(e))
        : [],
      property4: globalThis.Array.isArray(object?.property4)
        ? object.property4.map((e: any) => globalThis.Number(e))
        : [],
      dayAddCount: isSet(object.dayAddCount) ? globalThis.Number(object.dayAddCount) : 0,
    };
  },

  toJSON(message: LotteryMsg): unknown {
    const obj: any = {};
    if (message.payedPoint !== 0) {
      obj.payedPoint = Math.round(message.payedPoint);
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.leftCount !== 0) {
      obj.leftCount = Math.round(message.leftCount);
    }
    if (message.dayMaxCount !== 0) {
      obj.dayMaxCount = Math.round(message.dayMaxCount);
    }
    if (message.onceNeedPoint !== 0) {
      obj.onceNeedPoint = Math.round(message.onceNeedPoint);
    }
    if (message.leftMillis !== "") {
      obj.leftMillis = message.leftMillis;
    }
    if (message.isOpen !== false) {
      obj.isOpen = message.isOpen;
    }
    if (message.property1 !== "") {
      obj.property1 = message.property1;
    }
    if (message.property2 !== "") {
      obj.property2 = message.property2;
    }
    if (message.property3?.length) {
      obj.property3 = message.property3.map((e) => Math.round(e));
    }
    if (message.property4?.length) {
      obj.property4 = message.property4.map((e) => Math.round(e));
    }
    if (message.dayAddCount !== 0) {
      obj.dayAddCount = Math.round(message.dayAddCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LotteryMsg>, I>>(base?: I): LotteryMsg {
    return LotteryMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LotteryMsg>, I>>(object: I): LotteryMsg {
    const message = createBaseLotteryMsg();
    message.payedPoint = object.payedPoint ?? 0;
    message.totalCount = object.totalCount ?? 0;
    message.leftCount = object.leftCount ?? 0;
    message.dayMaxCount = object.dayMaxCount ?? 0;
    message.onceNeedPoint = object.onceNeedPoint ?? 0;
    message.leftMillis = object.leftMillis ?? "";
    message.isOpen = object.isOpen ?? false;
    message.property1 = object.property1 ?? "";
    message.property2 = object.property2 ?? "";
    message.property3 = object.property3?.map((e) => e) || [];
    message.property4 = object.property4?.map((e) => e) || [];
    message.dayAddCount = object.dayAddCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
