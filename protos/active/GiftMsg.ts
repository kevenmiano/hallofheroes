// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/GiftMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface GiftMsg {
  giftId: string;
  count: number;
  seflCount: number;
  price: number;
  discountPrice: number;
  giftName: string;
  limitCount: number;
  levelMsg: number[];
  itemMsg: number[];
  sort: number;
}

function createBaseGiftMsg(): GiftMsg {
  return {
    giftId: "",
    count: 0,
    seflCount: 0,
    price: 0,
    discountPrice: 0,
    giftName: "",
    limitCount: 0,
    levelMsg: [],
    itemMsg: [],
    sort: 0,
  };
}

export const GiftMsg: MessageFns<GiftMsg> = {
  encode(message: GiftMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== "") {
      writer.uint32(10).string(message.giftId);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    if (message.seflCount !== 0) {
      writer.uint32(24).int32(message.seflCount);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    if (message.discountPrice !== 0) {
      writer.uint32(40).int32(message.discountPrice);
    }
    if (message.giftName !== "") {
      writer.uint32(50).string(message.giftName);
    }
    if (message.limitCount !== 0) {
      writer.uint32(56).int32(message.limitCount);
    }
    writer.uint32(66).fork();
    for (const v of message.levelMsg) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.itemMsg) {
      writer.int32(v);
    }
    writer.join();
    if (message.sort !== 0) {
      writer.uint32(80).int32(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GiftMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGiftMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.seflCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.discountPrice = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.giftName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.limitCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.levelMsg.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.levelMsg.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.itemMsg.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.itemMsg.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GiftMsg {
    return {
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      seflCount: isSet(object.seflCount) ? globalThis.Number(object.seflCount) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      discountPrice: isSet(object.discountPrice) ? globalThis.Number(object.discountPrice) : 0,
      giftName: isSet(object.giftName) ? globalThis.String(object.giftName) : "",
      limitCount: isSet(object.limitCount) ? globalThis.Number(object.limitCount) : 0,
      levelMsg: globalThis.Array.isArray(object?.levelMsg) ? object.levelMsg.map((e: any) => globalThis.Number(e)) : [],
      itemMsg: globalThis.Array.isArray(object?.itemMsg) ? object.itemMsg.map((e: any) => globalThis.Number(e)) : [],
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
    };
  },

  toJSON(message: GiftMsg): unknown {
    const obj: any = {};
    if (message.giftId !== "") {
      obj.giftId = message.giftId;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.seflCount !== 0) {
      obj.seflCount = Math.round(message.seflCount);
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.discountPrice !== 0) {
      obj.discountPrice = Math.round(message.discountPrice);
    }
    if (message.giftName !== "") {
      obj.giftName = message.giftName;
    }
    if (message.limitCount !== 0) {
      obj.limitCount = Math.round(message.limitCount);
    }
    if (message.levelMsg?.length) {
      obj.levelMsg = message.levelMsg.map((e) => Math.round(e));
    }
    if (message.itemMsg?.length) {
      obj.itemMsg = message.itemMsg.map((e) => Math.round(e));
    }
    if (message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GiftMsg>, I>>(base?: I): GiftMsg {
    return GiftMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GiftMsg>, I>>(object: I): GiftMsg {
    const message = createBaseGiftMsg();
    message.giftId = object.giftId ?? "";
    message.count = object.count ?? 0;
    message.seflCount = object.seflCount ?? 0;
    message.price = object.price ?? 0;
    message.discountPrice = object.discountPrice ?? 0;
    message.giftName = object.giftName ?? "";
    message.limitCount = object.limitCount ?? 0;
    message.levelMsg = object.levelMsg?.map((e) => e) || [];
    message.itemMsg = object.itemMsg?.map((e) => e) || [];
    message.sort = object.sort ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
