// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: answerquestion/playeranswerquestionMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.answerquestion";

export interface playeranswerquestionMsg {
  userId: number;
  curOrder: number;
  currentScore: number;
  getEXP: number;
  playerAnswerSucCount: number;
  doubleBlessCount: number;
  wisdomHeartCount: number;
  choiceEyesCount: number;
  extraEXP: number;
  goDate: string;
}

function createBaseplayeranswerquestionMsg(): playeranswerquestionMsg {
  return {
    userId: 0,
    curOrder: 0,
    currentScore: 0,
    getEXP: 0,
    playerAnswerSucCount: 0,
    doubleBlessCount: 0,
    wisdomHeartCount: 0,
    choiceEyesCount: 0,
    extraEXP: 0,
    goDate: "",
  };
}

export const playeranswerquestionMsg: MessageFns<playeranswerquestionMsg> = {
  encode(message: playeranswerquestionMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.curOrder !== 0) {
      writer.uint32(16).int32(message.curOrder);
    }
    if (message.currentScore !== 0) {
      writer.uint32(24).int32(message.currentScore);
    }
    if (message.getEXP !== 0) {
      writer.uint32(32).int32(message.getEXP);
    }
    if (message.playerAnswerSucCount !== 0) {
      writer.uint32(40).int32(message.playerAnswerSucCount);
    }
    if (message.doubleBlessCount !== 0) {
      writer.uint32(48).int32(message.doubleBlessCount);
    }
    if (message.wisdomHeartCount !== 0) {
      writer.uint32(56).int32(message.wisdomHeartCount);
    }
    if (message.choiceEyesCount !== 0) {
      writer.uint32(64).int32(message.choiceEyesCount);
    }
    if (message.extraEXP !== 0) {
      writer.uint32(72).int32(message.extraEXP);
    }
    if (message.goDate !== "") {
      writer.uint32(82).string(message.goDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): playeranswerquestionMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseplayeranswerquestionMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.curOrder = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentScore = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.getEXP = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.playerAnswerSucCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.doubleBlessCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.wisdomHeartCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.choiceEyesCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.extraEXP = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.goDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): playeranswerquestionMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      curOrder: isSet(object.curOrder) ? globalThis.Number(object.curOrder) : 0,
      currentScore: isSet(object.currentScore) ? globalThis.Number(object.currentScore) : 0,
      getEXP: isSet(object.getEXP) ? globalThis.Number(object.getEXP) : 0,
      playerAnswerSucCount: isSet(object.playerAnswerSucCount) ? globalThis.Number(object.playerAnswerSucCount) : 0,
      doubleBlessCount: isSet(object.doubleBlessCount) ? globalThis.Number(object.doubleBlessCount) : 0,
      wisdomHeartCount: isSet(object.wisdomHeartCount) ? globalThis.Number(object.wisdomHeartCount) : 0,
      choiceEyesCount: isSet(object.choiceEyesCount) ? globalThis.Number(object.choiceEyesCount) : 0,
      extraEXP: isSet(object.extraEXP) ? globalThis.Number(object.extraEXP) : 0,
      goDate: isSet(object.goDate) ? globalThis.String(object.goDate) : "",
    };
  },

  toJSON(message: playeranswerquestionMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.curOrder !== 0) {
      obj.curOrder = Math.round(message.curOrder);
    }
    if (message.currentScore !== 0) {
      obj.currentScore = Math.round(message.currentScore);
    }
    if (message.getEXP !== 0) {
      obj.getEXP = Math.round(message.getEXP);
    }
    if (message.playerAnswerSucCount !== 0) {
      obj.playerAnswerSucCount = Math.round(message.playerAnswerSucCount);
    }
    if (message.doubleBlessCount !== 0) {
      obj.doubleBlessCount = Math.round(message.doubleBlessCount);
    }
    if (message.wisdomHeartCount !== 0) {
      obj.wisdomHeartCount = Math.round(message.wisdomHeartCount);
    }
    if (message.choiceEyesCount !== 0) {
      obj.choiceEyesCount = Math.round(message.choiceEyesCount);
    }
    if (message.extraEXP !== 0) {
      obj.extraEXP = Math.round(message.extraEXP);
    }
    if (message.goDate !== "") {
      obj.goDate = message.goDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<playeranswerquestionMsg>, I>>(base?: I): playeranswerquestionMsg {
    return playeranswerquestionMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<playeranswerquestionMsg>, I>>(object: I): playeranswerquestionMsg {
    const message = createBaseplayeranswerquestionMsg();
    message.userId = object.userId ?? 0;
    message.curOrder = object.curOrder ?? 0;
    message.currentScore = object.currentScore ?? 0;
    message.getEXP = object.getEXP ?? 0;
    message.playerAnswerSucCount = object.playerAnswerSucCount ?? 0;
    message.doubleBlessCount = object.doubleBlessCount ?? 0;
    message.wisdomHeartCount = object.wisdomHeartCount ?? 0;
    message.choiceEyesCount = object.choiceEyesCount ?? 0;
    message.extraEXP = object.extraEXP ?? 0;
    message.goDate = object.goDate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
