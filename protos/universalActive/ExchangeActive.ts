// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: universalActive/ExchangeActive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.universalActive";

export interface ExchangeActive {
  startTime: string;
  endTime: string;
  bagId: number;
  bagName: string;
  rewardItem: number[];
  needItem: number[];
}

function createBaseExchangeActive(): ExchangeActive {
  return { startTime: "", endTime: "", bagId: 0, bagName: "", rewardItem: [], needItem: [] };
}

export const ExchangeActive: MessageFns<ExchangeActive> = {
  encode(message: ExchangeActive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== "") {
      writer.uint32(10).string(message.startTime);
    }
    if (message.endTime !== "") {
      writer.uint32(18).string(message.endTime);
    }
    if (message.bagId !== 0) {
      writer.uint32(24).int32(message.bagId);
    }
    if (message.bagName !== "") {
      writer.uint32(34).string(message.bagName);
    }
    writer.uint32(42).fork();
    for (const v of message.rewardItem) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.needItem) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExchangeActive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExchangeActive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bagId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bagName = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.rewardItem.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rewardItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.needItem.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.needItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExchangeActive {
    return {
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      bagId: isSet(object.bagId) ? globalThis.Number(object.bagId) : 0,
      bagName: isSet(object.bagName) ? globalThis.String(object.bagName) : "",
      rewardItem: globalThis.Array.isArray(object?.rewardItem)
        ? object.rewardItem.map((e: any) => globalThis.Number(e))
        : [],
      needItem: globalThis.Array.isArray(object?.needItem) ? object.needItem.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ExchangeActive): unknown {
    const obj: any = {};
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.bagId !== 0) {
      obj.bagId = Math.round(message.bagId);
    }
    if (message.bagName !== "") {
      obj.bagName = message.bagName;
    }
    if (message.rewardItem?.length) {
      obj.rewardItem = message.rewardItem.map((e) => Math.round(e));
    }
    if (message.needItem?.length) {
      obj.needItem = message.needItem.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExchangeActive>, I>>(base?: I): ExchangeActive {
    return ExchangeActive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExchangeActive>, I>>(object: I): ExchangeActive {
    const message = createBaseExchangeActive();
    message.startTime = object.startTime ?? "";
    message.endTime = object.endTime ?? "";
    message.bagId = object.bagId ?? 0;
    message.bagName = object.bagName ?? "";
    message.rewardItem = object.rewardItem?.map((e) => e) || [];
    message.needItem = object.needItem?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
