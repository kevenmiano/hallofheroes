// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: carnival/LinkGameMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.carnival";

export interface LinkGameMsg {
  opType: number;
  aX: number;
  aY: number;
  bX: number;
  bY: number;
  score: number;
  time: number;
  strength: number;
  points: string;
  bombCount: number;
  resetCount: number;
  param1: number;
  tollgate: number;
  reward: string;
  combCount: number;
  addScore: number;
  pointValue: number;
  scoreValue: number[];
}

function createBaseLinkGameMsg(): LinkGameMsg {
  return {
    opType: 0,
    aX: 0,
    aY: 0,
    bX: 0,
    bY: 0,
    score: 0,
    time: 0,
    strength: 0,
    points: "",
    bombCount: 0,
    resetCount: 0,
    param1: 0,
    tollgate: 0,
    reward: "",
    combCount: 0,
    addScore: 0,
    pointValue: 0,
    scoreValue: [],
  };
}

export const LinkGameMsg: MessageFns<LinkGameMsg> = {
  encode(message: LinkGameMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opType !== 0) {
      writer.uint32(8).int32(message.opType);
    }
    if (message.aX !== 0) {
      writer.uint32(16).int32(message.aX);
    }
    if (message.aY !== 0) {
      writer.uint32(24).int32(message.aY);
    }
    if (message.bX !== 0) {
      writer.uint32(32).int32(message.bX);
    }
    if (message.bY !== 0) {
      writer.uint32(40).int32(message.bY);
    }
    if (message.score !== 0) {
      writer.uint32(48).int32(message.score);
    }
    if (message.time !== 0) {
      writer.uint32(56).int32(message.time);
    }
    if (message.strength !== 0) {
      writer.uint32(64).int32(message.strength);
    }
    if (message.points !== "") {
      writer.uint32(74).string(message.points);
    }
    if (message.bombCount !== 0) {
      writer.uint32(80).int32(message.bombCount);
    }
    if (message.resetCount !== 0) {
      writer.uint32(88).int32(message.resetCount);
    }
    if (message.param1 !== 0) {
      writer.uint32(96).int32(message.param1);
    }
    if (message.tollgate !== 0) {
      writer.uint32(104).int32(message.tollgate);
    }
    if (message.reward !== "") {
      writer.uint32(114).string(message.reward);
    }
    if (message.combCount !== 0) {
      writer.uint32(120).int32(message.combCount);
    }
    if (message.addScore !== 0) {
      writer.uint32(128).int32(message.addScore);
    }
    if (message.pointValue !== 0) {
      writer.uint32(136).int32(message.pointValue);
    }
    writer.uint32(146).fork();
    for (const v of message.scoreValue) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkGameMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkGameMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.aX = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.aY = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bX = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.bY = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.time = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.strength = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.points = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.bombCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.resetCount = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.tollgate = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.reward = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.combCount = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.addScore = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.pointValue = reader.int32();
          continue;
        }
        case 18: {
          if (tag === 144) {
            message.scoreValue.push(reader.int32());

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scoreValue.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkGameMsg {
    return {
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      aX: isSet(object.aX) ? globalThis.Number(object.aX) : 0,
      aY: isSet(object.aY) ? globalThis.Number(object.aY) : 0,
      bX: isSet(object.bX) ? globalThis.Number(object.bX) : 0,
      bY: isSet(object.bY) ? globalThis.Number(object.bY) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      strength: isSet(object.strength) ? globalThis.Number(object.strength) : 0,
      points: isSet(object.points) ? globalThis.String(object.points) : "",
      bombCount: isSet(object.bombCount) ? globalThis.Number(object.bombCount) : 0,
      resetCount: isSet(object.resetCount) ? globalThis.Number(object.resetCount) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      tollgate: isSet(object.tollgate) ? globalThis.Number(object.tollgate) : 0,
      reward: isSet(object.reward) ? globalThis.String(object.reward) : "",
      combCount: isSet(object.combCount) ? globalThis.Number(object.combCount) : 0,
      addScore: isSet(object.addScore) ? globalThis.Number(object.addScore) : 0,
      pointValue: isSet(object.pointValue) ? globalThis.Number(object.pointValue) : 0,
      scoreValue: globalThis.Array.isArray(object?.scoreValue)
        ? object.scoreValue.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: LinkGameMsg): unknown {
    const obj: any = {};
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.aX !== 0) {
      obj.aX = Math.round(message.aX);
    }
    if (message.aY !== 0) {
      obj.aY = Math.round(message.aY);
    }
    if (message.bX !== 0) {
      obj.bX = Math.round(message.bX);
    }
    if (message.bY !== 0) {
      obj.bY = Math.round(message.bY);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.strength !== 0) {
      obj.strength = Math.round(message.strength);
    }
    if (message.points !== "") {
      obj.points = message.points;
    }
    if (message.bombCount !== 0) {
      obj.bombCount = Math.round(message.bombCount);
    }
    if (message.resetCount !== 0) {
      obj.resetCount = Math.round(message.resetCount);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.tollgate !== 0) {
      obj.tollgate = Math.round(message.tollgate);
    }
    if (message.reward !== "") {
      obj.reward = message.reward;
    }
    if (message.combCount !== 0) {
      obj.combCount = Math.round(message.combCount);
    }
    if (message.addScore !== 0) {
      obj.addScore = Math.round(message.addScore);
    }
    if (message.pointValue !== 0) {
      obj.pointValue = Math.round(message.pointValue);
    }
    if (message.scoreValue?.length) {
      obj.scoreValue = message.scoreValue.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkGameMsg>, I>>(base?: I): LinkGameMsg {
    return LinkGameMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkGameMsg>, I>>(object: I): LinkGameMsg {
    const message = createBaseLinkGameMsg();
    message.opType = object.opType ?? 0;
    message.aX = object.aX ?? 0;
    message.aY = object.aY ?? 0;
    message.bX = object.bX ?? 0;
    message.bY = object.bY ?? 0;
    message.score = object.score ?? 0;
    message.time = object.time ?? 0;
    message.strength = object.strength ?? 0;
    message.points = object.points ?? "";
    message.bombCount = object.bombCount ?? 0;
    message.resetCount = object.resetCount ?? 0;
    message.param1 = object.param1 ?? 0;
    message.tollgate = object.tollgate ?? 0;
    message.reward = object.reward ?? "";
    message.combCount = object.combCount ?? 0;
    message.addScore = object.addScore ?? 0;
    message.pointValue = object.pointValue ?? 0;
    message.scoreValue = object.scoreValue?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
