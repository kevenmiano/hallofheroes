// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/BattleCreateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface BattleCreateMsg {
  mapTempId: number;
  proxyId: string;
  type: number;
  attackerNum: number;
  userSide: number;
  army: number[];
  reinforceCount: number;
  campaignId: number;
  capity: number;
  lastWound: number;
  nodeId: number;
  castleRoomId: number;
  serverName: string;
  defenceServerName: string;
  defenceUserId: number;
  campaignUuid: string;
  serverId: number;
  battleUid: string;
}

function createBaseBattleCreateMsg(): BattleCreateMsg {
  return {
    mapTempId: 0,
    proxyId: "",
    type: 0,
    attackerNum: 0,
    userSide: 0,
    army: [],
    reinforceCount: 0,
    campaignId: 0,
    capity: 0,
    lastWound: 0,
    nodeId: 0,
    castleRoomId: 0,
    serverName: "",
    defenceServerName: "",
    defenceUserId: 0,
    campaignUuid: "",
    serverId: 0,
    battleUid: "",
  };
}

export const BattleCreateMsg: MessageFns<BattleCreateMsg> = {
  encode(message: BattleCreateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mapTempId !== 0) {
      writer.uint32(8).int32(message.mapTempId);
    }
    if (message.proxyId !== "") {
      writer.uint32(18).string(message.proxyId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.attackerNum !== 0) {
      writer.uint32(32).int32(message.attackerNum);
    }
    if (message.userSide !== 0) {
      writer.uint32(40).int32(message.userSide);
    }
    writer.uint32(50).fork();
    for (const v of message.army) {
      writer.int32(v);
    }
    writer.join();
    if (message.reinforceCount !== 0) {
      writer.uint32(56).int32(message.reinforceCount);
    }
    if (message.campaignId !== 0) {
      writer.uint32(64).int32(message.campaignId);
    }
    if (message.capity !== 0) {
      writer.uint32(72).int32(message.capity);
    }
    if (message.lastWound !== 0) {
      writer.uint32(80).int32(message.lastWound);
    }
    if (message.nodeId !== 0) {
      writer.uint32(88).int32(message.nodeId);
    }
    if (message.castleRoomId !== 0) {
      writer.uint32(96).int32(message.castleRoomId);
    }
    if (message.serverName !== "") {
      writer.uint32(106).string(message.serverName);
    }
    if (message.defenceServerName !== "") {
      writer.uint32(114).string(message.defenceServerName);
    }
    if (message.defenceUserId !== 0) {
      writer.uint32(120).int32(message.defenceUserId);
    }
    if (message.campaignUuid !== "") {
      writer.uint32(130).string(message.campaignUuid);
    }
    if (message.serverId !== 0) {
      writer.uint32(136).int32(message.serverId);
    }
    if (message.battleUid !== "") {
      writer.uint32(146).string(message.battleUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleCreateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleCreateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mapTempId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proxyId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.attackerNum = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userSide = reader.int32();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.army.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.army.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.reinforceCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.capity = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.lastWound = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.castleRoomId = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.defenceServerName = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.defenceUserId = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.campaignUuid = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.serverId = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.battleUid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleCreateMsg {
    return {
      mapTempId: isSet(object.mapTempId) ? globalThis.Number(object.mapTempId) : 0,
      proxyId: isSet(object.proxyId) ? globalThis.String(object.proxyId) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      attackerNum: isSet(object.attackerNum) ? globalThis.Number(object.attackerNum) : 0,
      userSide: isSet(object.userSide) ? globalThis.Number(object.userSide) : 0,
      army: globalThis.Array.isArray(object?.army) ? object.army.map((e: any) => globalThis.Number(e)) : [],
      reinforceCount: isSet(object.reinforceCount) ? globalThis.Number(object.reinforceCount) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      capity: isSet(object.capity) ? globalThis.Number(object.capity) : 0,
      lastWound: isSet(object.lastWound) ? globalThis.Number(object.lastWound) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      castleRoomId: isSet(object.castleRoomId) ? globalThis.Number(object.castleRoomId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      defenceServerName: isSet(object.defenceServerName) ? globalThis.String(object.defenceServerName) : "",
      defenceUserId: isSet(object.defenceUserId) ? globalThis.Number(object.defenceUserId) : 0,
      campaignUuid: isSet(object.campaignUuid) ? globalThis.String(object.campaignUuid) : "",
      serverId: isSet(object.serverId) ? globalThis.Number(object.serverId) : 0,
      battleUid: isSet(object.battleUid) ? globalThis.String(object.battleUid) : "",
    };
  },

  toJSON(message: BattleCreateMsg): unknown {
    const obj: any = {};
    if (message.mapTempId !== 0) {
      obj.mapTempId = Math.round(message.mapTempId);
    }
    if (message.proxyId !== "") {
      obj.proxyId = message.proxyId;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.attackerNum !== 0) {
      obj.attackerNum = Math.round(message.attackerNum);
    }
    if (message.userSide !== 0) {
      obj.userSide = Math.round(message.userSide);
    }
    if (message.army?.length) {
      obj.army = message.army.map((e) => Math.round(e));
    }
    if (message.reinforceCount !== 0) {
      obj.reinforceCount = Math.round(message.reinforceCount);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.capity !== 0) {
      obj.capity = Math.round(message.capity);
    }
    if (message.lastWound !== 0) {
      obj.lastWound = Math.round(message.lastWound);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.castleRoomId !== 0) {
      obj.castleRoomId = Math.round(message.castleRoomId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.defenceServerName !== "") {
      obj.defenceServerName = message.defenceServerName;
    }
    if (message.defenceUserId !== 0) {
      obj.defenceUserId = Math.round(message.defenceUserId);
    }
    if (message.campaignUuid !== "") {
      obj.campaignUuid = message.campaignUuid;
    }
    if (message.serverId !== 0) {
      obj.serverId = Math.round(message.serverId);
    }
    if (message.battleUid !== "") {
      obj.battleUid = message.battleUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleCreateMsg>, I>>(base?: I): BattleCreateMsg {
    return BattleCreateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleCreateMsg>, I>>(object: I): BattleCreateMsg {
    const message = createBaseBattleCreateMsg();
    message.mapTempId = object.mapTempId ?? 0;
    message.proxyId = object.proxyId ?? "";
    message.type = object.type ?? 0;
    message.attackerNum = object.attackerNum ?? 0;
    message.userSide = object.userSide ?? 0;
    message.army = object.army?.map((e) => e) || [];
    message.reinforceCount = object.reinforceCount ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.capity = object.capity ?? 0;
    message.lastWound = object.lastWound ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.castleRoomId = object.castleRoomId ?? 0;
    message.serverName = object.serverName ?? "";
    message.defenceServerName = object.defenceServerName ?? "";
    message.defenceUserId = object.defenceUserId ?? 0;
    message.campaignUuid = object.campaignUuid ?? "";
    message.serverId = object.serverId ?? 0;
    message.battleUid = object.battleUid ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
