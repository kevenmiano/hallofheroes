// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vip/VipInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vip";

export interface VipInfoMsg {
  vipGp: number;
  vipGrade: number;
  isGainBuff: boolean;
  buffGainTime: string;
  buffEndTime: string;
  giftState: number[];
}

function createBaseVipInfoMsg(): VipInfoMsg {
  return {
    vipGp: 0,
    vipGrade: 0,
    isGainBuff: false,
    buffGainTime: "",
    buffEndTime: "",
    giftState: [],
  };
}

export const VipInfoMsg: MessageFns<VipInfoMsg> = {
  encode(
    message: VipInfoMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.vipGp !== 0) {
      writer.uint32(8).int32(message.vipGp);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(16).int32(message.vipGrade);
    }
    if (message.isGainBuff !== false) {
      writer.uint32(24).bool(message.isGainBuff);
    }
    if (message.buffGainTime !== "") {
      writer.uint32(34).string(message.buffGainTime);
    }
    if (message.buffEndTime !== "") {
      writer.uint32(42).string(message.buffEndTime);
    }
    writer.uint32(50).fork();
    for (const v of message.giftState) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VipInfoMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.vipGp = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isGainBuff = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.buffGainTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.buffEndTime = reader.string();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.giftState.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.giftState.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipInfoMsg {
    return {
      vipGp: isSet(object.vipGp) ? globalThis.Number(object.vipGp) : 0,
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
      isGainBuff: isSet(object.isGainBuff)
        ? globalThis.Boolean(object.isGainBuff)
        : false,
      buffGainTime: isSet(object.buffGainTime)
        ? globalThis.String(object.buffGainTime)
        : "",
      buffEndTime: isSet(object.buffEndTime)
        ? globalThis.String(object.buffEndTime)
        : "",
      giftState: globalThis.Array.isArray(object?.giftState)
        ? object.giftState.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: VipInfoMsg): unknown {
    const obj: any = {};
    if (message.vipGp !== 0) {
      obj.vipGp = Math.round(message.vipGp);
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    if (message.isGainBuff !== false) {
      obj.isGainBuff = message.isGainBuff;
    }
    if (message.buffGainTime !== "") {
      obj.buffGainTime = message.buffGainTime;
    }
    if (message.buffEndTime !== "") {
      obj.buffEndTime = message.buffEndTime;
    }
    if (message.giftState?.length) {
      obj.giftState = message.giftState.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipInfoMsg>, I>>(base?: I): VipInfoMsg {
    return VipInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipInfoMsg>, I>>(
    object: I,
  ): VipInfoMsg {
    const message = createBaseVipInfoMsg();
    message.vipGp = object.vipGp ?? 0;
    message.vipGrade = object.vipGrade ?? 0;
    message.isGainBuff = object.isGainBuff ?? false;
    message.buffGainTime = object.buffGainTime ?? "";
    message.buffEndTime = object.buffEndTime ?? "";
    message.giftState = object.giftState?.map((e) => e) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
