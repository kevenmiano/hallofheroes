// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: timer/TimerInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.timer";

export interface TimerInfoMsg {
  type: number;
  index: number;
  name: string;
  readyOpen: string;
  readyStop: string;
  finalOpen: string;
  finalStop: string;
  param1: string;
  param2: string;
  param3: string;
  signupTime: string;
}

function createBaseTimerInfoMsg(): TimerInfoMsg {
  return {
    type: 0,
    index: 0,
    name: "",
    readyOpen: "",
    readyStop: "",
    finalOpen: "",
    finalStop: "",
    param1: "",
    param2: "",
    param3: "",
    signupTime: "",
  };
}

export const TimerInfoMsg: MessageFns<TimerInfoMsg> = {
  encode(message: TimerInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.index !== 0) {
      writer.uint32(16).int32(message.index);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.readyOpen !== "") {
      writer.uint32(34).string(message.readyOpen);
    }
    if (message.readyStop !== "") {
      writer.uint32(42).string(message.readyStop);
    }
    if (message.finalOpen !== "") {
      writer.uint32(50).string(message.finalOpen);
    }
    if (message.finalStop !== "") {
      writer.uint32(58).string(message.finalStop);
    }
    if (message.param1 !== "") {
      writer.uint32(66).string(message.param1);
    }
    if (message.param2 !== "") {
      writer.uint32(74).string(message.param2);
    }
    if (message.param3 !== "") {
      writer.uint32(82).string(message.param3);
    }
    if (message.signupTime !== "") {
      writer.uint32(90).string(message.signupTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimerInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimerInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.readyOpen = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.readyStop = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.finalOpen = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finalStop = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.param1 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.param2 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.param3 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.signupTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimerInfoMsg {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readyOpen: isSet(object.readyOpen) ? globalThis.String(object.readyOpen) : "",
      readyStop: isSet(object.readyStop) ? globalThis.String(object.readyStop) : "",
      finalOpen: isSet(object.finalOpen) ? globalThis.String(object.finalOpen) : "",
      finalStop: isSet(object.finalStop) ? globalThis.String(object.finalStop) : "",
      param1: isSet(object.param1) ? globalThis.String(object.param1) : "",
      param2: isSet(object.param2) ? globalThis.String(object.param2) : "",
      param3: isSet(object.param3) ? globalThis.String(object.param3) : "",
      signupTime: isSet(object.signupTime) ? globalThis.String(object.signupTime) : "",
    };
  },

  toJSON(message: TimerInfoMsg): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readyOpen !== "") {
      obj.readyOpen = message.readyOpen;
    }
    if (message.readyStop !== "") {
      obj.readyStop = message.readyStop;
    }
    if (message.finalOpen !== "") {
      obj.finalOpen = message.finalOpen;
    }
    if (message.finalStop !== "") {
      obj.finalStop = message.finalStop;
    }
    if (message.param1 !== "") {
      obj.param1 = message.param1;
    }
    if (message.param2 !== "") {
      obj.param2 = message.param2;
    }
    if (message.param3 !== "") {
      obj.param3 = message.param3;
    }
    if (message.signupTime !== "") {
      obj.signupTime = message.signupTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimerInfoMsg>, I>>(base?: I): TimerInfoMsg {
    return TimerInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimerInfoMsg>, I>>(object: I): TimerInfoMsg {
    const message = createBaseTimerInfoMsg();
    message.type = object.type ?? 0;
    message.index = object.index ?? 0;
    message.name = object.name ?? "";
    message.readyOpen = object.readyOpen ?? "";
    message.readyStop = object.readyStop ?? "";
    message.finalOpen = object.finalOpen ?? "";
    message.finalStop = object.finalStop ?? "";
    message.param1 = object.param1 ?? "";
    message.param2 = object.param2 ?? "";
    message.param3 = object.param3 ?? "";
    message.signupTime = object.signupTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
