// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: guildcampaign/GuildWarInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.guildcampaign";

export interface GuildWarInfoMsg {
  consortiaId: number;
  consrotiaName: string;
  noviceCount: number;
  score: number;
  fightPower: number;
  param1: number;
  param2: number;
}

function createBaseGuildWarInfoMsg(): GuildWarInfoMsg {
  return { consortiaId: 0, consrotiaName: "", noviceCount: 0, score: 0, fightPower: 0, param1: 0, param2: 0 };
}

export const GuildWarInfoMsg: MessageFns<GuildWarInfoMsg> = {
  encode(message: GuildWarInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.consrotiaName !== "") {
      writer.uint32(18).string(message.consrotiaName);
    }
    if (message.noviceCount !== 0) {
      writer.uint32(24).int32(message.noviceCount);
    }
    if (message.score !== 0) {
      writer.uint32(32).int32(message.score);
    }
    if (message.fightPower !== 0) {
      writer.uint32(40).int32(message.fightPower);
    }
    if (message.param1 !== 0) {
      writer.uint32(48).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(56).int32(message.param2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GuildWarInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuildWarInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consrotiaName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.noviceCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fightPower = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GuildWarInfoMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consrotiaName: isSet(object.consrotiaName) ? globalThis.String(object.consrotiaName) : "",
      noviceCount: isSet(object.noviceCount) ? globalThis.Number(object.noviceCount) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      fightPower: isSet(object.fightPower) ? globalThis.Number(object.fightPower) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
    };
  },

  toJSON(message: GuildWarInfoMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consrotiaName !== "") {
      obj.consrotiaName = message.consrotiaName;
    }
    if (message.noviceCount !== 0) {
      obj.noviceCount = Math.round(message.noviceCount);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.fightPower !== 0) {
      obj.fightPower = Math.round(message.fightPower);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GuildWarInfoMsg>, I>>(base?: I): GuildWarInfoMsg {
    return GuildWarInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GuildWarInfoMsg>, I>>(object: I): GuildWarInfoMsg {
    const message = createBaseGuildWarInfoMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.consrotiaName = object.consrotiaName ?? "";
    message.noviceCount = object.noviceCount ?? 0;
    message.score = object.score ?? 0;
    message.fightPower = object.fightPower ?? 0;
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
