// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: gameplot/PlotInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.gameplot";

export interface PlotInfoMsg {
  index: number;
  direction: number;
  roleId: number;
  roleName: string;
  event: string;
  param: string;
  text: string;
  delayTime: number;
}

function createBasePlotInfoMsg(): PlotInfoMsg {
  return { index: 0, direction: 0, roleId: 0, roleName: "", event: "", param: "", text: "", delayTime: 0 };
}

export const PlotInfoMsg: MessageFns<PlotInfoMsg> = {
  encode(message: PlotInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    if (message.roleId !== 0) {
      writer.uint32(24).int32(message.roleId);
    }
    if (message.roleName !== "") {
      writer.uint32(34).string(message.roleName);
    }
    if (message.event !== "") {
      writer.uint32(42).string(message.event);
    }
    if (message.param !== "") {
      writer.uint32(50).string(message.param);
    }
    if (message.text !== "") {
      writer.uint32(58).string(message.text);
    }
    if (message.delayTime !== 0) {
      writer.uint32(64).int32(message.delayTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlotInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlotInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.roleId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.roleName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.event = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.param = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.delayTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlotInfoMsg {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      direction: isSet(object.direction) ? globalThis.Number(object.direction) : 0,
      roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : 0,
      roleName: isSet(object.roleName) ? globalThis.String(object.roleName) : "",
      event: isSet(object.event) ? globalThis.String(object.event) : "",
      param: isSet(object.param) ? globalThis.String(object.param) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      delayTime: isSet(object.delayTime) ? globalThis.Number(object.delayTime) : 0,
    };
  },

  toJSON(message: PlotInfoMsg): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.direction !== 0) {
      obj.direction = Math.round(message.direction);
    }
    if (message.roleId !== 0) {
      obj.roleId = Math.round(message.roleId);
    }
    if (message.roleName !== "") {
      obj.roleName = message.roleName;
    }
    if (message.event !== "") {
      obj.event = message.event;
    }
    if (message.param !== "") {
      obj.param = message.param;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.delayTime !== 0) {
      obj.delayTime = Math.round(message.delayTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlotInfoMsg>, I>>(base?: I): PlotInfoMsg {
    return PlotInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlotInfoMsg>, I>>(object: I): PlotInfoMsg {
    const message = createBasePlotInfoMsg();
    message.index = object.index ?? 0;
    message.direction = object.direction ?? 0;
    message.roleId = object.roleId ?? 0;
    message.roleName = object.roleName ?? "";
    message.event = object.event ?? "";
    message.param = object.param ?? "";
    message.text = object.text ?? "";
    message.delayTime = object.delayTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
