// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vehicle/VehicleCampaignDetailMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vehicle";

export interface VehicleCampaignDetailMsg {
  campaignId: string;
  campaignName: string;
  redTeamScroe: string;
  blueTeamScroe: string;
  myScroe: string;
  remainsTiem: string;
  winner: string;
  scroeList: number[];
  myOrder: string;
  myUserid: string;
  hasReward: string;
  myKillCount: string;
  campaignStartTime: string;
}

function createBaseVehicleCampaignDetailMsg(): VehicleCampaignDetailMsg {
  return {
    campaignId: "",
    campaignName: "",
    redTeamScroe: "",
    blueTeamScroe: "",
    myScroe: "",
    remainsTiem: "",
    winner: "",
    scroeList: [],
    myOrder: "",
    myUserid: "",
    hasReward: "",
    myKillCount: "",
    campaignStartTime: "",
  };
}

export const VehicleCampaignDetailMsg: MessageFns<VehicleCampaignDetailMsg> = {
  encode(message: VehicleCampaignDetailMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    if (message.campaignName !== "") {
      writer.uint32(18).string(message.campaignName);
    }
    if (message.redTeamScroe !== "") {
      writer.uint32(26).string(message.redTeamScroe);
    }
    if (message.blueTeamScroe !== "") {
      writer.uint32(34).string(message.blueTeamScroe);
    }
    if (message.myScroe !== "") {
      writer.uint32(42).string(message.myScroe);
    }
    if (message.remainsTiem !== "") {
      writer.uint32(50).string(message.remainsTiem);
    }
    if (message.winner !== "") {
      writer.uint32(58).string(message.winner);
    }
    writer.uint32(66).fork();
    for (const v of message.scroeList) {
      writer.int32(v);
    }
    writer.join();
    if (message.myOrder !== "") {
      writer.uint32(74).string(message.myOrder);
    }
    if (message.myUserid !== "") {
      writer.uint32(82).string(message.myUserid);
    }
    if (message.hasReward !== "") {
      writer.uint32(90).string(message.hasReward);
    }
    if (message.myKillCount !== "") {
      writer.uint32(98).string(message.myKillCount);
    }
    if (message.campaignStartTime !== "") {
      writer.uint32(106).string(message.campaignStartTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleCampaignDetailMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleCampaignDetailMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.campaignName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.redTeamScroe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.blueTeamScroe = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.myScroe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.remainsTiem = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.winner = reader.string();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.scroeList.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scroeList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.myOrder = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.myUserid = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.hasReward = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.myKillCount = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.campaignStartTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleCampaignDetailMsg {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      campaignName: isSet(object.campaignName) ? globalThis.String(object.campaignName) : "",
      redTeamScroe: isSet(object.redTeamScroe) ? globalThis.String(object.redTeamScroe) : "",
      blueTeamScroe: isSet(object.blueTeamScroe) ? globalThis.String(object.blueTeamScroe) : "",
      myScroe: isSet(object.myScroe) ? globalThis.String(object.myScroe) : "",
      remainsTiem: isSet(object.remainsTiem) ? globalThis.String(object.remainsTiem) : "",
      winner: isSet(object.winner) ? globalThis.String(object.winner) : "",
      scroeList: globalThis.Array.isArray(object?.scroeList)
        ? object.scroeList.map((e: any) => globalThis.Number(e))
        : [],
      myOrder: isSet(object.myOrder) ? globalThis.String(object.myOrder) : "",
      myUserid: isSet(object.myUserid) ? globalThis.String(object.myUserid) : "",
      hasReward: isSet(object.hasReward) ? globalThis.String(object.hasReward) : "",
      myKillCount: isSet(object.myKillCount) ? globalThis.String(object.myKillCount) : "",
      campaignStartTime: isSet(object.campaignStartTime) ? globalThis.String(object.campaignStartTime) : "",
    };
  },

  toJSON(message: VehicleCampaignDetailMsg): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.campaignName !== "") {
      obj.campaignName = message.campaignName;
    }
    if (message.redTeamScroe !== "") {
      obj.redTeamScroe = message.redTeamScroe;
    }
    if (message.blueTeamScroe !== "") {
      obj.blueTeamScroe = message.blueTeamScroe;
    }
    if (message.myScroe !== "") {
      obj.myScroe = message.myScroe;
    }
    if (message.remainsTiem !== "") {
      obj.remainsTiem = message.remainsTiem;
    }
    if (message.winner !== "") {
      obj.winner = message.winner;
    }
    if (message.scroeList?.length) {
      obj.scroeList = message.scroeList.map((e) => Math.round(e));
    }
    if (message.myOrder !== "") {
      obj.myOrder = message.myOrder;
    }
    if (message.myUserid !== "") {
      obj.myUserid = message.myUserid;
    }
    if (message.hasReward !== "") {
      obj.hasReward = message.hasReward;
    }
    if (message.myKillCount !== "") {
      obj.myKillCount = message.myKillCount;
    }
    if (message.campaignStartTime !== "") {
      obj.campaignStartTime = message.campaignStartTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleCampaignDetailMsg>, I>>(base?: I): VehicleCampaignDetailMsg {
    return VehicleCampaignDetailMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleCampaignDetailMsg>, I>>(object: I): VehicleCampaignDetailMsg {
    const message = createBaseVehicleCampaignDetailMsg();
    message.campaignId = object.campaignId ?? "";
    message.campaignName = object.campaignName ?? "";
    message.redTeamScroe = object.redTeamScroe ?? "";
    message.blueTeamScroe = object.blueTeamScroe ?? "";
    message.myScroe = object.myScroe ?? "";
    message.remainsTiem = object.remainsTiem ?? "";
    message.winner = object.winner ?? "";
    message.scroeList = object.scroeList?.map((e) => e) || [];
    message.myOrder = object.myOrder ?? "";
    message.myUserid = object.myUserid ?? "";
    message.hasReward = object.hasReward ?? "";
    message.myKillCount = object.myKillCount ?? "";
    message.campaignStartTime = object.campaignStartTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
