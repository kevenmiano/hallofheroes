// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: login/playerLoginRsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.login";

export interface playerLoginRsp {
  userName: string;
  site: string;
  result: boolean;
  message: string;
  userId: number;
  gateIp: string;
  port: number;
  todayFirstLogin: boolean;
}

function createBaseplayerLoginRsp(): playerLoginRsp {
  return { userName: "", site: "", result: false, message: "", userId: 0, gateIp: "", port: 0, todayFirstLogin: false };
}

export const playerLoginRsp: MessageFns<playerLoginRsp> = {
  encode(message: playerLoginRsp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.site !== "") {
      writer.uint32(18).string(message.site);
    }
    if (message.result !== false) {
      writer.uint32(24).bool(message.result);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    if (message.gateIp !== "") {
      writer.uint32(50).string(message.gateIp);
    }
    if (message.port !== 0) {
      writer.uint32(56).int32(message.port);
    }
    if (message.todayFirstLogin !== false) {
      writer.uint32(64).bool(message.todayFirstLogin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): playerLoginRsp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseplayerLoginRsp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.site = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gateIp = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.port = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.todayFirstLogin = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): playerLoginRsp {
    return {
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      gateIp: isSet(object.gateIp) ? globalThis.String(object.gateIp) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      todayFirstLogin: isSet(object.todayFirstLogin) ? globalThis.Boolean(object.todayFirstLogin) : false,
    };
  },

  toJSON(message: playerLoginRsp): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.gateIp !== "") {
      obj.gateIp = message.gateIp;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.todayFirstLogin !== false) {
      obj.todayFirstLogin = message.todayFirstLogin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<playerLoginRsp>, I>>(base?: I): playerLoginRsp {
    return playerLoginRsp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<playerLoginRsp>, I>>(object: I): playerLoginRsp {
    const message = createBaseplayerLoginRsp();
    message.userName = object.userName ?? "";
    message.site = object.site ?? "";
    message.result = object.result ?? false;
    message.message = object.message ?? "";
    message.userId = object.userId ?? 0;
    message.gateIp = object.gateIp ?? "";
    message.port = object.port ?? 0;
    message.todayFirstLogin = object.todayFirstLogin ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
