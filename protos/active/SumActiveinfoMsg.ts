// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/SumActiveinfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface SumActiveinfoMsg {
  activeId: string;
  beginDate: string;
  endDate: string;
  title: string;
  detail: string;
  conditionDetail: string;
  getway: number;
  packages: number[];
  activeType: number;
  startTime: string;
  stopTime: string;
  order: number;
  appendParam: string;
}

function createBaseSumActiveinfoMsg(): SumActiveinfoMsg {
  return {
    activeId: "",
    beginDate: "",
    endDate: "",
    title: "",
    detail: "",
    conditionDetail: "",
    getway: 0,
    packages: [],
    activeType: 0,
    startTime: "",
    stopTime: "",
    order: 0,
    appendParam: "",
  };
}

export const SumActiveinfoMsg: MessageFns<SumActiveinfoMsg> = {
  encode(message: SumActiveinfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activeId !== "") {
      writer.uint32(10).string(message.activeId);
    }
    if (message.beginDate !== "") {
      writer.uint32(18).string(message.beginDate);
    }
    if (message.endDate !== "") {
      writer.uint32(26).string(message.endDate);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.detail !== "") {
      writer.uint32(42).string(message.detail);
    }
    if (message.conditionDetail !== "") {
      writer.uint32(50).string(message.conditionDetail);
    }
    if (message.getway !== 0) {
      writer.uint32(56).int32(message.getway);
    }
    writer.uint32(66).fork();
    for (const v of message.packages) {
      writer.int32(v);
    }
    writer.join();
    if (message.activeType !== 0) {
      writer.uint32(72).int32(message.activeType);
    }
    if (message.startTime !== "") {
      writer.uint32(82).string(message.startTime);
    }
    if (message.stopTime !== "") {
      writer.uint32(90).string(message.stopTime);
    }
    if (message.order !== 0) {
      writer.uint32(96).int32(message.order);
    }
    if (message.appendParam !== "") {
      writer.uint32(106).string(message.appendParam);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SumActiveinfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSumActiveinfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.beginDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.detail = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.conditionDetail = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.getway = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.packages.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.packages.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.activeType = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stopTime = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.appendParam = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SumActiveinfoMsg {
    return {
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      beginDate: isSet(object.beginDate) ? globalThis.String(object.beginDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      conditionDetail: isSet(object.conditionDetail) ? globalThis.String(object.conditionDetail) : "",
      getway: isSet(object.getway) ? globalThis.Number(object.getway) : 0,
      packages: globalThis.Array.isArray(object?.packages) ? object.packages.map((e: any) => globalThis.Number(e)) : [],
      activeType: isSet(object.activeType) ? globalThis.Number(object.activeType) : 0,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      stopTime: isSet(object.stopTime) ? globalThis.String(object.stopTime) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      appendParam: isSet(object.appendParam) ? globalThis.String(object.appendParam) : "",
    };
  },

  toJSON(message: SumActiveinfoMsg): unknown {
    const obj: any = {};
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.beginDate !== "") {
      obj.beginDate = message.beginDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.conditionDetail !== "") {
      obj.conditionDetail = message.conditionDetail;
    }
    if (message.getway !== 0) {
      obj.getway = Math.round(message.getway);
    }
    if (message.packages?.length) {
      obj.packages = message.packages.map((e) => Math.round(e));
    }
    if (message.activeType !== 0) {
      obj.activeType = Math.round(message.activeType);
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.stopTime !== "") {
      obj.stopTime = message.stopTime;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.appendParam !== "") {
      obj.appendParam = message.appendParam;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SumActiveinfoMsg>, I>>(base?: I): SumActiveinfoMsg {
    return SumActiveinfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SumActiveinfoMsg>, I>>(object: I): SumActiveinfoMsg {
    const message = createBaseSumActiveinfoMsg();
    message.activeId = object.activeId ?? "";
    message.beginDate = object.beginDate ?? "";
    message.endDate = object.endDate ?? "";
    message.title = object.title ?? "";
    message.detail = object.detail ?? "";
    message.conditionDetail = object.conditionDetail ?? "";
    message.getway = object.getway ?? 0;
    message.packages = object.packages?.map((e) => e) || [];
    message.activeType = object.activeType ?? 0;
    message.startTime = object.startTime ?? "";
    message.stopTime = object.stopTime ?? "";
    message.order = object.order ?? 0;
    message.appendParam = object.appendParam ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
