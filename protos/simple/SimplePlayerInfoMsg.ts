// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/SimplePlayerInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface SimplePlayerInfoMsg {
  userId: number;
  nickName: string;
  isExist: number;
  sexs: number;
  pics: number;
  camp: number;
  state: number;
  consortiaID: number;
  strategy: string;
  consortiaName: string;
  consortiaOffer: number;
  claimId: number;
  claimName: string;
  grades: number;
  gp: number;
  repute: number;
  logOutTime: string;
  dutyId: number;
  parameter1: number;
  gpOrder: number;
  fightingCapacity: number;
  matchWin: number;
  matchFailed: number;
  right: number;
  challengeRank: number;
  job: number;
  consortiaTotalOffer: number;
  storeGrade: number;
  storeGp: number;
  isTeamPlayer: boolean;
  role: number;
  isVip: boolean;
  vipType: number;
  isInwar: number;
  headId: number;
  appellId: number;
  serverName: string;
  vipGrade: number;
  challengeScore: number;
  heroTempId: number;
  talentGrade: number;
  meritorGrade: number;
  honorGrade: number;
  devourGrade: number;
  frameId: number;
  consortiaBuild: number;
  consortiaTotalBuild: number;
  marState: number;
  mateName: string;
  ringLevel: number;
}

function createBaseSimplePlayerInfoMsg(): SimplePlayerInfoMsg {
  return {
    userId: 0,
    nickName: "",
    isExist: 0,
    sexs: 0,
    pics: 0,
    camp: 0,
    state: 0,
    consortiaID: 0,
    strategy: "",
    consortiaName: "",
    consortiaOffer: 0,
    claimId: 0,
    claimName: "",
    grades: 0,
    gp: 0,
    repute: 0,
    logOutTime: "",
    dutyId: 0,
    parameter1: 0,
    gpOrder: 0,
    fightingCapacity: 0,
    matchWin: 0,
    matchFailed: 0,
    right: 0,
    challengeRank: 0,
    job: 0,
    consortiaTotalOffer: 0,
    storeGrade: 0,
    storeGp: 0,
    isTeamPlayer: false,
    role: 0,
    isVip: false,
    vipType: 0,
    isInwar: 0,
    headId: 0,
    appellId: 0,
    serverName: "",
    vipGrade: 0,
    challengeScore: 0,
    heroTempId: 0,
    talentGrade: 0,
    meritorGrade: 0,
    honorGrade: 0,
    devourGrade: 0,
    frameId: 0,
    consortiaBuild: 0,
    consortiaTotalBuild: 0,
    marState: 0,
    mateName: "",
    ringLevel: 0,
  };
}

export const SimplePlayerInfoMsg: MessageFns<SimplePlayerInfoMsg> = {
  encode(message: SimplePlayerInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.isExist !== 0) {
      writer.uint32(24).int32(message.isExist);
    }
    if (message.sexs !== 0) {
      writer.uint32(32).int32(message.sexs);
    }
    if (message.pics !== 0) {
      writer.uint32(40).int32(message.pics);
    }
    if (message.camp !== 0) {
      writer.uint32(48).int32(message.camp);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.consortiaID !== 0) {
      writer.uint32(64).int32(message.consortiaID);
    }
    if (message.strategy !== "") {
      writer.uint32(74).string(message.strategy);
    }
    if (message.consortiaName !== "") {
      writer.uint32(82).string(message.consortiaName);
    }
    if (message.consortiaOffer !== 0) {
      writer.uint32(88).int32(message.consortiaOffer);
    }
    if (message.claimId !== 0) {
      writer.uint32(96).int32(message.claimId);
    }
    if (message.claimName !== "") {
      writer.uint32(106).string(message.claimName);
    }
    if (message.grades !== 0) {
      writer.uint32(112).int32(message.grades);
    }
    if (message.gp !== 0) {
      writer.uint32(120).int32(message.gp);
    }
    if (message.repute !== 0) {
      writer.uint32(128).int32(message.repute);
    }
    if (message.logOutTime !== "") {
      writer.uint32(138).string(message.logOutTime);
    }
    if (message.dutyId !== 0) {
      writer.uint32(144).int32(message.dutyId);
    }
    if (message.parameter1 !== 0) {
      writer.uint32(152).int32(message.parameter1);
    }
    if (message.gpOrder !== 0) {
      writer.uint32(160).int32(message.gpOrder);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(168).int32(message.fightingCapacity);
    }
    if (message.matchWin !== 0) {
      writer.uint32(176).int32(message.matchWin);
    }
    if (message.matchFailed !== 0) {
      writer.uint32(184).int32(message.matchFailed);
    }
    if (message.right !== 0) {
      writer.uint32(192).int32(message.right);
    }
    if (message.challengeRank !== 0) {
      writer.uint32(200).int32(message.challengeRank);
    }
    if (message.job !== 0) {
      writer.uint32(208).int32(message.job);
    }
    if (message.consortiaTotalOffer !== 0) {
      writer.uint32(216).int32(message.consortiaTotalOffer);
    }
    if (message.storeGrade !== 0) {
      writer.uint32(224).int32(message.storeGrade);
    }
    if (message.storeGp !== 0) {
      writer.uint32(232).int32(message.storeGp);
    }
    if (message.isTeamPlayer !== false) {
      writer.uint32(240).bool(message.isTeamPlayer);
    }
    if (message.role !== 0) {
      writer.uint32(248).int32(message.role);
    }
    if (message.isVip !== false) {
      writer.uint32(256).bool(message.isVip);
    }
    if (message.vipType !== 0) {
      writer.uint32(264).int32(message.vipType);
    }
    if (message.isInwar !== 0) {
      writer.uint32(272).int32(message.isInwar);
    }
    if (message.headId !== 0) {
      writer.uint32(280).int32(message.headId);
    }
    if (message.appellId !== 0) {
      writer.uint32(288).int32(message.appellId);
    }
    if (message.serverName !== "") {
      writer.uint32(298).string(message.serverName);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(304).int32(message.vipGrade);
    }
    if (message.challengeScore !== 0) {
      writer.uint32(312).int32(message.challengeScore);
    }
    if (message.heroTempId !== 0) {
      writer.uint32(320).int32(message.heroTempId);
    }
    if (message.talentGrade !== 0) {
      writer.uint32(328).int32(message.talentGrade);
    }
    if (message.meritorGrade !== 0) {
      writer.uint32(336).int32(message.meritorGrade);
    }
    if (message.honorGrade !== 0) {
      writer.uint32(344).int32(message.honorGrade);
    }
    if (message.devourGrade !== 0) {
      writer.uint32(352).int32(message.devourGrade);
    }
    if (message.frameId !== 0) {
      writer.uint32(360).int32(message.frameId);
    }
    if (message.consortiaBuild !== 0) {
      writer.uint32(368).int32(message.consortiaBuild);
    }
    if (message.consortiaTotalBuild !== 0) {
      writer.uint32(376).int32(message.consortiaTotalBuild);
    }
    if (message.marState !== 0) {
      writer.uint32(384).int32(message.marState);
    }
    if (message.mateName !== "") {
      writer.uint32(394).string(message.mateName);
    }
    if (message.ringLevel !== 0) {
      writer.uint32(400).int32(message.ringLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimplePlayerInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimplePlayerInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isExist = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sexs = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pics = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.camp = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.consortiaID = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.strategy = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.consortiaOffer = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.claimId = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.claimName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.gp = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.repute = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.logOutTime = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.dutyId = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.parameter1 = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.gpOrder = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.matchWin = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.matchFailed = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.right = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.challengeRank = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.consortiaTotalOffer = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.storeGrade = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.storeGp = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isTeamPlayer = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.role = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.isInwar = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.challengeScore = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.heroTempId = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.talentGrade = reader.int32();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.meritorGrade = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.honorGrade = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.devourGrade = reader.int32();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.frameId = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.consortiaBuild = reader.int32();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.consortiaTotalBuild = reader.int32();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.marState = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.mateName = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.ringLevel = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimplePlayerInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      isExist: isSet(object.isExist) ? globalThis.Number(object.isExist) : 0,
      sexs: isSet(object.sexs) ? globalThis.Number(object.sexs) : 0,
      pics: isSet(object.pics) ? globalThis.Number(object.pics) : 0,
      camp: isSet(object.camp) ? globalThis.Number(object.camp) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      consortiaID: isSet(object.consortiaID) ? globalThis.Number(object.consortiaID) : 0,
      strategy: isSet(object.strategy) ? globalThis.String(object.strategy) : "",
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      consortiaOffer: isSet(object.consortiaOffer) ? globalThis.Number(object.consortiaOffer) : 0,
      claimId: isSet(object.claimId) ? globalThis.Number(object.claimId) : 0,
      claimName: isSet(object.claimName) ? globalThis.String(object.claimName) : "",
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      gp: isSet(object.gp) ? globalThis.Number(object.gp) : 0,
      repute: isSet(object.repute) ? globalThis.Number(object.repute) : 0,
      logOutTime: isSet(object.logOutTime) ? globalThis.String(object.logOutTime) : "",
      dutyId: isSet(object.dutyId) ? globalThis.Number(object.dutyId) : 0,
      parameter1: isSet(object.parameter1) ? globalThis.Number(object.parameter1) : 0,
      gpOrder: isSet(object.gpOrder) ? globalThis.Number(object.gpOrder) : 0,
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      matchWin: isSet(object.matchWin) ? globalThis.Number(object.matchWin) : 0,
      matchFailed: isSet(object.matchFailed) ? globalThis.Number(object.matchFailed) : 0,
      right: isSet(object.right) ? globalThis.Number(object.right) : 0,
      challengeRank: isSet(object.challengeRank) ? globalThis.Number(object.challengeRank) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      consortiaTotalOffer: isSet(object.consortiaTotalOffer) ? globalThis.Number(object.consortiaTotalOffer) : 0,
      storeGrade: isSet(object.storeGrade) ? globalThis.Number(object.storeGrade) : 0,
      storeGp: isSet(object.storeGp) ? globalThis.Number(object.storeGp) : 0,
      isTeamPlayer: isSet(object.isTeamPlayer) ? globalThis.Boolean(object.isTeamPlayer) : false,
      role: isSet(object.role) ? globalThis.Number(object.role) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      isInwar: isSet(object.isInwar) ? globalThis.Number(object.isInwar) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
      challengeScore: isSet(object.challengeScore) ? globalThis.Number(object.challengeScore) : 0,
      heroTempId: isSet(object.heroTempId) ? globalThis.Number(object.heroTempId) : 0,
      talentGrade: isSet(object.talentGrade) ? globalThis.Number(object.talentGrade) : 0,
      meritorGrade: isSet(object.meritorGrade) ? globalThis.Number(object.meritorGrade) : 0,
      honorGrade: isSet(object.honorGrade) ? globalThis.Number(object.honorGrade) : 0,
      devourGrade: isSet(object.devourGrade) ? globalThis.Number(object.devourGrade) : 0,
      frameId: isSet(object.frameId) ? globalThis.Number(object.frameId) : 0,
      consortiaBuild: isSet(object.consortiaBuild) ? globalThis.Number(object.consortiaBuild) : 0,
      consortiaTotalBuild: isSet(object.consortiaTotalBuild) ? globalThis.Number(object.consortiaTotalBuild) : 0,
      marState: isSet(object.marState) ? globalThis.Number(object.marState) : 0,
      mateName: isSet(object.mateName) ? globalThis.String(object.mateName) : "",
      ringLevel: isSet(object.ringLevel) ? globalThis.Number(object.ringLevel) : 0,
    };
  },

  toJSON(message: SimplePlayerInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.isExist !== 0) {
      obj.isExist = Math.round(message.isExist);
    }
    if (message.sexs !== 0) {
      obj.sexs = Math.round(message.sexs);
    }
    if (message.pics !== 0) {
      obj.pics = Math.round(message.pics);
    }
    if (message.camp !== 0) {
      obj.camp = Math.round(message.camp);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.consortiaID !== 0) {
      obj.consortiaID = Math.round(message.consortiaID);
    }
    if (message.strategy !== "") {
      obj.strategy = message.strategy;
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.consortiaOffer !== 0) {
      obj.consortiaOffer = Math.round(message.consortiaOffer);
    }
    if (message.claimId !== 0) {
      obj.claimId = Math.round(message.claimId);
    }
    if (message.claimName !== "") {
      obj.claimName = message.claimName;
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.gp !== 0) {
      obj.gp = Math.round(message.gp);
    }
    if (message.repute !== 0) {
      obj.repute = Math.round(message.repute);
    }
    if (message.logOutTime !== "") {
      obj.logOutTime = message.logOutTime;
    }
    if (message.dutyId !== 0) {
      obj.dutyId = Math.round(message.dutyId);
    }
    if (message.parameter1 !== 0) {
      obj.parameter1 = Math.round(message.parameter1);
    }
    if (message.gpOrder !== 0) {
      obj.gpOrder = Math.round(message.gpOrder);
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.matchWin !== 0) {
      obj.matchWin = Math.round(message.matchWin);
    }
    if (message.matchFailed !== 0) {
      obj.matchFailed = Math.round(message.matchFailed);
    }
    if (message.right !== 0) {
      obj.right = Math.round(message.right);
    }
    if (message.challengeRank !== 0) {
      obj.challengeRank = Math.round(message.challengeRank);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.consortiaTotalOffer !== 0) {
      obj.consortiaTotalOffer = Math.round(message.consortiaTotalOffer);
    }
    if (message.storeGrade !== 0) {
      obj.storeGrade = Math.round(message.storeGrade);
    }
    if (message.storeGp !== 0) {
      obj.storeGp = Math.round(message.storeGp);
    }
    if (message.isTeamPlayer !== false) {
      obj.isTeamPlayer = message.isTeamPlayer;
    }
    if (message.role !== 0) {
      obj.role = Math.round(message.role);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.isInwar !== 0) {
      obj.isInwar = Math.round(message.isInwar);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    if (message.challengeScore !== 0) {
      obj.challengeScore = Math.round(message.challengeScore);
    }
    if (message.heroTempId !== 0) {
      obj.heroTempId = Math.round(message.heroTempId);
    }
    if (message.talentGrade !== 0) {
      obj.talentGrade = Math.round(message.talentGrade);
    }
    if (message.meritorGrade !== 0) {
      obj.meritorGrade = Math.round(message.meritorGrade);
    }
    if (message.honorGrade !== 0) {
      obj.honorGrade = Math.round(message.honorGrade);
    }
    if (message.devourGrade !== 0) {
      obj.devourGrade = Math.round(message.devourGrade);
    }
    if (message.frameId !== 0) {
      obj.frameId = Math.round(message.frameId);
    }
    if (message.consortiaBuild !== 0) {
      obj.consortiaBuild = Math.round(message.consortiaBuild);
    }
    if (message.consortiaTotalBuild !== 0) {
      obj.consortiaTotalBuild = Math.round(message.consortiaTotalBuild);
    }
    if (message.marState !== 0) {
      obj.marState = Math.round(message.marState);
    }
    if (message.mateName !== "") {
      obj.mateName = message.mateName;
    }
    if (message.ringLevel !== 0) {
      obj.ringLevel = Math.round(message.ringLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimplePlayerInfoMsg>, I>>(base?: I): SimplePlayerInfoMsg {
    return SimplePlayerInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimplePlayerInfoMsg>, I>>(object: I): SimplePlayerInfoMsg {
    const message = createBaseSimplePlayerInfoMsg();
    message.userId = object.userId ?? 0;
    message.nickName = object.nickName ?? "";
    message.isExist = object.isExist ?? 0;
    message.sexs = object.sexs ?? 0;
    message.pics = object.pics ?? 0;
    message.camp = object.camp ?? 0;
    message.state = object.state ?? 0;
    message.consortiaID = object.consortiaID ?? 0;
    message.strategy = object.strategy ?? "";
    message.consortiaName = object.consortiaName ?? "";
    message.consortiaOffer = object.consortiaOffer ?? 0;
    message.claimId = object.claimId ?? 0;
    message.claimName = object.claimName ?? "";
    message.grades = object.grades ?? 0;
    message.gp = object.gp ?? 0;
    message.repute = object.repute ?? 0;
    message.logOutTime = object.logOutTime ?? "";
    message.dutyId = object.dutyId ?? 0;
    message.parameter1 = object.parameter1 ?? 0;
    message.gpOrder = object.gpOrder ?? 0;
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.matchWin = object.matchWin ?? 0;
    message.matchFailed = object.matchFailed ?? 0;
    message.right = object.right ?? 0;
    message.challengeRank = object.challengeRank ?? 0;
    message.job = object.job ?? 0;
    message.consortiaTotalOffer = object.consortiaTotalOffer ?? 0;
    message.storeGrade = object.storeGrade ?? 0;
    message.storeGp = object.storeGp ?? 0;
    message.isTeamPlayer = object.isTeamPlayer ?? false;
    message.role = object.role ?? 0;
    message.isVip = object.isVip ?? false;
    message.vipType = object.vipType ?? 0;
    message.isInwar = object.isInwar ?? 0;
    message.headId = object.headId ?? 0;
    message.appellId = object.appellId ?? 0;
    message.serverName = object.serverName ?? "";
    message.vipGrade = object.vipGrade ?? 0;
    message.challengeScore = object.challengeScore ?? 0;
    message.heroTempId = object.heroTempId ?? 0;
    message.talentGrade = object.talentGrade ?? 0;
    message.meritorGrade = object.meritorGrade ?? 0;
    message.honorGrade = object.honorGrade ?? 0;
    message.devourGrade = object.devourGrade ?? 0;
    message.frameId = object.frameId ?? 0;
    message.consortiaBuild = object.consortiaBuild ?? 0;
    message.consortiaTotalBuild = object.consortiaTotalBuild ?? 0;
    message.marState = object.marState ?? 0;
    message.mateName = object.mateName ?? "";
    message.ringLevel = object.ringLevel ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
