// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/SoldierMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface SoldierMsg {
  livingId: number;
  tempId: number;
  type: number;
  side: number;
  pos: number;
  initHp: number;
  hp: number;
  qteTime: number;
  castTime: number;
  armyPawnId: number;
  grade: number;
  phyAttack: number;
  phyDefence: number;
  magAttack: number;
  magDefence: number;
  forceHit: number;
  parry: number;
  sites: number;
  skillId: number[];
  attackWound: number;
  hitWound: number;
  maxHp: number;
}

function createBaseSoldierMsg(): SoldierMsg {
  return {
    livingId: 0,
    tempId: 0,
    type: 0,
    side: 0,
    pos: 0,
    initHp: 0,
    hp: 0,
    qteTime: 0,
    castTime: 0,
    armyPawnId: 0,
    grade: 0,
    phyAttack: 0,
    phyDefence: 0,
    magAttack: 0,
    magDefence: 0,
    forceHit: 0,
    parry: 0,
    sites: 0,
    skillId: [],
    attackWound: 0,
    hitWound: 0,
    maxHp: 0,
  };
}

export const SoldierMsg: MessageFns<SoldierMsg> = {
  encode(message: SoldierMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.livingId !== 0) {
      writer.uint32(8).int32(message.livingId);
    }
    if (message.tempId !== 0) {
      writer.uint32(16).int32(message.tempId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.side !== 0) {
      writer.uint32(32).int32(message.side);
    }
    if (message.pos !== 0) {
      writer.uint32(40).int32(message.pos);
    }
    if (message.initHp !== 0) {
      writer.uint32(48).int32(message.initHp);
    }
    if (message.hp !== 0) {
      writer.uint32(56).int32(message.hp);
    }
    if (message.qteTime !== 0) {
      writer.uint32(64).int32(message.qteTime);
    }
    if (message.castTime !== 0) {
      writer.uint32(72).int32(message.castTime);
    }
    if (message.armyPawnId !== 0) {
      writer.uint32(80).int32(message.armyPawnId);
    }
    if (message.grade !== 0) {
      writer.uint32(88).int32(message.grade);
    }
    if (message.phyAttack !== 0) {
      writer.uint32(96).int32(message.phyAttack);
    }
    if (message.phyDefence !== 0) {
      writer.uint32(104).int32(message.phyDefence);
    }
    if (message.magAttack !== 0) {
      writer.uint32(112).int32(message.magAttack);
    }
    if (message.magDefence !== 0) {
      writer.uint32(120).int32(message.magDefence);
    }
    if (message.forceHit !== 0) {
      writer.uint32(128).int32(message.forceHit);
    }
    if (message.parry !== 0) {
      writer.uint32(136).int32(message.parry);
    }
    if (message.sites !== 0) {
      writer.uint32(144).int32(message.sites);
    }
    writer.uint32(154).fork();
    for (const v of message.skillId) {
      writer.int32(v);
    }
    writer.join();
    if (message.attackWound !== 0) {
      writer.uint32(160).int32(message.attackWound);
    }
    if (message.hitWound !== 0) {
      writer.uint32(168).int32(message.hitWound);
    }
    if (message.maxHp !== 0) {
      writer.uint32(176).int32(message.maxHp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SoldierMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSoldierMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.livingId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tempId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.side = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.initHp = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hp = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.qteTime = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.castTime = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.armyPawnId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.phyAttack = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.phyDefence = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.magAttack = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.magDefence = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.forceHit = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.parry = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.sites = reader.int32();
          continue;
        }
        case 19: {
          if (tag === 152) {
            message.skillId.push(reader.int32());

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.skillId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.attackWound = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.hitWound = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.maxHp = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SoldierMsg {
    return {
      livingId: isSet(object.livingId) ? globalThis.Number(object.livingId) : 0,
      tempId: isSet(object.tempId) ? globalThis.Number(object.tempId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      side: isSet(object.side) ? globalThis.Number(object.side) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      initHp: isSet(object.initHp) ? globalThis.Number(object.initHp) : 0,
      hp: isSet(object.hp) ? globalThis.Number(object.hp) : 0,
      qteTime: isSet(object.qteTime) ? globalThis.Number(object.qteTime) : 0,
      castTime: isSet(object.castTime) ? globalThis.Number(object.castTime) : 0,
      armyPawnId: isSet(object.armyPawnId) ? globalThis.Number(object.armyPawnId) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      phyAttack: isSet(object.phyAttack) ? globalThis.Number(object.phyAttack) : 0,
      phyDefence: isSet(object.phyDefence) ? globalThis.Number(object.phyDefence) : 0,
      magAttack: isSet(object.magAttack) ? globalThis.Number(object.magAttack) : 0,
      magDefence: isSet(object.magDefence) ? globalThis.Number(object.magDefence) : 0,
      forceHit: isSet(object.forceHit) ? globalThis.Number(object.forceHit) : 0,
      parry: isSet(object.parry) ? globalThis.Number(object.parry) : 0,
      sites: isSet(object.sites) ? globalThis.Number(object.sites) : 0,
      skillId: globalThis.Array.isArray(object?.skillId) ? object.skillId.map((e: any) => globalThis.Number(e)) : [],
      attackWound: isSet(object.attackWound) ? globalThis.Number(object.attackWound) : 0,
      hitWound: isSet(object.hitWound) ? globalThis.Number(object.hitWound) : 0,
      maxHp: isSet(object.maxHp) ? globalThis.Number(object.maxHp) : 0,
    };
  },

  toJSON(message: SoldierMsg): unknown {
    const obj: any = {};
    if (message.livingId !== 0) {
      obj.livingId = Math.round(message.livingId);
    }
    if (message.tempId !== 0) {
      obj.tempId = Math.round(message.tempId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.side !== 0) {
      obj.side = Math.round(message.side);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.initHp !== 0) {
      obj.initHp = Math.round(message.initHp);
    }
    if (message.hp !== 0) {
      obj.hp = Math.round(message.hp);
    }
    if (message.qteTime !== 0) {
      obj.qteTime = Math.round(message.qteTime);
    }
    if (message.castTime !== 0) {
      obj.castTime = Math.round(message.castTime);
    }
    if (message.armyPawnId !== 0) {
      obj.armyPawnId = Math.round(message.armyPawnId);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.phyAttack !== 0) {
      obj.phyAttack = Math.round(message.phyAttack);
    }
    if (message.phyDefence !== 0) {
      obj.phyDefence = Math.round(message.phyDefence);
    }
    if (message.magAttack !== 0) {
      obj.magAttack = Math.round(message.magAttack);
    }
    if (message.magDefence !== 0) {
      obj.magDefence = Math.round(message.magDefence);
    }
    if (message.forceHit !== 0) {
      obj.forceHit = Math.round(message.forceHit);
    }
    if (message.parry !== 0) {
      obj.parry = Math.round(message.parry);
    }
    if (message.sites !== 0) {
      obj.sites = Math.round(message.sites);
    }
    if (message.skillId?.length) {
      obj.skillId = message.skillId.map((e) => Math.round(e));
    }
    if (message.attackWound !== 0) {
      obj.attackWound = Math.round(message.attackWound);
    }
    if (message.hitWound !== 0) {
      obj.hitWound = Math.round(message.hitWound);
    }
    if (message.maxHp !== 0) {
      obj.maxHp = Math.round(message.maxHp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SoldierMsg>, I>>(base?: I): SoldierMsg {
    return SoldierMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SoldierMsg>, I>>(object: I): SoldierMsg {
    const message = createBaseSoldierMsg();
    message.livingId = object.livingId ?? 0;
    message.tempId = object.tempId ?? 0;
    message.type = object.type ?? 0;
    message.side = object.side ?? 0;
    message.pos = object.pos ?? 0;
    message.initHp = object.initHp ?? 0;
    message.hp = object.hp ?? 0;
    message.qteTime = object.qteTime ?? 0;
    message.castTime = object.castTime ?? 0;
    message.armyPawnId = object.armyPawnId ?? 0;
    message.grade = object.grade ?? 0;
    message.phyAttack = object.phyAttack ?? 0;
    message.phyDefence = object.phyDefence ?? 0;
    message.magAttack = object.magAttack ?? 0;
    message.magDefence = object.magDefence ?? 0;
    message.forceHit = object.forceHit ?? 0;
    message.parry = object.parry ?? 0;
    message.sites = object.sites ?? 0;
    message.skillId = object.skillId?.map((e) => e) || [];
    message.attackWound = object.attackWound ?? 0;
    message.hitWound = object.hitWound ?? 0;
    message.maxHp = object.maxHp ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
