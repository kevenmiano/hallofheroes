// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: outercity/VehicleInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.outercity";

export interface VehicleInfoMsg {
  nodeId: number;
  posX: number;
  posY: number;
  protectPlayer: number[];
  pushPlayer: number[];
  leftTime: number;
  guildId: number;
  status: number;
  guildName: string;
  id: number;
  targetPosX: number;
  targetPosY: number;
  speed: number;
  movePosX: number;
  movePosY: number;
  protectStatus: number;
  pushStatus: number;
  fightPlayer: string;
}

function createBaseVehicleInfoMsg(): VehicleInfoMsg {
  return {
    nodeId: 0,
    posX: 0,
    posY: 0,
    protectPlayer: [],
    pushPlayer: [],
    leftTime: 0,
    guildId: 0,
    status: 0,
    guildName: "",
    id: 0,
    targetPosX: 0,
    targetPosY: 0,
    speed: 0,
    movePosX: 0,
    movePosY: 0,
    protectStatus: 0,
    pushStatus: 0,
    fightPlayer: "",
  };
}

export const VehicleInfoMsg: MessageFns<VehicleInfoMsg> = {
  encode(message: VehicleInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== 0) {
      writer.uint32(8).int32(message.nodeId);
    }
    if (message.posX !== 0) {
      writer.uint32(16).int32(message.posX);
    }
    if (message.posY !== 0) {
      writer.uint32(24).int32(message.posY);
    }
    writer.uint32(34).fork();
    for (const v of message.protectPlayer) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.pushPlayer) {
      writer.int32(v);
    }
    writer.join();
    if (message.leftTime !== 0) {
      writer.uint32(48).int32(message.leftTime);
    }
    if (message.guildId !== 0) {
      writer.uint32(56).int32(message.guildId);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    if (message.guildName !== "") {
      writer.uint32(74).string(message.guildName);
    }
    if (message.id !== 0) {
      writer.uint32(80).int32(message.id);
    }
    if (message.targetPosX !== 0) {
      writer.uint32(88).int32(message.targetPosX);
    }
    if (message.targetPosY !== 0) {
      writer.uint32(96).int32(message.targetPosY);
    }
    if (message.speed !== 0) {
      writer.uint32(104).int32(message.speed);
    }
    if (message.movePosX !== 0) {
      writer.uint32(112).int32(message.movePosX);
    }
    if (message.movePosY !== 0) {
      writer.uint32(120).int32(message.movePosY);
    }
    if (message.protectStatus !== 0) {
      writer.uint32(128).int32(message.protectStatus);
    }
    if (message.pushStatus !== 0) {
      writer.uint32(136).int32(message.pushStatus);
    }
    if (message.fightPlayer !== "") {
      writer.uint32(146).string(message.fightPlayer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.posX = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.posY = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.protectPlayer.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.protectPlayer.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.pushPlayer.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pushPlayer.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.guildId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.guildName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.targetPosX = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.targetPosY = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.speed = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.movePosX = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.movePosY = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.protectStatus = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.pushStatus = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.fightPlayer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleInfoMsg {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      protectPlayer: globalThis.Array.isArray(object?.protectPlayer)
        ? object.protectPlayer.map((e: any) => globalThis.Number(e))
        : [],
      pushPlayer: globalThis.Array.isArray(object?.pushPlayer)
        ? object.pushPlayer.map((e: any) => globalThis.Number(e))
        : [],
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      guildName: isSet(object.guildName) ? globalThis.String(object.guildName) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      targetPosX: isSet(object.targetPosX) ? globalThis.Number(object.targetPosX) : 0,
      targetPosY: isSet(object.targetPosY) ? globalThis.Number(object.targetPosY) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      movePosX: isSet(object.movePosX) ? globalThis.Number(object.movePosX) : 0,
      movePosY: isSet(object.movePosY) ? globalThis.Number(object.movePosY) : 0,
      protectStatus: isSet(object.protectStatus) ? globalThis.Number(object.protectStatus) : 0,
      pushStatus: isSet(object.pushStatus) ? globalThis.Number(object.pushStatus) : 0,
      fightPlayer: isSet(object.fightPlayer) ? globalThis.String(object.fightPlayer) : "",
    };
  },

  toJSON(message: VehicleInfoMsg): unknown {
    const obj: any = {};
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.posX !== 0) {
      obj.posX = Math.round(message.posX);
    }
    if (message.posY !== 0) {
      obj.posY = Math.round(message.posY);
    }
    if (message.protectPlayer?.length) {
      obj.protectPlayer = message.protectPlayer.map((e) => Math.round(e));
    }
    if (message.pushPlayer?.length) {
      obj.pushPlayer = message.pushPlayer.map((e) => Math.round(e));
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.guildId !== 0) {
      obj.guildId = Math.round(message.guildId);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.guildName !== "") {
      obj.guildName = message.guildName;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.targetPosX !== 0) {
      obj.targetPosX = Math.round(message.targetPosX);
    }
    if (message.targetPosY !== 0) {
      obj.targetPosY = Math.round(message.targetPosY);
    }
    if (message.speed !== 0) {
      obj.speed = Math.round(message.speed);
    }
    if (message.movePosX !== 0) {
      obj.movePosX = Math.round(message.movePosX);
    }
    if (message.movePosY !== 0) {
      obj.movePosY = Math.round(message.movePosY);
    }
    if (message.protectStatus !== 0) {
      obj.protectStatus = Math.round(message.protectStatus);
    }
    if (message.pushStatus !== 0) {
      obj.pushStatus = Math.round(message.pushStatus);
    }
    if (message.fightPlayer !== "") {
      obj.fightPlayer = message.fightPlayer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleInfoMsg>, I>>(base?: I): VehicleInfoMsg {
    return VehicleInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleInfoMsg>, I>>(object: I): VehicleInfoMsg {
    const message = createBaseVehicleInfoMsg();
    message.nodeId = object.nodeId ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.protectPlayer = object.protectPlayer?.map((e) => e) || [];
    message.pushPlayer = object.pushPlayer?.map((e) => e) || [];
    message.leftTime = object.leftTime ?? 0;
    message.guildId = object.guildId ?? 0;
    message.status = object.status ?? 0;
    message.guildName = object.guildName ?? "";
    message.id = object.id ?? 0;
    message.targetPosX = object.targetPosX ?? 0;
    message.targetPosY = object.targetPosY ?? 0;
    message.speed = object.speed ?? 0;
    message.movePosX = object.movePosX ?? 0;
    message.movePosY = object.movePosY ?? 0;
    message.protectStatus = object.protectStatus ?? 0;
    message.pushStatus = object.pushStatus ?? 0;
    message.fightPlayer = object.fightPlayer ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
