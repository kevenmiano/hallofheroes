// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/FamLordsInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface FamLordsInfoMsg {
  isCanCall: boolean;
  order: number;
  expairtDate: string;
  isOpenLordsNode: boolean;
  currentTurns: number;
  leftTime: number;
  userIds: number[];
}

function createBaseFamLordsInfoMsg(): FamLordsInfoMsg {
  return {
    isCanCall: false,
    order: 0,
    expairtDate: "",
    isOpenLordsNode: false,
    currentTurns: 0,
    leftTime: 0,
    userIds: [],
  };
}

export const FamLordsInfoMsg: MessageFns<FamLordsInfoMsg> = {
  encode(message: FamLordsInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isCanCall !== false) {
      writer.uint32(8).bool(message.isCanCall);
    }
    if (message.order !== 0) {
      writer.uint32(16).int32(message.order);
    }
    if (message.expairtDate !== "") {
      writer.uint32(26).string(message.expairtDate);
    }
    if (message.isOpenLordsNode !== false) {
      writer.uint32(32).bool(message.isOpenLordsNode);
    }
    if (message.currentTurns !== 0) {
      writer.uint32(40).int32(message.currentTurns);
    }
    if (message.leftTime !== 0) {
      writer.uint32(48).int32(message.leftTime);
    }
    writer.uint32(58).fork();
    for (const v of message.userIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamLordsInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamLordsInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isCanCall = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expairtDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isOpenLordsNode = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.currentTurns = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.userIds.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamLordsInfoMsg {
    return {
      isCanCall: isSet(object.isCanCall) ? globalThis.Boolean(object.isCanCall) : false,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      expairtDate: isSet(object.expairtDate) ? globalThis.String(object.expairtDate) : "",
      isOpenLordsNode: isSet(object.isOpenLordsNode) ? globalThis.Boolean(object.isOpenLordsNode) : false,
      currentTurns: isSet(object.currentTurns) ? globalThis.Number(object.currentTurns) : 0,
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: FamLordsInfoMsg): unknown {
    const obj: any = {};
    if (message.isCanCall !== false) {
      obj.isCanCall = message.isCanCall;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.expairtDate !== "") {
      obj.expairtDate = message.expairtDate;
    }
    if (message.isOpenLordsNode !== false) {
      obj.isOpenLordsNode = message.isOpenLordsNode;
    }
    if (message.currentTurns !== 0) {
      obj.currentTurns = Math.round(message.currentTurns);
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.userIds?.length) {
      obj.userIds = message.userIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamLordsInfoMsg>, I>>(base?: I): FamLordsInfoMsg {
    return FamLordsInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamLordsInfoMsg>, I>>(object: I): FamLordsInfoMsg {
    const message = createBaseFamLordsInfoMsg();
    message.isCanCall = object.isCanCall ?? false;
    message.order = object.order ?? 0;
    message.expairtDate = object.expairtDate ?? "";
    message.isOpenLordsNode = object.isOpenLordsNode ?? false;
    message.currentTurns = object.currentTurns ?? 0;
    message.leftTime = object.leftTime ?? 0;
    message.userIds = object.userIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
