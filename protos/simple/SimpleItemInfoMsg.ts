// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/SimpleItemInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface SimpleItemInfoMsg {
  id: number;
  templateId: number;
  pos: number;
  exist: boolean;
  objectId: number;
  bagType: number;
  bind: boolean;
  used: boolean;
  validDate: number;
  beginDate: string;
  count: number;
  attack: number;
  defence: number;
  agility: number;
  ability: number;
  captain: number;
  strengthenGrade: number;
  join1: number;
  join2: number;
  join3: number;
  join4: number;
  randomSkill1: number;
  randomSkill2: number;
  randomSkill3: number;
  randomSkill4: number;
  randomSkill5: number;
  isNew: boolean;
  userId: number;
  isShow: boolean;
  isNewItems: boolean;
  property1: string;
  strength: number;
  tenacity: number;
  appraisalSkill: number;
  isLocked: boolean;
  mouldGrade: number;
  star: number;
  masterAttr: string;
  sonAttr: string;
  suitId: number;
}

function createBaseSimpleItemInfoMsg(): SimpleItemInfoMsg {
  return {
    id: 0,
    templateId: 0,
    pos: 0,
    exist: false,
    objectId: 0,
    bagType: 0,
    bind: false,
    used: false,
    validDate: 0,
    beginDate: "",
    count: 0,
    attack: 0,
    defence: 0,
    agility: 0,
    ability: 0,
    captain: 0,
    strengthenGrade: 0,
    join1: 0,
    join2: 0,
    join3: 0,
    join4: 0,
    randomSkill1: 0,
    randomSkill2: 0,
    randomSkill3: 0,
    randomSkill4: 0,
    randomSkill5: 0,
    isNew: false,
    userId: 0,
    isShow: false,
    isNewItems: false,
    property1: "",
    strength: 0,
    tenacity: 0,
    appraisalSkill: 0,
    isLocked: false,
    mouldGrade: 0,
    star: 0,
    masterAttr: "",
    sonAttr: "",
    suitId: 0,
  };
}

export const SimpleItemInfoMsg: MessageFns<SimpleItemInfoMsg> = {
  encode(message: SimpleItemInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.templateId !== 0) {
      writer.uint32(16).int32(message.templateId);
    }
    if (message.pos !== 0) {
      writer.uint32(24).int32(message.pos);
    }
    if (message.exist !== false) {
      writer.uint32(32).bool(message.exist);
    }
    if (message.objectId !== 0) {
      writer.uint32(40).int32(message.objectId);
    }
    if (message.bagType !== 0) {
      writer.uint32(48).int32(message.bagType);
    }
    if (message.bind !== false) {
      writer.uint32(56).bool(message.bind);
    }
    if (message.used !== false) {
      writer.uint32(64).bool(message.used);
    }
    if (message.validDate !== 0) {
      writer.uint32(72).int32(message.validDate);
    }
    if (message.beginDate !== "") {
      writer.uint32(82).string(message.beginDate);
    }
    if (message.count !== 0) {
      writer.uint32(88).int32(message.count);
    }
    if (message.attack !== 0) {
      writer.uint32(96).int32(message.attack);
    }
    if (message.defence !== 0) {
      writer.uint32(104).int32(message.defence);
    }
    if (message.agility !== 0) {
      writer.uint32(112).int32(message.agility);
    }
    if (message.ability !== 0) {
      writer.uint32(120).int32(message.ability);
    }
    if (message.captain !== 0) {
      writer.uint32(128).int32(message.captain);
    }
    if (message.strengthenGrade !== 0) {
      writer.uint32(136).int32(message.strengthenGrade);
    }
    if (message.join1 !== 0) {
      writer.uint32(144).int32(message.join1);
    }
    if (message.join2 !== 0) {
      writer.uint32(152).int32(message.join2);
    }
    if (message.join3 !== 0) {
      writer.uint32(160).int32(message.join3);
    }
    if (message.join4 !== 0) {
      writer.uint32(168).int32(message.join4);
    }
    if (message.randomSkill1 !== 0) {
      writer.uint32(176).int32(message.randomSkill1);
    }
    if (message.randomSkill2 !== 0) {
      writer.uint32(184).int32(message.randomSkill2);
    }
    if (message.randomSkill3 !== 0) {
      writer.uint32(192).int32(message.randomSkill3);
    }
    if (message.randomSkill4 !== 0) {
      writer.uint32(200).int32(message.randomSkill4);
    }
    if (message.randomSkill5 !== 0) {
      writer.uint32(208).int32(message.randomSkill5);
    }
    if (message.isNew !== false) {
      writer.uint32(216).bool(message.isNew);
    }
    if (message.userId !== 0) {
      writer.uint32(224).int32(message.userId);
    }
    if (message.isShow !== false) {
      writer.uint32(232).bool(message.isShow);
    }
    if (message.isNewItems !== false) {
      writer.uint32(240).bool(message.isNewItems);
    }
    if (message.property1 !== "") {
      writer.uint32(250).string(message.property1);
    }
    if (message.strength !== 0) {
      writer.uint32(256).int32(message.strength);
    }
    if (message.tenacity !== 0) {
      writer.uint32(264).int32(message.tenacity);
    }
    if (message.appraisalSkill !== 0) {
      writer.uint32(272).int32(message.appraisalSkill);
    }
    if (message.isLocked !== false) {
      writer.uint32(280).bool(message.isLocked);
    }
    if (message.mouldGrade !== 0) {
      writer.uint32(288).int32(message.mouldGrade);
    }
    if (message.star !== 0) {
      writer.uint32(296).int32(message.star);
    }
    if (message.masterAttr !== "") {
      writer.uint32(306).string(message.masterAttr);
    }
    if (message.sonAttr !== "") {
      writer.uint32(314).string(message.sonAttr);
    }
    if (message.suitId !== 0) {
      writer.uint32(320).int32(message.suitId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleItemInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleItemInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.exist = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.objectId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bagType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bind = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.used = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.validDate = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.beginDate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.attack = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.defence = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.agility = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.ability = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.captain = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.strengthenGrade = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.join1 = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.join2 = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.join3 = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.join4 = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.randomSkill1 = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.randomSkill2 = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.randomSkill3 = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.randomSkill4 = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.randomSkill5 = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.isNew = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.isShow = reader.bool();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isNewItems = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.property1 = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.strength = reader.int32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.tenacity = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.appraisalSkill = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.isLocked = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.mouldGrade = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.star = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.masterAttr = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.sonAttr = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.suitId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleItemInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      exist: isSet(object.exist) ? globalThis.Boolean(object.exist) : false,
      objectId: isSet(object.objectId) ? globalThis.Number(object.objectId) : 0,
      bagType: isSet(object.bagType) ? globalThis.Number(object.bagType) : 0,
      bind: isSet(object.bind) ? globalThis.Boolean(object.bind) : false,
      used: isSet(object.used) ? globalThis.Boolean(object.used) : false,
      validDate: isSet(object.validDate) ? globalThis.Number(object.validDate) : 0,
      beginDate: isSet(object.beginDate) ? globalThis.String(object.beginDate) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      attack: isSet(object.attack) ? globalThis.Number(object.attack) : 0,
      defence: isSet(object.defence) ? globalThis.Number(object.defence) : 0,
      agility: isSet(object.agility) ? globalThis.Number(object.agility) : 0,
      ability: isSet(object.ability) ? globalThis.Number(object.ability) : 0,
      captain: isSet(object.captain) ? globalThis.Number(object.captain) : 0,
      strengthenGrade: isSet(object.strengthenGrade) ? globalThis.Number(object.strengthenGrade) : 0,
      join1: isSet(object.join1) ? globalThis.Number(object.join1) : 0,
      join2: isSet(object.join2) ? globalThis.Number(object.join2) : 0,
      join3: isSet(object.join3) ? globalThis.Number(object.join3) : 0,
      join4: isSet(object.join4) ? globalThis.Number(object.join4) : 0,
      randomSkill1: isSet(object.randomSkill1) ? globalThis.Number(object.randomSkill1) : 0,
      randomSkill2: isSet(object.randomSkill2) ? globalThis.Number(object.randomSkill2) : 0,
      randomSkill3: isSet(object.randomSkill3) ? globalThis.Number(object.randomSkill3) : 0,
      randomSkill4: isSet(object.randomSkill4) ? globalThis.Number(object.randomSkill4) : 0,
      randomSkill5: isSet(object.randomSkill5) ? globalThis.Number(object.randomSkill5) : 0,
      isNew: isSet(object.isNew) ? globalThis.Boolean(object.isNew) : false,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      isShow: isSet(object.isShow) ? globalThis.Boolean(object.isShow) : false,
      isNewItems: isSet(object.isNewItems) ? globalThis.Boolean(object.isNewItems) : false,
      property1: isSet(object.property1) ? globalThis.String(object.property1) : "",
      strength: isSet(object.strength) ? globalThis.Number(object.strength) : 0,
      tenacity: isSet(object.tenacity) ? globalThis.Number(object.tenacity) : 0,
      appraisalSkill: isSet(object.appraisalSkill) ? globalThis.Number(object.appraisalSkill) : 0,
      isLocked: isSet(object.isLocked) ? globalThis.Boolean(object.isLocked) : false,
      mouldGrade: isSet(object.mouldGrade) ? globalThis.Number(object.mouldGrade) : 0,
      star: isSet(object.star) ? globalThis.Number(object.star) : 0,
      masterAttr: isSet(object.masterAttr) ? globalThis.String(object.masterAttr) : "",
      sonAttr: isSet(object.sonAttr) ? globalThis.String(object.sonAttr) : "",
      suitId: isSet(object.suitId) ? globalThis.Number(object.suitId) : 0,
    };
  },

  toJSON(message: SimpleItemInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.exist !== false) {
      obj.exist = message.exist;
    }
    if (message.objectId !== 0) {
      obj.objectId = Math.round(message.objectId);
    }
    if (message.bagType !== 0) {
      obj.bagType = Math.round(message.bagType);
    }
    if (message.bind !== false) {
      obj.bind = message.bind;
    }
    if (message.used !== false) {
      obj.used = message.used;
    }
    if (message.validDate !== 0) {
      obj.validDate = Math.round(message.validDate);
    }
    if (message.beginDate !== "") {
      obj.beginDate = message.beginDate;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.attack !== 0) {
      obj.attack = Math.round(message.attack);
    }
    if (message.defence !== 0) {
      obj.defence = Math.round(message.defence);
    }
    if (message.agility !== 0) {
      obj.agility = Math.round(message.agility);
    }
    if (message.ability !== 0) {
      obj.ability = Math.round(message.ability);
    }
    if (message.captain !== 0) {
      obj.captain = Math.round(message.captain);
    }
    if (message.strengthenGrade !== 0) {
      obj.strengthenGrade = Math.round(message.strengthenGrade);
    }
    if (message.join1 !== 0) {
      obj.join1 = Math.round(message.join1);
    }
    if (message.join2 !== 0) {
      obj.join2 = Math.round(message.join2);
    }
    if (message.join3 !== 0) {
      obj.join3 = Math.round(message.join3);
    }
    if (message.join4 !== 0) {
      obj.join4 = Math.round(message.join4);
    }
    if (message.randomSkill1 !== 0) {
      obj.randomSkill1 = Math.round(message.randomSkill1);
    }
    if (message.randomSkill2 !== 0) {
      obj.randomSkill2 = Math.round(message.randomSkill2);
    }
    if (message.randomSkill3 !== 0) {
      obj.randomSkill3 = Math.round(message.randomSkill3);
    }
    if (message.randomSkill4 !== 0) {
      obj.randomSkill4 = Math.round(message.randomSkill4);
    }
    if (message.randomSkill5 !== 0) {
      obj.randomSkill5 = Math.round(message.randomSkill5);
    }
    if (message.isNew !== false) {
      obj.isNew = message.isNew;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.isShow !== false) {
      obj.isShow = message.isShow;
    }
    if (message.isNewItems !== false) {
      obj.isNewItems = message.isNewItems;
    }
    if (message.property1 !== "") {
      obj.property1 = message.property1;
    }
    if (message.strength !== 0) {
      obj.strength = Math.round(message.strength);
    }
    if (message.tenacity !== 0) {
      obj.tenacity = Math.round(message.tenacity);
    }
    if (message.appraisalSkill !== 0) {
      obj.appraisalSkill = Math.round(message.appraisalSkill);
    }
    if (message.isLocked !== false) {
      obj.isLocked = message.isLocked;
    }
    if (message.mouldGrade !== 0) {
      obj.mouldGrade = Math.round(message.mouldGrade);
    }
    if (message.star !== 0) {
      obj.star = Math.round(message.star);
    }
    if (message.masterAttr !== "") {
      obj.masterAttr = message.masterAttr;
    }
    if (message.sonAttr !== "") {
      obj.sonAttr = message.sonAttr;
    }
    if (message.suitId !== 0) {
      obj.suitId = Math.round(message.suitId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimpleItemInfoMsg>, I>>(base?: I): SimpleItemInfoMsg {
    return SimpleItemInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleItemInfoMsg>, I>>(object: I): SimpleItemInfoMsg {
    const message = createBaseSimpleItemInfoMsg();
    message.id = object.id ?? 0;
    message.templateId = object.templateId ?? 0;
    message.pos = object.pos ?? 0;
    message.exist = object.exist ?? false;
    message.objectId = object.objectId ?? 0;
    message.bagType = object.bagType ?? 0;
    message.bind = object.bind ?? false;
    message.used = object.used ?? false;
    message.validDate = object.validDate ?? 0;
    message.beginDate = object.beginDate ?? "";
    message.count = object.count ?? 0;
    message.attack = object.attack ?? 0;
    message.defence = object.defence ?? 0;
    message.agility = object.agility ?? 0;
    message.ability = object.ability ?? 0;
    message.captain = object.captain ?? 0;
    message.strengthenGrade = object.strengthenGrade ?? 0;
    message.join1 = object.join1 ?? 0;
    message.join2 = object.join2 ?? 0;
    message.join3 = object.join3 ?? 0;
    message.join4 = object.join4 ?? 0;
    message.randomSkill1 = object.randomSkill1 ?? 0;
    message.randomSkill2 = object.randomSkill2 ?? 0;
    message.randomSkill3 = object.randomSkill3 ?? 0;
    message.randomSkill4 = object.randomSkill4 ?? 0;
    message.randomSkill5 = object.randomSkill5 ?? 0;
    message.isNew = object.isNew ?? false;
    message.userId = object.userId ?? 0;
    message.isShow = object.isShow ?? false;
    message.isNewItems = object.isNewItems ?? false;
    message.property1 = object.property1 ?? "";
    message.strength = object.strength ?? 0;
    message.tenacity = object.tenacity ?? 0;
    message.appraisalSkill = object.appraisalSkill ?? 0;
    message.isLocked = object.isLocked ?? false;
    message.mouldGrade = object.mouldGrade ?? 0;
    message.star = object.star ?? 0;
    message.masterAttr = object.masterAttr ?? "";
    message.sonAttr = object.sonAttr ?? "";
    message.suitId = object.suitId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
