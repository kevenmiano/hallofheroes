// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/SweepResult.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface SweepResult {
  type: number;
  gold: number;
  gp: number;
  campaignId: number;
  time: number;
  items: number[];
  cIndex: number;
  eIndex: number;
  finishCount: number;
  count: number;
  mailIn: number;
  level: number;
}

function createBaseSweepResult(): SweepResult {
  return {
    type: 0,
    gold: 0,
    gp: 0,
    campaignId: 0,
    time: 0,
    items: [],
    cIndex: 0,
    eIndex: 0,
    finishCount: 0,
    count: 0,
    mailIn: 0,
    level: 0,
  };
}

export const SweepResult: MessageFns<SweepResult> = {
  encode(message: SweepResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.gold !== 0) {
      writer.uint32(16).int32(message.gold);
    }
    if (message.gp !== 0) {
      writer.uint32(24).int32(message.gp);
    }
    if (message.campaignId !== 0) {
      writer.uint32(32).int32(message.campaignId);
    }
    if (message.time !== 0) {
      writer.uint32(40).int32(message.time);
    }
    writer.uint32(50).fork();
    for (const v of message.items) {
      writer.int32(v);
    }
    writer.join();
    if (message.cIndex !== 0) {
      writer.uint32(56).int32(message.cIndex);
    }
    if (message.eIndex !== 0) {
      writer.uint32(64).int32(message.eIndex);
    }
    if (message.finishCount !== 0) {
      writer.uint32(72).int32(message.finishCount);
    }
    if (message.count !== 0) {
      writer.uint32(80).int32(message.count);
    }
    if (message.mailIn !== 0) {
      writer.uint32(88).int32(message.mailIn);
    }
    if (message.level !== 0) {
      writer.uint32(96).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SweepResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSweepResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gold = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gp = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.time = reader.int32();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.items.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.items.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cIndex = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.eIndex = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.finishCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mailIn = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SweepResult {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      gold: isSet(object.gold) ? globalThis.Number(object.gold) : 0,
      gp: isSet(object.gp) ? globalThis.Number(object.gp) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => globalThis.Number(e)) : [],
      cIndex: isSet(object.cIndex) ? globalThis.Number(object.cIndex) : 0,
      eIndex: isSet(object.eIndex) ? globalThis.Number(object.eIndex) : 0,
      finishCount: isSet(object.finishCount) ? globalThis.Number(object.finishCount) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      mailIn: isSet(object.mailIn) ? globalThis.Number(object.mailIn) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: SweepResult): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.gold !== 0) {
      obj.gold = Math.round(message.gold);
    }
    if (message.gp !== 0) {
      obj.gp = Math.round(message.gp);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Math.round(e));
    }
    if (message.cIndex !== 0) {
      obj.cIndex = Math.round(message.cIndex);
    }
    if (message.eIndex !== 0) {
      obj.eIndex = Math.round(message.eIndex);
    }
    if (message.finishCount !== 0) {
      obj.finishCount = Math.round(message.finishCount);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.mailIn !== 0) {
      obj.mailIn = Math.round(message.mailIn);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SweepResult>, I>>(base?: I): SweepResult {
    return SweepResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SweepResult>, I>>(object: I): SweepResult {
    const message = createBaseSweepResult();
    message.type = object.type ?? 0;
    message.gold = object.gold ?? 0;
    message.gp = object.gp ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.time = object.time ?? 0;
    message.items = object.items?.map((e) => e) || [];
    message.cIndex = object.cIndex ?? 0;
    message.eIndex = object.eIndex ?? 0;
    message.finishCount = object.finishCount ?? 0;
    message.count = object.count ?? 0;
    message.mailIn = object.mailIn ?? 0;
    message.level = object.level ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
