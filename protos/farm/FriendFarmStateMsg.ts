// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/FriendFarmStateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface FriendFarmStateMsg {
  userId: number;
  isReap: boolean;
  isChargeEnergy: boolean;
  isRevive: boolean;
  isWorm: boolean;
  isGrass: boolean;
  isFeed: boolean;
}

function createBaseFriendFarmStateMsg(): FriendFarmStateMsg {
  return {
    userId: 0,
    isReap: false,
    isChargeEnergy: false,
    isRevive: false,
    isWorm: false,
    isGrass: false,
    isFeed: false,
  };
}

export const FriendFarmStateMsg: MessageFns<FriendFarmStateMsg> = {
  encode(message: FriendFarmStateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.isReap !== false) {
      writer.uint32(16).bool(message.isReap);
    }
    if (message.isChargeEnergy !== false) {
      writer.uint32(24).bool(message.isChargeEnergy);
    }
    if (message.isRevive !== false) {
      writer.uint32(32).bool(message.isRevive);
    }
    if (message.isWorm !== false) {
      writer.uint32(40).bool(message.isWorm);
    }
    if (message.isGrass !== false) {
      writer.uint32(48).bool(message.isGrass);
    }
    if (message.isFeed !== false) {
      writer.uint32(56).bool(message.isFeed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendFarmStateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendFarmStateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isReap = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isChargeEnergy = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isRevive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isWorm = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isGrass = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isFeed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendFarmStateMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      isReap: isSet(object.isReap) ? globalThis.Boolean(object.isReap) : false,
      isChargeEnergy: isSet(object.isChargeEnergy) ? globalThis.Boolean(object.isChargeEnergy) : false,
      isRevive: isSet(object.isRevive) ? globalThis.Boolean(object.isRevive) : false,
      isWorm: isSet(object.isWorm) ? globalThis.Boolean(object.isWorm) : false,
      isGrass: isSet(object.isGrass) ? globalThis.Boolean(object.isGrass) : false,
      isFeed: isSet(object.isFeed) ? globalThis.Boolean(object.isFeed) : false,
    };
  },

  toJSON(message: FriendFarmStateMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.isReap !== false) {
      obj.isReap = message.isReap;
    }
    if (message.isChargeEnergy !== false) {
      obj.isChargeEnergy = message.isChargeEnergy;
    }
    if (message.isRevive !== false) {
      obj.isRevive = message.isRevive;
    }
    if (message.isWorm !== false) {
      obj.isWorm = message.isWorm;
    }
    if (message.isGrass !== false) {
      obj.isGrass = message.isGrass;
    }
    if (message.isFeed !== false) {
      obj.isFeed = message.isFeed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendFarmStateMsg>, I>>(base?: I): FriendFarmStateMsg {
    return FriendFarmStateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendFarmStateMsg>, I>>(object: I): FriendFarmStateMsg {
    const message = createBaseFriendFarmStateMsg();
    message.userId = object.userId ?? 0;
    message.isReap = object.isReap ?? false;
    message.isChargeEnergy = object.isChargeEnergy ?? false;
    message.isRevive = object.isRevive ?? false;
    message.isWorm = object.isWorm ?? false;
    message.isGrass = object.isGrass ?? false;
    message.isFeed = object.isFeed ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
