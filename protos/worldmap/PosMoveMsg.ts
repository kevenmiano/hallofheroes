// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: worldmap/PosMoveMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.worldmap";

export interface PosMoveMsg {
  mapId: number;
  armyId: number;
  routes: number[];
  gridStr: string;
  userId: number[];
  serverName: string;
  userStates: number[];
  armyState: number;
  moveType: number;
  armyUserId: number;
  headId: number;
}

function createBasePosMoveMsg(): PosMoveMsg {
  return {
    mapId: 0,
    armyId: 0,
    routes: [],
    gridStr: "",
    userId: [],
    serverName: "",
    userStates: [],
    armyState: 0,
    moveType: 0,
    armyUserId: 0,
    headId: 0,
  };
}

export const PosMoveMsg: MessageFns<PosMoveMsg> = {
  encode(message: PosMoveMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mapId !== 0) {
      writer.uint32(8).int32(message.mapId);
    }
    if (message.armyId !== 0) {
      writer.uint32(16).int32(message.armyId);
    }
    writer.uint32(26).fork();
    for (const v of message.routes) {
      writer.int32(v);
    }
    writer.join();
    if (message.gridStr !== "") {
      writer.uint32(34).string(message.gridStr);
    }
    writer.uint32(42).fork();
    for (const v of message.userId) {
      writer.int32(v);
    }
    writer.join();
    if (message.serverName !== "") {
      writer.uint32(50).string(message.serverName);
    }
    writer.uint32(58).fork();
    for (const v of message.userStates) {
      writer.int32(v);
    }
    writer.join();
    if (message.armyState !== 0) {
      writer.uint32(64).int32(message.armyState);
    }
    if (message.moveType !== 0) {
      writer.uint32(72).int32(message.moveType);
    }
    if (message.armyUserId !== 0) {
      writer.uint32(80).int32(message.armyUserId);
    }
    if (message.headId !== 0) {
      writer.uint32(88).int32(message.headId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PosMoveMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosMoveMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.routes.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.routes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gridStr = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.userId.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.userStates.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userStates.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.armyState = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.moveType = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.armyUserId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PosMoveMsg {
    return {
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => globalThis.Number(e)) : [],
      gridStr: isSet(object.gridStr) ? globalThis.String(object.gridStr) : "",
      userId: globalThis.Array.isArray(object?.userId) ? object.userId.map((e: any) => globalThis.Number(e)) : [],
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      userStates: globalThis.Array.isArray(object?.userStates)
        ? object.userStates.map((e: any) => globalThis.Number(e))
        : [],
      armyState: isSet(object.armyState) ? globalThis.Number(object.armyState) : 0,
      moveType: isSet(object.moveType) ? globalThis.Number(object.moveType) : 0,
      armyUserId: isSet(object.armyUserId) ? globalThis.Number(object.armyUserId) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
    };
  },

  toJSON(message: PosMoveMsg): unknown {
    const obj: any = {};
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Math.round(e));
    }
    if (message.gridStr !== "") {
      obj.gridStr = message.gridStr;
    }
    if (message.userId?.length) {
      obj.userId = message.userId.map((e) => Math.round(e));
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.userStates?.length) {
      obj.userStates = message.userStates.map((e) => Math.round(e));
    }
    if (message.armyState !== 0) {
      obj.armyState = Math.round(message.armyState);
    }
    if (message.moveType !== 0) {
      obj.moveType = Math.round(message.moveType);
    }
    if (message.armyUserId !== 0) {
      obj.armyUserId = Math.round(message.armyUserId);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PosMoveMsg>, I>>(base?: I): PosMoveMsg {
    return PosMoveMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PosMoveMsg>, I>>(object: I): PosMoveMsg {
    const message = createBasePosMoveMsg();
    message.mapId = object.mapId ?? 0;
    message.armyId = object.armyId ?? 0;
    message.routes = object.routes?.map((e) => e) || [];
    message.gridStr = object.gridStr ?? "";
    message.userId = object.userId?.map((e) => e) || [];
    message.serverName = object.serverName ?? "";
    message.userStates = object.userStates?.map((e) => e) || [];
    message.armyState = object.armyState ?? 0;
    message.moveType = object.moveType ?? 0;
    message.armyUserId = object.armyUserId ?? 0;
    message.headId = object.headId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
