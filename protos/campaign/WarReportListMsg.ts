// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/WarReportListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface WarReportListMsg {
  oneTeamId: number;
  twoTeamId: number;
  thdTemaId: number;
  tempId: number;
  ownCount: number;
  teamCount: number;
  oneScore: number;
  twoScore: number;
  thdScore: number;
  info: number[];
  reportAwards: string;
}

function createBaseWarReportListMsg(): WarReportListMsg {
  return {
    oneTeamId: 0,
    twoTeamId: 0,
    thdTemaId: 0,
    tempId: 0,
    ownCount: 0,
    teamCount: 0,
    oneScore: 0,
    twoScore: 0,
    thdScore: 0,
    info: [],
    reportAwards: "",
  };
}

export const WarReportListMsg: MessageFns<WarReportListMsg> = {
  encode(message: WarReportListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oneTeamId !== 0) {
      writer.uint32(8).int32(message.oneTeamId);
    }
    if (message.twoTeamId !== 0) {
      writer.uint32(16).int32(message.twoTeamId);
    }
    if (message.thdTemaId !== 0) {
      writer.uint32(24).int32(message.thdTemaId);
    }
    if (message.tempId !== 0) {
      writer.uint32(32).int32(message.tempId);
    }
    if (message.ownCount !== 0) {
      writer.uint32(40).int32(message.ownCount);
    }
    if (message.teamCount !== 0) {
      writer.uint32(48).int32(message.teamCount);
    }
    if (message.oneScore !== 0) {
      writer.uint32(56).int32(message.oneScore);
    }
    if (message.twoScore !== 0) {
      writer.uint32(64).int32(message.twoScore);
    }
    if (message.thdScore !== 0) {
      writer.uint32(72).int32(message.thdScore);
    }
    writer.uint32(82).fork();
    for (const v of message.info) {
      writer.int32(v);
    }
    writer.join();
    if (message.reportAwards !== "") {
      writer.uint32(90).string(message.reportAwards);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WarReportListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWarReportListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.oneTeamId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.twoTeamId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.thdTemaId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tempId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ownCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.teamCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.oneScore = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.twoScore = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.thdScore = reader.int32();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.info.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.info.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.reportAwards = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WarReportListMsg {
    return {
      oneTeamId: isSet(object.oneTeamId) ? globalThis.Number(object.oneTeamId) : 0,
      twoTeamId: isSet(object.twoTeamId) ? globalThis.Number(object.twoTeamId) : 0,
      thdTemaId: isSet(object.thdTemaId) ? globalThis.Number(object.thdTemaId) : 0,
      tempId: isSet(object.tempId) ? globalThis.Number(object.tempId) : 0,
      ownCount: isSet(object.ownCount) ? globalThis.Number(object.ownCount) : 0,
      teamCount: isSet(object.teamCount) ? globalThis.Number(object.teamCount) : 0,
      oneScore: isSet(object.oneScore) ? globalThis.Number(object.oneScore) : 0,
      twoScore: isSet(object.twoScore) ? globalThis.Number(object.twoScore) : 0,
      thdScore: isSet(object.thdScore) ? globalThis.Number(object.thdScore) : 0,
      info: globalThis.Array.isArray(object?.info) ? object.info.map((e: any) => globalThis.Number(e)) : [],
      reportAwards: isSet(object.reportAwards) ? globalThis.String(object.reportAwards) : "",
    };
  },

  toJSON(message: WarReportListMsg): unknown {
    const obj: any = {};
    if (message.oneTeamId !== 0) {
      obj.oneTeamId = Math.round(message.oneTeamId);
    }
    if (message.twoTeamId !== 0) {
      obj.twoTeamId = Math.round(message.twoTeamId);
    }
    if (message.thdTemaId !== 0) {
      obj.thdTemaId = Math.round(message.thdTemaId);
    }
    if (message.tempId !== 0) {
      obj.tempId = Math.round(message.tempId);
    }
    if (message.ownCount !== 0) {
      obj.ownCount = Math.round(message.ownCount);
    }
    if (message.teamCount !== 0) {
      obj.teamCount = Math.round(message.teamCount);
    }
    if (message.oneScore !== 0) {
      obj.oneScore = Math.round(message.oneScore);
    }
    if (message.twoScore !== 0) {
      obj.twoScore = Math.round(message.twoScore);
    }
    if (message.thdScore !== 0) {
      obj.thdScore = Math.round(message.thdScore);
    }
    if (message.info?.length) {
      obj.info = message.info.map((e) => Math.round(e));
    }
    if (message.reportAwards !== "") {
      obj.reportAwards = message.reportAwards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WarReportListMsg>, I>>(base?: I): WarReportListMsg {
    return WarReportListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WarReportListMsg>, I>>(object: I): WarReportListMsg {
    const message = createBaseWarReportListMsg();
    message.oneTeamId = object.oneTeamId ?? 0;
    message.twoTeamId = object.twoTeamId ?? 0;
    message.thdTemaId = object.thdTemaId ?? 0;
    message.tempId = object.tempId ?? 0;
    message.ownCount = object.ownCount ?? 0;
    message.teamCount = object.teamCount ?? 0;
    message.oneScore = object.oneScore ?? 0;
    message.twoScore = object.twoScore ?? 0;
    message.thdScore = object.thdScore ?? 0;
    message.info = object.info?.map((e) => e) || [];
    message.reportAwards = object.reportAwards ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
