// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: carnival/MemoryCardMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.carnival";

export interface MemoryCardMsg {
  op: number;
  curTurn: number;
  score: number;
  addScore: number;
  addScore2: number;
  cIndex1: number;
  cIndex2: number;
  result: boolean;
  leftAutoChance: number;
  leftCheckChance: number;
  duration: number;
  cards: number[];
}

function createBaseMemoryCardMsg(): MemoryCardMsg {
  return {
    op: 0,
    curTurn: 0,
    score: 0,
    addScore: 0,
    addScore2: 0,
    cIndex1: 0,
    cIndex2: 0,
    result: false,
    leftAutoChance: 0,
    leftCheckChance: 0,
    duration: 0,
    cards: [],
  };
}

export const MemoryCardMsg: MessageFns<MemoryCardMsg> = {
  encode(message: MemoryCardMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.curTurn !== 0) {
      writer.uint32(16).int32(message.curTurn);
    }
    if (message.score !== 0) {
      writer.uint32(24).int32(message.score);
    }
    if (message.addScore !== 0) {
      writer.uint32(32).int32(message.addScore);
    }
    if (message.addScore2 !== 0) {
      writer.uint32(40).int32(message.addScore2);
    }
    if (message.cIndex1 !== 0) {
      writer.uint32(48).int32(message.cIndex1);
    }
    if (message.cIndex2 !== 0) {
      writer.uint32(56).int32(message.cIndex2);
    }
    if (message.result !== false) {
      writer.uint32(64).bool(message.result);
    }
    if (message.leftAutoChance !== 0) {
      writer.uint32(72).int32(message.leftAutoChance);
    }
    if (message.leftCheckChance !== 0) {
      writer.uint32(80).int32(message.leftCheckChance);
    }
    if (message.duration !== 0) {
      writer.uint32(88).int32(message.duration);
    }
    writer.uint32(98).fork();
    for (const v of message.cards) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoryCardMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoryCardMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.curTurn = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.addScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.addScore2 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.cIndex1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cIndex2 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.leftAutoChance = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.leftCheckChance = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
        case 12: {
          if (tag === 96) {
            message.cards.push(reader.int32());

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.cards.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemoryCardMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      curTurn: isSet(object.curTurn) ? globalThis.Number(object.curTurn) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      addScore: isSet(object.addScore) ? globalThis.Number(object.addScore) : 0,
      addScore2: isSet(object.addScore2) ? globalThis.Number(object.addScore2) : 0,
      cIndex1: isSet(object.cIndex1) ? globalThis.Number(object.cIndex1) : 0,
      cIndex2: isSet(object.cIndex2) ? globalThis.Number(object.cIndex2) : 0,
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      leftAutoChance: isSet(object.leftAutoChance) ? globalThis.Number(object.leftAutoChance) : 0,
      leftCheckChance: isSet(object.leftCheckChance) ? globalThis.Number(object.leftCheckChance) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      cards: globalThis.Array.isArray(object?.cards) ? object.cards.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: MemoryCardMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.curTurn !== 0) {
      obj.curTurn = Math.round(message.curTurn);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.addScore !== 0) {
      obj.addScore = Math.round(message.addScore);
    }
    if (message.addScore2 !== 0) {
      obj.addScore2 = Math.round(message.addScore2);
    }
    if (message.cIndex1 !== 0) {
      obj.cIndex1 = Math.round(message.cIndex1);
    }
    if (message.cIndex2 !== 0) {
      obj.cIndex2 = Math.round(message.cIndex2);
    }
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.leftAutoChance !== 0) {
      obj.leftAutoChance = Math.round(message.leftAutoChance);
    }
    if (message.leftCheckChance !== 0) {
      obj.leftCheckChance = Math.round(message.leftCheckChance);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.cards?.length) {
      obj.cards = message.cards.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MemoryCardMsg>, I>>(base?: I): MemoryCardMsg {
    return MemoryCardMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MemoryCardMsg>, I>>(object: I): MemoryCardMsg {
    const message = createBaseMemoryCardMsg();
    message.op = object.op ?? 0;
    message.curTurn = object.curTurn ?? 0;
    message.score = object.score ?? 0;
    message.addScore = object.addScore ?? 0;
    message.addScore2 = object.addScore2 ?? 0;
    message.cIndex1 = object.cIndex1 ?? 0;
    message.cIndex2 = object.cIndex2 ?? 0;
    message.result = object.result ?? false;
    message.leftAutoChance = object.leftAutoChance ?? 0;
    message.leftCheckChance = object.leftCheckChance ?? 0;
    message.duration = object.duration ?? 0;
    message.cards = object.cards?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
