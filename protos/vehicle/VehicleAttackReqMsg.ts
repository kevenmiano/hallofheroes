// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vehicle/VehicleAttackReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vehicle";

export interface VehicleAttackReqMsg {
  skillId: string;
  attackType: string;
  suffererNpcId: string;
  suffererId: number[];
  effectX: string;
  effectY: string;
  suffererServerName: number[];
  suffererNpcIdArray: number[];
  attackServerName: string;
}

function createBaseVehicleAttackReqMsg(): VehicleAttackReqMsg {
  return {
    skillId: "",
    attackType: "",
    suffererNpcId: "",
    suffererId: [],
    effectX: "",
    effectY: "",
    suffererServerName: [],
    suffererNpcIdArray: [],
    attackServerName: "",
  };
}

export const VehicleAttackReqMsg: MessageFns<VehicleAttackReqMsg> = {
  encode(message: VehicleAttackReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skillId !== "") {
      writer.uint32(10).string(message.skillId);
    }
    if (message.attackType !== "") {
      writer.uint32(18).string(message.attackType);
    }
    if (message.suffererNpcId !== "") {
      writer.uint32(26).string(message.suffererNpcId);
    }
    writer.uint32(34).fork();
    for (const v of message.suffererId) {
      writer.int32(v);
    }
    writer.join();
    if (message.effectX !== "") {
      writer.uint32(42).string(message.effectX);
    }
    if (message.effectY !== "") {
      writer.uint32(50).string(message.effectY);
    }
    writer.uint32(58).fork();
    for (const v of message.suffererServerName) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.suffererNpcIdArray) {
      writer.int32(v);
    }
    writer.join();
    if (message.attackServerName !== "") {
      writer.uint32(74).string(message.attackServerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleAttackReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleAttackReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skillId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attackType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.suffererNpcId = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.suffererId.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.suffererId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.effectX = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.effectY = reader.string();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.suffererServerName.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.suffererServerName.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.suffererNpcIdArray.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.suffererNpcIdArray.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.attackServerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleAttackReqMsg {
    return {
      skillId: isSet(object.skillId) ? globalThis.String(object.skillId) : "",
      attackType: isSet(object.attackType) ? globalThis.String(object.attackType) : "",
      suffererNpcId: isSet(object.suffererNpcId) ? globalThis.String(object.suffererNpcId) : "",
      suffererId: globalThis.Array.isArray(object?.suffererId)
        ? object.suffererId.map((e: any) => globalThis.Number(e))
        : [],
      effectX: isSet(object.effectX) ? globalThis.String(object.effectX) : "",
      effectY: isSet(object.effectY) ? globalThis.String(object.effectY) : "",
      suffererServerName: globalThis.Array.isArray(object?.suffererServerName)
        ? object.suffererServerName.map((e: any) => globalThis.Number(e))
        : [],
      suffererNpcIdArray: globalThis.Array.isArray(object?.suffererNpcIdArray)
        ? object.suffererNpcIdArray.map((e: any) => globalThis.Number(e))
        : [],
      attackServerName: isSet(object.attackServerName) ? globalThis.String(object.attackServerName) : "",
    };
  },

  toJSON(message: VehicleAttackReqMsg): unknown {
    const obj: any = {};
    if (message.skillId !== "") {
      obj.skillId = message.skillId;
    }
    if (message.attackType !== "") {
      obj.attackType = message.attackType;
    }
    if (message.suffererNpcId !== "") {
      obj.suffererNpcId = message.suffererNpcId;
    }
    if (message.suffererId?.length) {
      obj.suffererId = message.suffererId.map((e) => Math.round(e));
    }
    if (message.effectX !== "") {
      obj.effectX = message.effectX;
    }
    if (message.effectY !== "") {
      obj.effectY = message.effectY;
    }
    if (message.suffererServerName?.length) {
      obj.suffererServerName = message.suffererServerName.map((e) => Math.round(e));
    }
    if (message.suffererNpcIdArray?.length) {
      obj.suffererNpcIdArray = message.suffererNpcIdArray.map((e) => Math.round(e));
    }
    if (message.attackServerName !== "") {
      obj.attackServerName = message.attackServerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleAttackReqMsg>, I>>(base?: I): VehicleAttackReqMsg {
    return VehicleAttackReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleAttackReqMsg>, I>>(object: I): VehicleAttackReqMsg {
    const message = createBaseVehicleAttackReqMsg();
    message.skillId = object.skillId ?? "";
    message.attackType = object.attackType ?? "";
    message.suffererNpcId = object.suffererNpcId ?? "";
    message.suffererId = object.suffererId?.map((e) => e) || [];
    message.effectX = object.effectX ?? "";
    message.effectY = object.effectY ?? "";
    message.suffererServerName = object.suffererServerName?.map((e) => e) || [];
    message.suffererNpcIdArray = object.suffererNpcIdArray?.map((e) => e) || [];
    message.attackServerName = object.attackServerName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
