// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: translate/TranslateReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.translate";

export interface TranslateReqMsg {
  reqid: string;
  content: string;
  sourceLanguage: string;
  targetLanguage: string;
}

function createBaseTranslateReqMsg(): TranslateReqMsg {
  return { reqid: "", content: "", sourceLanguage: "", targetLanguage: "" };
}

export const TranslateReqMsg: MessageFns<TranslateReqMsg> = {
  encode(
    message: TranslateReqMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.reqid !== "") {
      writer.uint32(10).string(message.reqid);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.sourceLanguage !== "") {
      writer.uint32(26).string(message.sourceLanguage);
    }
    if (message.targetLanguage !== "") {
      writer.uint32(34).string(message.targetLanguage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateReqMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reqid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceLanguage = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetLanguage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateReqMsg {
    return {
      reqid: isSet(object.reqid) ? globalThis.String(object.reqid) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      sourceLanguage: isSet(object.sourceLanguage)
        ? globalThis.String(object.sourceLanguage)
        : "",
      targetLanguage: isSet(object.targetLanguage)
        ? globalThis.String(object.targetLanguage)
        : "",
    };
  },

  toJSON(message: TranslateReqMsg): unknown {
    const obj: any = {};
    if (message.reqid !== "") {
      obj.reqid = message.reqid;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.sourceLanguage !== "") {
      obj.sourceLanguage = message.sourceLanguage;
    }
    if (message.targetLanguage !== "") {
      obj.targetLanguage = message.targetLanguage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateReqMsg>, I>>(
    base?: I,
  ): TranslateReqMsg {
    return TranslateReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateReqMsg>, I>>(
    object: I,
  ): TranslateReqMsg {
    const message = createBaseTranslateReqMsg();
    message.reqid = object.reqid ?? "";
    message.content = object.content ?? "";
    message.sourceLanguage = object.sourceLanguage ?? "";
    message.targetLanguage = object.targetLanguage ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
