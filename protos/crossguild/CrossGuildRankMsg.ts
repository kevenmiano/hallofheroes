// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: crossguild/CrossGuildRankMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.crossguild";

export interface CrossGuildRankMsg {
  redServerName: string;
  redGuildScore: number;
  blueServerName: string;
  blueGuildScore: number;
  redRankList: number[];
  blueRankList: number[];
  rank: number;
}

function createBaseCrossGuildRankMsg(): CrossGuildRankMsg {
  return {
    redServerName: "",
    redGuildScore: 0,
    blueServerName: "",
    blueGuildScore: 0,
    redRankList: [],
    blueRankList: [],
    rank: 0,
  };
}

export const CrossGuildRankMsg: MessageFns<CrossGuildRankMsg> = {
  encode(message: CrossGuildRankMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.redServerName !== "") {
      writer.uint32(10).string(message.redServerName);
    }
    if (message.redGuildScore !== 0) {
      writer.uint32(16).int32(message.redGuildScore);
    }
    if (message.blueServerName !== "") {
      writer.uint32(26).string(message.blueServerName);
    }
    if (message.blueGuildScore !== 0) {
      writer.uint32(32).int32(message.blueGuildScore);
    }
    writer.uint32(42).fork();
    for (const v of message.redRankList) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.blueRankList) {
      writer.int32(v);
    }
    writer.join();
    if (message.rank !== 0) {
      writer.uint32(56).int32(message.rank);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrossGuildRankMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrossGuildRankMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.redServerName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.redGuildScore = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.blueServerName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.blueGuildScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.redRankList.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.redRankList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.blueRankList.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.blueRankList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrossGuildRankMsg {
    return {
      redServerName: isSet(object.redServerName) ? globalThis.String(object.redServerName) : "",
      redGuildScore: isSet(object.redGuildScore) ? globalThis.Number(object.redGuildScore) : 0,
      blueServerName: isSet(object.blueServerName) ? globalThis.String(object.blueServerName) : "",
      blueGuildScore: isSet(object.blueGuildScore) ? globalThis.Number(object.blueGuildScore) : 0,
      redRankList: globalThis.Array.isArray(object?.redRankList)
        ? object.redRankList.map((e: any) => globalThis.Number(e))
        : [],
      blueRankList: globalThis.Array.isArray(object?.blueRankList)
        ? object.blueRankList.map((e: any) => globalThis.Number(e))
        : [],
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
    };
  },

  toJSON(message: CrossGuildRankMsg): unknown {
    const obj: any = {};
    if (message.redServerName !== "") {
      obj.redServerName = message.redServerName;
    }
    if (message.redGuildScore !== 0) {
      obj.redGuildScore = Math.round(message.redGuildScore);
    }
    if (message.blueServerName !== "") {
      obj.blueServerName = message.blueServerName;
    }
    if (message.blueGuildScore !== 0) {
      obj.blueGuildScore = Math.round(message.blueGuildScore);
    }
    if (message.redRankList?.length) {
      obj.redRankList = message.redRankList.map((e) => Math.round(e));
    }
    if (message.blueRankList?.length) {
      obj.blueRankList = message.blueRankList.map((e) => Math.round(e));
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrossGuildRankMsg>, I>>(base?: I): CrossGuildRankMsg {
    return CrossGuildRankMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrossGuildRankMsg>, I>>(object: I): CrossGuildRankMsg {
    const message = createBaseCrossGuildRankMsg();
    message.redServerName = object.redServerName ?? "";
    message.redGuildScore = object.redGuildScore ?? 0;
    message.blueServerName = object.blueServerName ?? "";
    message.blueGuildScore = object.blueGuildScore ?? 0;
    message.redRankList = object.redRankList?.map((e) => e) || [];
    message.blueRankList = object.blueRankList?.map((e) => e) || [];
    message.rank = object.rank ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
