// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: chat/ChatFriendMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.chat";

export interface ChatFriendMsg {
  fromId: number;
  fromNick: string;
  toId: number;
  encodeMsg: string;
  sendDate: string;
  result: number;
  job: number;
  headid: number;
  level: number;
  frameId: number;
  consortiaId: number;
  consortiaName: string;
  appellId: number;
  fight: number;
}

function createBaseChatFriendMsg(): ChatFriendMsg {
  return {
    fromId: 0,
    fromNick: "",
    toId: 0,
    encodeMsg: "",
    sendDate: "",
    result: 0,
    job: 0,
    headid: 0,
    level: 0,
    frameId: 0,
    consortiaId: 0,
    consortiaName: "",
    appellId: 0,
    fight: 0,
  };
}

export const ChatFriendMsg: MessageFns<ChatFriendMsg> = {
  encode(message: ChatFriendMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromId !== 0) {
      writer.uint32(8).int32(message.fromId);
    }
    if (message.fromNick !== "") {
      writer.uint32(18).string(message.fromNick);
    }
    if (message.toId !== 0) {
      writer.uint32(24).int32(message.toId);
    }
    if (message.encodeMsg !== "") {
      writer.uint32(34).string(message.encodeMsg);
    }
    if (message.sendDate !== "") {
      writer.uint32(42).string(message.sendDate);
    }
    if (message.result !== 0) {
      writer.uint32(48).int32(message.result);
    }
    if (message.job !== 0) {
      writer.uint32(56).int32(message.job);
    }
    if (message.headid !== 0) {
      writer.uint32(64).int32(message.headid);
    }
    if (message.level !== 0) {
      writer.uint32(72).int32(message.level);
    }
    if (message.frameId !== 0) {
      writer.uint32(80).int32(message.frameId);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(88).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(98).string(message.consortiaName);
    }
    if (message.appellId !== 0) {
      writer.uint32(104).int32(message.appellId);
    }
    if (message.fight !== 0) {
      writer.uint32(112).int32(message.fight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatFriendMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatFriendMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fromNick = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.toId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.encodeMsg = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sendDate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.headid = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.frameId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.fight = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatFriendMsg {
    return {
      fromId: isSet(object.fromId) ? globalThis.Number(object.fromId) : 0,
      fromNick: isSet(object.fromNick) ? globalThis.String(object.fromNick) : "",
      toId: isSet(object.toId) ? globalThis.Number(object.toId) : 0,
      encodeMsg: isSet(object.encodeMsg) ? globalThis.String(object.encodeMsg) : "",
      sendDate: isSet(object.sendDate) ? globalThis.String(object.sendDate) : "",
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      headid: isSet(object.headid) ? globalThis.Number(object.headid) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      frameId: isSet(object.frameId) ? globalThis.Number(object.frameId) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
      fight: isSet(object.fight) ? globalThis.Number(object.fight) : 0,
    };
  },

  toJSON(message: ChatFriendMsg): unknown {
    const obj: any = {};
    if (message.fromId !== 0) {
      obj.fromId = Math.round(message.fromId);
    }
    if (message.fromNick !== "") {
      obj.fromNick = message.fromNick;
    }
    if (message.toId !== 0) {
      obj.toId = Math.round(message.toId);
    }
    if (message.encodeMsg !== "") {
      obj.encodeMsg = message.encodeMsg;
    }
    if (message.sendDate !== "") {
      obj.sendDate = message.sendDate;
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.headid !== 0) {
      obj.headid = Math.round(message.headid);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.frameId !== 0) {
      obj.frameId = Math.round(message.frameId);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    if (message.fight !== 0) {
      obj.fight = Math.round(message.fight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatFriendMsg>, I>>(base?: I): ChatFriendMsg {
    return ChatFriendMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatFriendMsg>, I>>(object: I): ChatFriendMsg {
    const message = createBaseChatFriendMsg();
    message.fromId = object.fromId ?? 0;
    message.fromNick = object.fromNick ?? "";
    message.toId = object.toId ?? 0;
    message.encodeMsg = object.encodeMsg ?? "";
    message.sendDate = object.sendDate ?? "";
    message.result = object.result ?? 0;
    message.job = object.job ?? 0;
    message.headid = object.headid ?? 0;
    message.level = object.level ?? 0;
    message.frameId = object.frameId ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.appellId = object.appellId ?? 0;
    message.fight = object.fight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
