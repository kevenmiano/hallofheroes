// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/FarmInfoRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface FarmInfoRspMsg {
  userId: number;
  nickName: string;
  grades: number;
  landGrades: number;
  gp: number;
  totalGp: number;
  todayFromFriendGp: number;
  farmLandInfo: number[];
  treeInfo: string;
  todayStolenCount: number;
  petInfo: number[];
  guardPetInfo: string;
}

function createBaseFarmInfoRspMsg(): FarmInfoRspMsg {
  return {
    userId: 0,
    nickName: "",
    grades: 0,
    landGrades: 0,
    gp: 0,
    totalGp: 0,
    todayFromFriendGp: 0,
    farmLandInfo: [],
    treeInfo: "",
    todayStolenCount: 0,
    petInfo: [],
    guardPetInfo: "",
  };
}

export const FarmInfoRspMsg: MessageFns<FarmInfoRspMsg> = {
  encode(message: FarmInfoRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.grades !== 0) {
      writer.uint32(24).int32(message.grades);
    }
    if (message.landGrades !== 0) {
      writer.uint32(32).int32(message.landGrades);
    }
    if (message.gp !== 0) {
      writer.uint32(40).int32(message.gp);
    }
    if (message.totalGp !== 0) {
      writer.uint32(48).int32(message.totalGp);
    }
    if (message.todayFromFriendGp !== 0) {
      writer.uint32(56).int32(message.todayFromFriendGp);
    }
    writer.uint32(66).fork();
    for (const v of message.farmLandInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.treeInfo !== "") {
      writer.uint32(74).string(message.treeInfo);
    }
    if (message.todayStolenCount !== 0) {
      writer.uint32(80).int32(message.todayStolenCount);
    }
    writer.uint32(90).fork();
    for (const v of message.petInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.guardPetInfo !== "") {
      writer.uint32(98).string(message.guardPetInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FarmInfoRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFarmInfoRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.landGrades = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.gp = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalGp = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.todayFromFriendGp = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.farmLandInfo.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.farmLandInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.treeInfo = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.todayStolenCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag === 88) {
            message.petInfo.push(reader.int32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.petInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.guardPetInfo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FarmInfoRspMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      landGrades: isSet(object.landGrades) ? globalThis.Number(object.landGrades) : 0,
      gp: isSet(object.gp) ? globalThis.Number(object.gp) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.Number(object.totalGp) : 0,
      todayFromFriendGp: isSet(object.todayFromFriendGp) ? globalThis.Number(object.todayFromFriendGp) : 0,
      farmLandInfo: globalThis.Array.isArray(object?.farmLandInfo)
        ? object.farmLandInfo.map((e: any) => globalThis.Number(e))
        : [],
      treeInfo: isSet(object.treeInfo) ? globalThis.String(object.treeInfo) : "",
      todayStolenCount: isSet(object.todayStolenCount) ? globalThis.Number(object.todayStolenCount) : 0,
      petInfo: globalThis.Array.isArray(object?.petInfo) ? object.petInfo.map((e: any) => globalThis.Number(e)) : [],
      guardPetInfo: isSet(object.guardPetInfo) ? globalThis.String(object.guardPetInfo) : "",
    };
  },

  toJSON(message: FarmInfoRspMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.landGrades !== 0) {
      obj.landGrades = Math.round(message.landGrades);
    }
    if (message.gp !== 0) {
      obj.gp = Math.round(message.gp);
    }
    if (message.totalGp !== 0) {
      obj.totalGp = Math.round(message.totalGp);
    }
    if (message.todayFromFriendGp !== 0) {
      obj.todayFromFriendGp = Math.round(message.todayFromFriendGp);
    }
    if (message.farmLandInfo?.length) {
      obj.farmLandInfo = message.farmLandInfo.map((e) => Math.round(e));
    }
    if (message.treeInfo !== "") {
      obj.treeInfo = message.treeInfo;
    }
    if (message.todayStolenCount !== 0) {
      obj.todayStolenCount = Math.round(message.todayStolenCount);
    }
    if (message.petInfo?.length) {
      obj.petInfo = message.petInfo.map((e) => Math.round(e));
    }
    if (message.guardPetInfo !== "") {
      obj.guardPetInfo = message.guardPetInfo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FarmInfoRspMsg>, I>>(base?: I): FarmInfoRspMsg {
    return FarmInfoRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FarmInfoRspMsg>, I>>(object: I): FarmInfoRspMsg {
    const message = createBaseFarmInfoRspMsg();
    message.userId = object.userId ?? 0;
    message.nickName = object.nickName ?? "";
    message.grades = object.grades ?? 0;
    message.landGrades = object.landGrades ?? 0;
    message.gp = object.gp ?? 0;
    message.totalGp = object.totalGp ?? 0;
    message.todayFromFriendGp = object.todayFromFriendGp ?? 0;
    message.farmLandInfo = object.farmLandInfo?.map((e) => e) || [];
    message.treeInfo = object.treeInfo ?? "";
    message.todayStolenCount = object.todayStolenCount ?? 0;
    message.petInfo = object.petInfo?.map((e) => e) || [];
    message.guardPetInfo = object.guardPetInfo ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
