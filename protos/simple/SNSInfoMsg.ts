// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/SNSInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface SNSInfoMsg {
  id: number;
  userId: number;
  nickname: string;
  signDesc: string;
  sex: number;
  birthdayType: number;
  birthYear: number;
  birthMonth: number;
  birthDay: number;
  starId: number;
  bloodType: number;
  country: number;
  province: number;
  city: number;
  headId: number;
  job: number;
}

function createBaseSNSInfoMsg(): SNSInfoMsg {
  return {
    id: 0,
    userId: 0,
    nickname: "",
    signDesc: "",
    sex: 0,
    birthdayType: 0,
    birthYear: 0,
    birthMonth: 0,
    birthDay: 0,
    starId: 0,
    bloodType: 0,
    country: 0,
    province: 0,
    city: 0,
    headId: 0,
    job: 0,
  };
}

export const SNSInfoMsg: MessageFns<SNSInfoMsg> = {
  encode(message: SNSInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.signDesc !== "") {
      writer.uint32(34).string(message.signDesc);
    }
    if (message.sex !== 0) {
      writer.uint32(40).int32(message.sex);
    }
    if (message.birthdayType !== 0) {
      writer.uint32(48).int32(message.birthdayType);
    }
    if (message.birthYear !== 0) {
      writer.uint32(56).int32(message.birthYear);
    }
    if (message.birthMonth !== 0) {
      writer.uint32(64).int32(message.birthMonth);
    }
    if (message.birthDay !== 0) {
      writer.uint32(72).int32(message.birthDay);
    }
    if (message.starId !== 0) {
      writer.uint32(80).int32(message.starId);
    }
    if (message.bloodType !== 0) {
      writer.uint32(88).int32(message.bloodType);
    }
    if (message.country !== 0) {
      writer.uint32(96).int32(message.country);
    }
    if (message.province !== 0) {
      writer.uint32(104).int32(message.province);
    }
    if (message.city !== 0) {
      writer.uint32(112).int32(message.city);
    }
    if (message.headId !== 0) {
      writer.uint32(120).int32(message.headId);
    }
    if (message.job !== 0) {
      writer.uint32(128).int32(message.job);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SNSInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSNSInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signDesc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.birthdayType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.birthYear = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.birthMonth = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.birthDay = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.starId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.bloodType = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.country = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.province = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.city = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SNSInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      signDesc: isSet(object.signDesc) ? globalThis.String(object.signDesc) : "",
      sex: isSet(object.sex) ? globalThis.Number(object.sex) : 0,
      birthdayType: isSet(object.birthdayType) ? globalThis.Number(object.birthdayType) : 0,
      birthYear: isSet(object.birthYear) ? globalThis.Number(object.birthYear) : 0,
      birthMonth: isSet(object.birthMonth) ? globalThis.Number(object.birthMonth) : 0,
      birthDay: isSet(object.birthDay) ? globalThis.Number(object.birthDay) : 0,
      starId: isSet(object.starId) ? globalThis.Number(object.starId) : 0,
      bloodType: isSet(object.bloodType) ? globalThis.Number(object.bloodType) : 0,
      country: isSet(object.country) ? globalThis.Number(object.country) : 0,
      province: isSet(object.province) ? globalThis.Number(object.province) : 0,
      city: isSet(object.city) ? globalThis.Number(object.city) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
    };
  },

  toJSON(message: SNSInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.signDesc !== "") {
      obj.signDesc = message.signDesc;
    }
    if (message.sex !== 0) {
      obj.sex = Math.round(message.sex);
    }
    if (message.birthdayType !== 0) {
      obj.birthdayType = Math.round(message.birthdayType);
    }
    if (message.birthYear !== 0) {
      obj.birthYear = Math.round(message.birthYear);
    }
    if (message.birthMonth !== 0) {
      obj.birthMonth = Math.round(message.birthMonth);
    }
    if (message.birthDay !== 0) {
      obj.birthDay = Math.round(message.birthDay);
    }
    if (message.starId !== 0) {
      obj.starId = Math.round(message.starId);
    }
    if (message.bloodType !== 0) {
      obj.bloodType = Math.round(message.bloodType);
    }
    if (message.country !== 0) {
      obj.country = Math.round(message.country);
    }
    if (message.province !== 0) {
      obj.province = Math.round(message.province);
    }
    if (message.city !== 0) {
      obj.city = Math.round(message.city);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SNSInfoMsg>, I>>(base?: I): SNSInfoMsg {
    return SNSInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SNSInfoMsg>, I>>(object: I): SNSInfoMsg {
    const message = createBaseSNSInfoMsg();
    message.id = object.id ?? 0;
    message.userId = object.userId ?? 0;
    message.nickname = object.nickname ?? "";
    message.signDesc = object.signDesc ?? "";
    message.sex = object.sex ?? 0;
    message.birthdayType = object.birthdayType ?? 0;
    message.birthYear = object.birthYear ?? 0;
    message.birthMonth = object.birthMonth ?? 0;
    message.birthDay = object.birthDay ?? 0;
    message.starId = object.starId ?? 0;
    message.bloodType = object.bloodType ?? 0;
    message.country = object.country ?? 0;
    message.province = object.province ?? 0;
    message.city = object.city ?? 0;
    message.headId = object.headId ?? 0;
    message.job = object.job ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
