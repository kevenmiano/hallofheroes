// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaOrderInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaOrderInfoMsg {
  consortiaId: number;
  gradeOrder: number;
  fightPowerOrder: number;
  lastDayOffer: number;
  lastDayOrder: number;
  lastWeekOffer: number;
  lastWeekOrder: number;
  offer: number;
  lastDayDate: string;
  lastWeekDate: string;
}

function createBaseConsortiaOrderInfoMsg(): ConsortiaOrderInfoMsg {
  return {
    consortiaId: 0,
    gradeOrder: 0,
    fightPowerOrder: 0,
    lastDayOffer: 0,
    lastDayOrder: 0,
    lastWeekOffer: 0,
    lastWeekOrder: 0,
    offer: 0,
    lastDayDate: "",
    lastWeekDate: "",
  };
}

export const ConsortiaOrderInfoMsg: MessageFns<ConsortiaOrderInfoMsg> = {
  encode(message: ConsortiaOrderInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.gradeOrder !== 0) {
      writer.uint32(16).int32(message.gradeOrder);
    }
    if (message.fightPowerOrder !== 0) {
      writer.uint32(24).int32(message.fightPowerOrder);
    }
    if (message.lastDayOffer !== 0) {
      writer.uint32(32).int32(message.lastDayOffer);
    }
    if (message.lastDayOrder !== 0) {
      writer.uint32(40).int32(message.lastDayOrder);
    }
    if (message.lastWeekOffer !== 0) {
      writer.uint32(48).int32(message.lastWeekOffer);
    }
    if (message.lastWeekOrder !== 0) {
      writer.uint32(56).int32(message.lastWeekOrder);
    }
    if (message.offer !== 0) {
      writer.uint32(64).int32(message.offer);
    }
    if (message.lastDayDate !== "") {
      writer.uint32(74).string(message.lastDayDate);
    }
    if (message.lastWeekDate !== "") {
      writer.uint32(82).string(message.lastWeekDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaOrderInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaOrderInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gradeOrder = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fightPowerOrder = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastDayOffer = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastDayOrder = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lastWeekOffer = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.lastWeekOrder = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.offer = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastDayDate = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lastWeekDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaOrderInfoMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      gradeOrder: isSet(object.gradeOrder) ? globalThis.Number(object.gradeOrder) : 0,
      fightPowerOrder: isSet(object.fightPowerOrder) ? globalThis.Number(object.fightPowerOrder) : 0,
      lastDayOffer: isSet(object.lastDayOffer) ? globalThis.Number(object.lastDayOffer) : 0,
      lastDayOrder: isSet(object.lastDayOrder) ? globalThis.Number(object.lastDayOrder) : 0,
      lastWeekOffer: isSet(object.lastWeekOffer) ? globalThis.Number(object.lastWeekOffer) : 0,
      lastWeekOrder: isSet(object.lastWeekOrder) ? globalThis.Number(object.lastWeekOrder) : 0,
      offer: isSet(object.offer) ? globalThis.Number(object.offer) : 0,
      lastDayDate: isSet(object.lastDayDate) ? globalThis.String(object.lastDayDate) : "",
      lastWeekDate: isSet(object.lastWeekDate) ? globalThis.String(object.lastWeekDate) : "",
    };
  },

  toJSON(message: ConsortiaOrderInfoMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.gradeOrder !== 0) {
      obj.gradeOrder = Math.round(message.gradeOrder);
    }
    if (message.fightPowerOrder !== 0) {
      obj.fightPowerOrder = Math.round(message.fightPowerOrder);
    }
    if (message.lastDayOffer !== 0) {
      obj.lastDayOffer = Math.round(message.lastDayOffer);
    }
    if (message.lastDayOrder !== 0) {
      obj.lastDayOrder = Math.round(message.lastDayOrder);
    }
    if (message.lastWeekOffer !== 0) {
      obj.lastWeekOffer = Math.round(message.lastWeekOffer);
    }
    if (message.lastWeekOrder !== 0) {
      obj.lastWeekOrder = Math.round(message.lastWeekOrder);
    }
    if (message.offer !== 0) {
      obj.offer = Math.round(message.offer);
    }
    if (message.lastDayDate !== "") {
      obj.lastDayDate = message.lastDayDate;
    }
    if (message.lastWeekDate !== "") {
      obj.lastWeekDate = message.lastWeekDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaOrderInfoMsg>, I>>(base?: I): ConsortiaOrderInfoMsg {
    return ConsortiaOrderInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaOrderInfoMsg>, I>>(object: I): ConsortiaOrderInfoMsg {
    const message = createBaseConsortiaOrderInfoMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.gradeOrder = object.gradeOrder ?? 0;
    message.fightPowerOrder = object.fightPowerOrder ?? 0;
    message.lastDayOffer = object.lastDayOffer ?? 0;
    message.lastDayOrder = object.lastDayOrder ?? 0;
    message.lastWeekOffer = object.lastWeekOffer ?? 0;
    message.lastWeekOrder = object.lastWeekOrder ?? 0;
    message.offer = object.offer ?? 0;
    message.lastDayDate = object.lastDayDate ?? "";
    message.lastWeekDate = object.lastWeekDate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
