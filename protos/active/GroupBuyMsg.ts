// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/GroupBuyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface GroupBuyMsg {
  op: number;
  isOpen: boolean;
  openTime: string;
  stopTime: string;
  stopTimeStamp: string;
  giftMsg: number[];
  orderId: number;
  giftInfo: string;
  giftId: string;
  buyNum: number;
}

function createBaseGroupBuyMsg(): GroupBuyMsg {
  return {
    op: 0,
    isOpen: false,
    openTime: "",
    stopTime: "",
    stopTimeStamp: "",
    giftMsg: [],
    orderId: 0,
    giftInfo: "",
    giftId: "",
    buyNum: 0,
  };
}

export const GroupBuyMsg: MessageFns<GroupBuyMsg> = {
  encode(message: GroupBuyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.isOpen !== false) {
      writer.uint32(16).bool(message.isOpen);
    }
    if (message.openTime !== "") {
      writer.uint32(26).string(message.openTime);
    }
    if (message.stopTime !== "") {
      writer.uint32(34).string(message.stopTime);
    }
    if (message.stopTimeStamp !== "") {
      writer.uint32(42).string(message.stopTimeStamp);
    }
    writer.uint32(50).fork();
    for (const v of message.giftMsg) {
      writer.int32(v);
    }
    writer.join();
    if (message.orderId !== 0) {
      writer.uint32(56).int32(message.orderId);
    }
    if (message.giftInfo !== "") {
      writer.uint32(66).string(message.giftInfo);
    }
    if (message.giftId !== "") {
      writer.uint32(74).string(message.giftId);
    }
    if (message.buyNum !== 0) {
      writer.uint32(80).int32(message.buyNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupBuyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupBuyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isOpen = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.openTime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stopTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stopTimeStamp = reader.string();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.giftMsg.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.giftMsg.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.orderId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.giftInfo = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.giftId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.buyNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupBuyMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      isOpen: isSet(object.isOpen) ? globalThis.Boolean(object.isOpen) : false,
      openTime: isSet(object.openTime) ? globalThis.String(object.openTime) : "",
      stopTime: isSet(object.stopTime) ? globalThis.String(object.stopTime) : "",
      stopTimeStamp: isSet(object.stopTimeStamp) ? globalThis.String(object.stopTimeStamp) : "",
      giftMsg: globalThis.Array.isArray(object?.giftMsg) ? object.giftMsg.map((e: any) => globalThis.Number(e)) : [],
      orderId: isSet(object.orderId) ? globalThis.Number(object.orderId) : 0,
      giftInfo: isSet(object.giftInfo) ? globalThis.String(object.giftInfo) : "",
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "",
      buyNum: isSet(object.buyNum) ? globalThis.Number(object.buyNum) : 0,
    };
  },

  toJSON(message: GroupBuyMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.isOpen !== false) {
      obj.isOpen = message.isOpen;
    }
    if (message.openTime !== "") {
      obj.openTime = message.openTime;
    }
    if (message.stopTime !== "") {
      obj.stopTime = message.stopTime;
    }
    if (message.stopTimeStamp !== "") {
      obj.stopTimeStamp = message.stopTimeStamp;
    }
    if (message.giftMsg?.length) {
      obj.giftMsg = message.giftMsg.map((e) => Math.round(e));
    }
    if (message.orderId !== 0) {
      obj.orderId = Math.round(message.orderId);
    }
    if (message.giftInfo !== "") {
      obj.giftInfo = message.giftInfo;
    }
    if (message.giftId !== "") {
      obj.giftId = message.giftId;
    }
    if (message.buyNum !== 0) {
      obj.buyNum = Math.round(message.buyNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupBuyMsg>, I>>(base?: I): GroupBuyMsg {
    return GroupBuyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupBuyMsg>, I>>(object: I): GroupBuyMsg {
    const message = createBaseGroupBuyMsg();
    message.op = object.op ?? 0;
    message.isOpen = object.isOpen ?? false;
    message.openTime = object.openTime ?? "";
    message.stopTime = object.stopTime ?? "";
    message.stopTimeStamp = object.stopTimeStamp ?? "";
    message.giftMsg = object.giftMsg?.map((e) => e) || [];
    message.orderId = object.orderId ?? 0;
    message.giftInfo = object.giftInfo ?? "";
    message.giftId = object.giftId ?? "";
    message.buyNum = object.buyNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
