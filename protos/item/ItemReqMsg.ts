// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: item/ItemReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.item";

export interface ItemReqMsg {
  beginBagType: number;
  beginObjId: number;
  beginPos: number;
  endBagType: number;
  endObjId: number;
  endPos: number;
  count: number;
  objectId: number;
  isTakeOff: boolean;
}

function createBaseItemReqMsg(): ItemReqMsg {
  return {
    beginBagType: 0,
    beginObjId: 0,
    beginPos: 0,
    endBagType: 0,
    endObjId: 0,
    endPos: 0,
    count: 0,
    objectId: 0,
    isTakeOff: false,
  };
}

export const ItemReqMsg: MessageFns<ItemReqMsg> = {
  encode(message: ItemReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.beginBagType !== 0) {
      writer.uint32(8).int32(message.beginBagType);
    }
    if (message.beginObjId !== 0) {
      writer.uint32(16).int32(message.beginObjId);
    }
    if (message.beginPos !== 0) {
      writer.uint32(24).int32(message.beginPos);
    }
    if (message.endBagType !== 0) {
      writer.uint32(32).int32(message.endBagType);
    }
    if (message.endObjId !== 0) {
      writer.uint32(40).int32(message.endObjId);
    }
    if (message.endPos !== 0) {
      writer.uint32(48).int32(message.endPos);
    }
    if (message.count !== 0) {
      writer.uint32(56).int32(message.count);
    }
    if (message.objectId !== 0) {
      writer.uint32(64).int32(message.objectId);
    }
    if (message.isTakeOff !== false) {
      writer.uint32(72).bool(message.isTakeOff);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.beginBagType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.beginObjId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.beginPos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endBagType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endObjId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endPos = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.objectId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isTakeOff = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemReqMsg {
    return {
      beginBagType: isSet(object.beginBagType) ? globalThis.Number(object.beginBagType) : 0,
      beginObjId: isSet(object.beginObjId) ? globalThis.Number(object.beginObjId) : 0,
      beginPos: isSet(object.beginPos) ? globalThis.Number(object.beginPos) : 0,
      endBagType: isSet(object.endBagType) ? globalThis.Number(object.endBagType) : 0,
      endObjId: isSet(object.endObjId) ? globalThis.Number(object.endObjId) : 0,
      endPos: isSet(object.endPos) ? globalThis.Number(object.endPos) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      objectId: isSet(object.objectId) ? globalThis.Number(object.objectId) : 0,
      isTakeOff: isSet(object.isTakeOff) ? globalThis.Boolean(object.isTakeOff) : false,
    };
  },

  toJSON(message: ItemReqMsg): unknown {
    const obj: any = {};
    if (message.beginBagType !== 0) {
      obj.beginBagType = Math.round(message.beginBagType);
    }
    if (message.beginObjId !== 0) {
      obj.beginObjId = Math.round(message.beginObjId);
    }
    if (message.beginPos !== 0) {
      obj.beginPos = Math.round(message.beginPos);
    }
    if (message.endBagType !== 0) {
      obj.endBagType = Math.round(message.endBagType);
    }
    if (message.endObjId !== 0) {
      obj.endObjId = Math.round(message.endObjId);
    }
    if (message.endPos !== 0) {
      obj.endPos = Math.round(message.endPos);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.objectId !== 0) {
      obj.objectId = Math.round(message.objectId);
    }
    if (message.isTakeOff !== false) {
      obj.isTakeOff = message.isTakeOff;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemReqMsg>, I>>(base?: I): ItemReqMsg {
    return ItemReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemReqMsg>, I>>(object: I): ItemReqMsg {
    const message = createBaseItemReqMsg();
    message.beginBagType = object.beginBagType ?? 0;
    message.beginObjId = object.beginObjId ?? 0;
    message.beginPos = object.beginPos ?? 0;
    message.endBagType = object.endBagType ?? 0;
    message.endObjId = object.endObjId ?? 0;
    message.endPos = object.endPos ?? 0;
    message.count = object.count ?? 0;
    message.objectId = object.objectId ?? 0;
    message.isTakeOff = object.isTakeOff ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
