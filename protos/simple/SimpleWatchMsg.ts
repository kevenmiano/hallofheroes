// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/SimpleWatchMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface SimpleWatchMsg {
  gridType: number;
  gridPos: number;
  jion1: number;
  jion2: number;
  jion3: number;
  jion4: number;
}

function createBaseSimpleWatchMsg(): SimpleWatchMsg {
  return { gridType: 0, gridPos: 0, jion1: 0, jion2: 0, jion3: 0, jion4: 0 };
}

export const SimpleWatchMsg: MessageFns<SimpleWatchMsg> = {
  encode(message: SimpleWatchMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gridType !== 0) {
      writer.uint32(8).int32(message.gridType);
    }
    if (message.gridPos !== 0) {
      writer.uint32(16).int32(message.gridPos);
    }
    if (message.jion1 !== 0) {
      writer.uint32(24).int32(message.jion1);
    }
    if (message.jion2 !== 0) {
      writer.uint32(32).int32(message.jion2);
    }
    if (message.jion3 !== 0) {
      writer.uint32(40).int32(message.jion3);
    }
    if (message.jion4 !== 0) {
      writer.uint32(48).int32(message.jion4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleWatchMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleWatchMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gridType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gridPos = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.jion1 = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.jion2 = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.jion3 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.jion4 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleWatchMsg {
    return {
      gridType: isSet(object.gridType) ? globalThis.Number(object.gridType) : 0,
      gridPos: isSet(object.gridPos) ? globalThis.Number(object.gridPos) : 0,
      jion1: isSet(object.jion1) ? globalThis.Number(object.jion1) : 0,
      jion2: isSet(object.jion2) ? globalThis.Number(object.jion2) : 0,
      jion3: isSet(object.jion3) ? globalThis.Number(object.jion3) : 0,
      jion4: isSet(object.jion4) ? globalThis.Number(object.jion4) : 0,
    };
  },

  toJSON(message: SimpleWatchMsg): unknown {
    const obj: any = {};
    if (message.gridType !== 0) {
      obj.gridType = Math.round(message.gridType);
    }
    if (message.gridPos !== 0) {
      obj.gridPos = Math.round(message.gridPos);
    }
    if (message.jion1 !== 0) {
      obj.jion1 = Math.round(message.jion1);
    }
    if (message.jion2 !== 0) {
      obj.jion2 = Math.round(message.jion2);
    }
    if (message.jion3 !== 0) {
      obj.jion3 = Math.round(message.jion3);
    }
    if (message.jion4 !== 0) {
      obj.jion4 = Math.round(message.jion4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimpleWatchMsg>, I>>(base?: I): SimpleWatchMsg {
    return SimpleWatchMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleWatchMsg>, I>>(object: I): SimpleWatchMsg {
    const message = createBaseSimpleWatchMsg();
    message.gridType = object.gridType ?? 0;
    message.gridPos = object.gridPos ?? 0;
    message.jion1 = object.jion1 ?? 0;
    message.jion2 = object.jion2 ?? 0;
    message.jion3 = object.jion3 ?? 0;
    message.jion4 = object.jion4 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
