// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/HeroEquUpdatedMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface HeroEquUpdatedMsg {
  playerId: number;
  armStr: string;
  clothStr: string;
  wing: string;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  appellId: number;
}

function createBaseHeroEquUpdatedMsg(): HeroEquUpdatedMsg {
  return {
    playerId: 0,
    armStr: "",
    clothStr: "",
    wing: "",
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    appellId: 0,
  };
}

export const HeroEquUpdatedMsg: MessageFns<HeroEquUpdatedMsg> = {
  encode(message: HeroEquUpdatedMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.armStr !== "") {
      writer.uint32(18).string(message.armStr);
    }
    if (message.clothStr !== "") {
      writer.uint32(26).string(message.clothStr);
    }
    if (message.wing !== "") {
      writer.uint32(34).string(message.wing);
    }
    if (message.hat !== "") {
      writer.uint32(42).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(50).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(58).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(64).bool(message.hide);
    }
    if (message.appellId !== 0) {
      writer.uint32(72).int32(message.appellId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroEquUpdatedMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroEquUpdatedMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.armStr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clothStr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.appellId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroEquUpdatedMsg {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      armStr: isSet(object.armStr) ? globalThis.String(object.armStr) : "",
      clothStr: isSet(object.clothStr) ? globalThis.String(object.clothStr) : "",
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      appellId: isSet(object.appellId) ? globalThis.Number(object.appellId) : 0,
    };
  },

  toJSON(message: HeroEquUpdatedMsg): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.armStr !== "") {
      obj.armStr = message.armStr;
    }
    if (message.clothStr !== "") {
      obj.clothStr = message.clothStr;
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.appellId !== 0) {
      obj.appellId = Math.round(message.appellId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroEquUpdatedMsg>, I>>(base?: I): HeroEquUpdatedMsg {
    return HeroEquUpdatedMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroEquUpdatedMsg>, I>>(object: I): HeroEquUpdatedMsg {
    const message = createBaseHeroEquUpdatedMsg();
    message.playerId = object.playerId ?? 0;
    message.armStr = object.armStr ?? "";
    message.clothStr = object.clothStr ?? "";
    message.wing = object.wing ?? "";
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.appellId = object.appellId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
