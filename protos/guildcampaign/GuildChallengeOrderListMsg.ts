// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: guildcampaign/GuildChallengeOrderListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.guildcampaign";

export interface GuildChallengeOrderListMsg {
  info: number[];
  guildName: string;
  guildGrade: number;
  guildOffer: number;
  guildOrder: number;
  guildFighPower: number;
  challenge: number[];
}

function createBaseGuildChallengeOrderListMsg(): GuildChallengeOrderListMsg {
  return { info: [], guildName: "", guildGrade: 0, guildOffer: 0, guildOrder: 0, guildFighPower: 0, challenge: [] };
}

export const GuildChallengeOrderListMsg: MessageFns<GuildChallengeOrderListMsg> = {
  encode(message: GuildChallengeOrderListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.info) {
      writer.int32(v);
    }
    writer.join();
    if (message.guildName !== "") {
      writer.uint32(18).string(message.guildName);
    }
    if (message.guildGrade !== 0) {
      writer.uint32(24).int32(message.guildGrade);
    }
    if (message.guildOffer !== 0) {
      writer.uint32(32).int32(message.guildOffer);
    }
    if (message.guildOrder !== 0) {
      writer.uint32(40).int32(message.guildOrder);
    }
    if (message.guildFighPower !== 0) {
      writer.uint32(48).int32(message.guildFighPower);
    }
    writer.uint32(58).fork();
    for (const v of message.challenge) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GuildChallengeOrderListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuildChallengeOrderListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.info.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.info.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guildName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.guildGrade = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.guildOffer = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.guildOrder = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.guildFighPower = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.challenge.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.challenge.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GuildChallengeOrderListMsg {
    return {
      info: globalThis.Array.isArray(object?.info) ? object.info.map((e: any) => globalThis.Number(e)) : [],
      guildName: isSet(object.guildName) ? globalThis.String(object.guildName) : "",
      guildGrade: isSet(object.guildGrade) ? globalThis.Number(object.guildGrade) : 0,
      guildOffer: isSet(object.guildOffer) ? globalThis.Number(object.guildOffer) : 0,
      guildOrder: isSet(object.guildOrder) ? globalThis.Number(object.guildOrder) : 0,
      guildFighPower: isSet(object.guildFighPower) ? globalThis.Number(object.guildFighPower) : 0,
      challenge: globalThis.Array.isArray(object?.challenge)
        ? object.challenge.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GuildChallengeOrderListMsg): unknown {
    const obj: any = {};
    if (message.info?.length) {
      obj.info = message.info.map((e) => Math.round(e));
    }
    if (message.guildName !== "") {
      obj.guildName = message.guildName;
    }
    if (message.guildGrade !== 0) {
      obj.guildGrade = Math.round(message.guildGrade);
    }
    if (message.guildOffer !== 0) {
      obj.guildOffer = Math.round(message.guildOffer);
    }
    if (message.guildOrder !== 0) {
      obj.guildOrder = Math.round(message.guildOrder);
    }
    if (message.guildFighPower !== 0) {
      obj.guildFighPower = Math.round(message.guildFighPower);
    }
    if (message.challenge?.length) {
      obj.challenge = message.challenge.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GuildChallengeOrderListMsg>, I>>(base?: I): GuildChallengeOrderListMsg {
    return GuildChallengeOrderListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GuildChallengeOrderListMsg>, I>>(object: I): GuildChallengeOrderListMsg {
    const message = createBaseGuildChallengeOrderListMsg();
    message.info = object.info?.map((e) => e) || [];
    message.guildName = object.guildName ?? "";
    message.guildGrade = object.guildGrade ?? 0;
    message.guildOffer = object.guildOffer ?? 0;
    message.guildOrder = object.guildOrder ?? 0;
    message.guildFighPower = object.guildFighPower ?? 0;
    message.challenge = object.challenge?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
