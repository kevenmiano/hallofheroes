// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignTakeCardsMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignTakeCardsMsg {
  playerId: number;
  name: string;
  pay: boolean;
  index: number;
  templateId: number;
  count: number;
  bind: boolean;
  randomSkill1: number;
  randomSkill2: number;
  randomSkill3: number;
  randomSkill4: number;
  randomSkill5: number;
}

function createBaseCampaignTakeCardsMsg(): CampaignTakeCardsMsg {
  return {
    playerId: 0,
    name: "",
    pay: false,
    index: 0,
    templateId: 0,
    count: 0,
    bind: false,
    randomSkill1: 0,
    randomSkill2: 0,
    randomSkill3: 0,
    randomSkill4: 0,
    randomSkill5: 0,
  };
}

export const CampaignTakeCardsMsg: MessageFns<CampaignTakeCardsMsg> = {
  encode(message: CampaignTakeCardsMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.pay !== false) {
      writer.uint32(24).bool(message.pay);
    }
    if (message.index !== 0) {
      writer.uint32(32).int32(message.index);
    }
    if (message.templateId !== 0) {
      writer.uint32(40).int32(message.templateId);
    }
    if (message.count !== 0) {
      writer.uint32(48).int32(message.count);
    }
    if (message.bind !== false) {
      writer.uint32(56).bool(message.bind);
    }
    if (message.randomSkill1 !== 0) {
      writer.uint32(64).int32(message.randomSkill1);
    }
    if (message.randomSkill2 !== 0) {
      writer.uint32(72).int32(message.randomSkill2);
    }
    if (message.randomSkill3 !== 0) {
      writer.uint32(80).int32(message.randomSkill3);
    }
    if (message.randomSkill4 !== 0) {
      writer.uint32(88).int32(message.randomSkill4);
    }
    if (message.randomSkill5 !== 0) {
      writer.uint32(96).int32(message.randomSkill5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignTakeCardsMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignTakeCardsMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pay = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bind = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.randomSkill1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.randomSkill2 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.randomSkill3 = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.randomSkill4 = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.randomSkill5 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignTakeCardsMsg {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pay: isSet(object.pay) ? globalThis.Boolean(object.pay) : false,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      bind: isSet(object.bind) ? globalThis.Boolean(object.bind) : false,
      randomSkill1: isSet(object.randomSkill1) ? globalThis.Number(object.randomSkill1) : 0,
      randomSkill2: isSet(object.randomSkill2) ? globalThis.Number(object.randomSkill2) : 0,
      randomSkill3: isSet(object.randomSkill3) ? globalThis.Number(object.randomSkill3) : 0,
      randomSkill4: isSet(object.randomSkill4) ? globalThis.Number(object.randomSkill4) : 0,
      randomSkill5: isSet(object.randomSkill5) ? globalThis.Number(object.randomSkill5) : 0,
    };
  },

  toJSON(message: CampaignTakeCardsMsg): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pay !== false) {
      obj.pay = message.pay;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.bind !== false) {
      obj.bind = message.bind;
    }
    if (message.randomSkill1 !== 0) {
      obj.randomSkill1 = Math.round(message.randomSkill1);
    }
    if (message.randomSkill2 !== 0) {
      obj.randomSkill2 = Math.round(message.randomSkill2);
    }
    if (message.randomSkill3 !== 0) {
      obj.randomSkill3 = Math.round(message.randomSkill3);
    }
    if (message.randomSkill4 !== 0) {
      obj.randomSkill4 = Math.round(message.randomSkill4);
    }
    if (message.randomSkill5 !== 0) {
      obj.randomSkill5 = Math.round(message.randomSkill5);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignTakeCardsMsg>, I>>(base?: I): CampaignTakeCardsMsg {
    return CampaignTakeCardsMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignTakeCardsMsg>, I>>(object: I): CampaignTakeCardsMsg {
    const message = createBaseCampaignTakeCardsMsg();
    message.playerId = object.playerId ?? 0;
    message.name = object.name ?? "";
    message.pay = object.pay ?? false;
    message.index = object.index ?? 0;
    message.templateId = object.templateId ?? 0;
    message.count = object.count ?? 0;
    message.bind = object.bind ?? false;
    message.randomSkill1 = object.randomSkill1 ?? 0;
    message.randomSkill2 = object.randomSkill2 ?? 0;
    message.randomSkill3 = object.randomSkill3 ?? 0;
    message.randomSkill4 = object.randomSkill4 ?? 0;
    message.randomSkill5 = object.randomSkill5 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
