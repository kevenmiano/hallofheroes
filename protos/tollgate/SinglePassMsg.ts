// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: tollgate/SinglePassMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.tollgate";

export interface SinglePassMsg {
  userId: number;
  area: number;
  maxIndex: number;
  areaReward: string;
  rankInfo: number[];
  count: number;
  itemCount: number;
  from: number;
}

function createBaseSinglePassMsg(): SinglePassMsg {
  return { userId: 0, area: 0, maxIndex: 0, areaReward: "", rankInfo: [], count: 0, itemCount: 0, from: 0 };
}

export const SinglePassMsg: MessageFns<SinglePassMsg> = {
  encode(message: SinglePassMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.area !== 0) {
      writer.uint32(16).int32(message.area);
    }
    if (message.maxIndex !== 0) {
      writer.uint32(24).int32(message.maxIndex);
    }
    if (message.areaReward !== "") {
      writer.uint32(34).string(message.areaReward);
    }
    writer.uint32(42).fork();
    for (const v of message.rankInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.count !== 0) {
      writer.uint32(48).int32(message.count);
    }
    if (message.itemCount !== 0) {
      writer.uint32(56).int32(message.itemCount);
    }
    if (message.from !== 0) {
      writer.uint32(64).int32(message.from);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SinglePassMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSinglePassMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.area = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxIndex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.areaReward = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.rankInfo.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rankInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.itemCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.from = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SinglePassMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      area: isSet(object.area) ? globalThis.Number(object.area) : 0,
      maxIndex: isSet(object.maxIndex) ? globalThis.Number(object.maxIndex) : 0,
      areaReward: isSet(object.areaReward) ? globalThis.String(object.areaReward) : "",
      rankInfo: globalThis.Array.isArray(object?.rankInfo) ? object.rankInfo.map((e: any) => globalThis.Number(e)) : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : 0,
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
    };
  },

  toJSON(message: SinglePassMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.area !== 0) {
      obj.area = Math.round(message.area);
    }
    if (message.maxIndex !== 0) {
      obj.maxIndex = Math.round(message.maxIndex);
    }
    if (message.areaReward !== "") {
      obj.areaReward = message.areaReward;
    }
    if (message.rankInfo?.length) {
      obj.rankInfo = message.rankInfo.map((e) => Math.round(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.itemCount !== 0) {
      obj.itemCount = Math.round(message.itemCount);
    }
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SinglePassMsg>, I>>(base?: I): SinglePassMsg {
    return SinglePassMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SinglePassMsg>, I>>(object: I): SinglePassMsg {
    const message = createBaseSinglePassMsg();
    message.userId = object.userId ?? 0;
    message.area = object.area ?? 0;
    message.maxIndex = object.maxIndex ?? 0;
    message.areaReward = object.areaReward ?? "";
    message.rankInfo = object.rankInfo?.map((e) => e) || [];
    message.count = object.count ?? 0;
    message.itemCount = object.itemCount ?? 0;
    message.from = object.from ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
