// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/DoubleMountMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface DoubleMountMsg {
  op: number;
  inviteUserId: number;
  agree: number;
  driverId: number;
  uniqueKey: string;
  kickOutId: number;
}

function createBaseDoubleMountMsg(): DoubleMountMsg {
  return { op: 0, inviteUserId: 0, agree: 0, driverId: 0, uniqueKey: "", kickOutId: 0 };
}

export const DoubleMountMsg: MessageFns<DoubleMountMsg> = {
  encode(message: DoubleMountMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.inviteUserId !== 0) {
      writer.uint32(16).int32(message.inviteUserId);
    }
    if (message.agree !== 0) {
      writer.uint32(24).int32(message.agree);
    }
    if (message.driverId !== 0) {
      writer.uint32(32).int32(message.driverId);
    }
    if (message.uniqueKey !== "") {
      writer.uint32(42).string(message.uniqueKey);
    }
    if (message.kickOutId !== 0) {
      writer.uint32(48).int32(message.kickOutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoubleMountMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoubleMountMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.inviteUserId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.agree = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.driverId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uniqueKey = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.kickOutId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoubleMountMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      inviteUserId: isSet(object.inviteUserId) ? globalThis.Number(object.inviteUserId) : 0,
      agree: isSet(object.agree) ? globalThis.Number(object.agree) : 0,
      driverId: isSet(object.driverId) ? globalThis.Number(object.driverId) : 0,
      uniqueKey: isSet(object.uniqueKey) ? globalThis.String(object.uniqueKey) : "",
      kickOutId: isSet(object.kickOutId) ? globalThis.Number(object.kickOutId) : 0,
    };
  },

  toJSON(message: DoubleMountMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.inviteUserId !== 0) {
      obj.inviteUserId = Math.round(message.inviteUserId);
    }
    if (message.agree !== 0) {
      obj.agree = Math.round(message.agree);
    }
    if (message.driverId !== 0) {
      obj.driverId = Math.round(message.driverId);
    }
    if (message.uniqueKey !== "") {
      obj.uniqueKey = message.uniqueKey;
    }
    if (message.kickOutId !== 0) {
      obj.kickOutId = Math.round(message.kickOutId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoubleMountMsg>, I>>(base?: I): DoubleMountMsg {
    return DoubleMountMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoubleMountMsg>, I>>(object: I): DoubleMountMsg {
    const message = createBaseDoubleMountMsg();
    message.op = object.op ?? 0;
    message.inviteUserId = object.inviteUserId ?? 0;
    message.agree = object.agree ?? 0;
    message.driverId = object.driverId ?? 0;
    message.uniqueKey = object.uniqueKey ?? "";
    message.kickOutId = object.kickOutId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
