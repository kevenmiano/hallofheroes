// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: outercity/PlayerMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.outercity";

export interface PlayerMsg {
  userId: number;
  avatar: number;
  job: number;
  grade: number;
  avatarIcon: number;
  nickName: string;
  guildId: number;
}

function createBasePlayerMsg(): PlayerMsg {
  return { userId: 0, avatar: 0, job: 0, grade: 0, avatarIcon: 0, nickName: "", guildId: 0 };
}

export const PlayerMsg: MessageFns<PlayerMsg> = {
  encode(message: PlayerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatar !== 0) {
      writer.uint32(16).int32(message.avatar);
    }
    if (message.job !== 0) {
      writer.uint32(24).int32(message.job);
    }
    if (message.grade !== 0) {
      writer.uint32(32).int32(message.grade);
    }
    if (message.avatarIcon !== 0) {
      writer.uint32(40).int32(message.avatarIcon);
    }
    if (message.nickName !== "") {
      writer.uint32(50).string(message.nickName);
    }
    if (message.guildId !== 0) {
      writer.uint32(56).int32(message.guildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.avatar = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.avatarIcon = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.guildId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatar: isSet(object.avatar) ? globalThis.Number(object.avatar) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      avatarIcon: isSet(object.avatarIcon) ? globalThis.Number(object.avatarIcon) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
    };
  },

  toJSON(message: PlayerMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatar !== 0) {
      obj.avatar = Math.round(message.avatar);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.avatarIcon !== 0) {
      obj.avatarIcon = Math.round(message.avatarIcon);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.guildId !== 0) {
      obj.guildId = Math.round(message.guildId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerMsg>, I>>(base?: I): PlayerMsg {
    return PlayerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerMsg>, I>>(object: I): PlayerMsg {
    const message = createBasePlayerMsg();
    message.userId = object.userId ?? 0;
    message.avatar = object.avatar ?? 0;
    message.job = object.job ?? 0;
    message.grade = object.grade ?? 0;
    message.avatarIcon = object.avatarIcon ?? 0;
    message.nickName = object.nickName ?? "";
    message.guildId = object.guildId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
