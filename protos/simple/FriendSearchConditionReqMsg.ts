// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/FriendSearchConditionReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface FriendSearchConditionReqMsg {
  pageIndex: number;
  sex: number;
  birthMonth: number;
  birthDay: number;
  starId: number;
  bloodType: number;
  country: number;
  province: number;
  city: number;
}

function createBaseFriendSearchConditionReqMsg(): FriendSearchConditionReqMsg {
  return {
    pageIndex: 0,
    sex: 0,
    birthMonth: 0,
    birthDay: 0,
    starId: 0,
    bloodType: 0,
    country: 0,
    province: 0,
    city: 0,
  };
}

export const FriendSearchConditionReqMsg: MessageFns<FriendSearchConditionReqMsg> = {
  encode(message: FriendSearchConditionReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageIndex !== 0) {
      writer.uint32(8).int32(message.pageIndex);
    }
    if (message.sex !== 0) {
      writer.uint32(16).int32(message.sex);
    }
    if (message.birthMonth !== 0) {
      writer.uint32(24).int32(message.birthMonth);
    }
    if (message.birthDay !== 0) {
      writer.uint32(32).int32(message.birthDay);
    }
    if (message.starId !== 0) {
      writer.uint32(40).int32(message.starId);
    }
    if (message.bloodType !== 0) {
      writer.uint32(48).int32(message.bloodType);
    }
    if (message.country !== 0) {
      writer.uint32(56).int32(message.country);
    }
    if (message.province !== 0) {
      writer.uint32(64).int32(message.province);
    }
    if (message.city !== 0) {
      writer.uint32(72).int32(message.city);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendSearchConditionReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendSearchConditionReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageIndex = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sex = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.birthMonth = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.birthDay = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.starId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bloodType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.country = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.province = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.city = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendSearchConditionReqMsg {
    return {
      pageIndex: isSet(object.pageIndex) ? globalThis.Number(object.pageIndex) : 0,
      sex: isSet(object.sex) ? globalThis.Number(object.sex) : 0,
      birthMonth: isSet(object.birthMonth) ? globalThis.Number(object.birthMonth) : 0,
      birthDay: isSet(object.birthDay) ? globalThis.Number(object.birthDay) : 0,
      starId: isSet(object.starId) ? globalThis.Number(object.starId) : 0,
      bloodType: isSet(object.bloodType) ? globalThis.Number(object.bloodType) : 0,
      country: isSet(object.country) ? globalThis.Number(object.country) : 0,
      province: isSet(object.province) ? globalThis.Number(object.province) : 0,
      city: isSet(object.city) ? globalThis.Number(object.city) : 0,
    };
  },

  toJSON(message: FriendSearchConditionReqMsg): unknown {
    const obj: any = {};
    if (message.pageIndex !== 0) {
      obj.pageIndex = Math.round(message.pageIndex);
    }
    if (message.sex !== 0) {
      obj.sex = Math.round(message.sex);
    }
    if (message.birthMonth !== 0) {
      obj.birthMonth = Math.round(message.birthMonth);
    }
    if (message.birthDay !== 0) {
      obj.birthDay = Math.round(message.birthDay);
    }
    if (message.starId !== 0) {
      obj.starId = Math.round(message.starId);
    }
    if (message.bloodType !== 0) {
      obj.bloodType = Math.round(message.bloodType);
    }
    if (message.country !== 0) {
      obj.country = Math.round(message.country);
    }
    if (message.province !== 0) {
      obj.province = Math.round(message.province);
    }
    if (message.city !== 0) {
      obj.city = Math.round(message.city);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendSearchConditionReqMsg>, I>>(base?: I): FriendSearchConditionReqMsg {
    return FriendSearchConditionReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendSearchConditionReqMsg>, I>>(object: I): FriendSearchConditionReqMsg {
    const message = createBaseFriendSearchConditionReqMsg();
    message.pageIndex = object.pageIndex ?? 0;
    message.sex = object.sex ?? 0;
    message.birthMonth = object.birthMonth ?? 0;
    message.birthDay = object.birthDay ?? 0;
    message.starId = object.starId ?? 0;
    message.bloodType = object.bloodType ?? 0;
    message.country = object.country ?? 0;
    message.province = object.province ?? 0;
    message.city = object.city ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
