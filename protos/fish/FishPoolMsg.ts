// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: fish/FishPoolMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.fish";

export interface FishPoolMsg {
  userId: number;
  level: number;
  gp: number;
  score: number;
  cd: string;
  count: number;
  maxCount: number;
  tool1: number;
  tool2: number;
  tool3: number;
  tool4: number;
  hookState: number;
  order: number;
  fishplayers: number[];
}

function createBaseFishPoolMsg(): FishPoolMsg {
  return {
    userId: 0,
    level: 0,
    gp: 0,
    score: 0,
    cd: "",
    count: 0,
    maxCount: 0,
    tool1: 0,
    tool2: 0,
    tool3: 0,
    tool4: 0,
    hookState: 0,
    order: 0,
    fishplayers: [],
  };
}

export const FishPoolMsg: MessageFns<FishPoolMsg> = {
  encode(message: FishPoolMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.gp !== 0) {
      writer.uint32(24).int32(message.gp);
    }
    if (message.score !== 0) {
      writer.uint32(32).int32(message.score);
    }
    if (message.cd !== "") {
      writer.uint32(42).string(message.cd);
    }
    if (message.count !== 0) {
      writer.uint32(48).int32(message.count);
    }
    if (message.maxCount !== 0) {
      writer.uint32(56).int32(message.maxCount);
    }
    if (message.tool1 !== 0) {
      writer.uint32(64).int32(message.tool1);
    }
    if (message.tool2 !== 0) {
      writer.uint32(72).int32(message.tool2);
    }
    if (message.tool3 !== 0) {
      writer.uint32(80).int32(message.tool3);
    }
    if (message.tool4 !== 0) {
      writer.uint32(88).int32(message.tool4);
    }
    if (message.hookState !== 0) {
      writer.uint32(96).int32(message.hookState);
    }
    if (message.order !== 0) {
      writer.uint32(104).int32(message.order);
    }
    writer.uint32(114).fork();
    for (const v of message.fishplayers) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FishPoolMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFishPoolMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gp = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cd = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.maxCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.tool1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.tool2 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.tool3 = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.tool4 = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.hookState = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.fishplayers.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.fishplayers.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FishPoolMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      gp: isSet(object.gp) ? globalThis.Number(object.gp) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      cd: isSet(object.cd) ? globalThis.String(object.cd) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      maxCount: isSet(object.maxCount) ? globalThis.Number(object.maxCount) : 0,
      tool1: isSet(object.tool1) ? globalThis.Number(object.tool1) : 0,
      tool2: isSet(object.tool2) ? globalThis.Number(object.tool2) : 0,
      tool3: isSet(object.tool3) ? globalThis.Number(object.tool3) : 0,
      tool4: isSet(object.tool4) ? globalThis.Number(object.tool4) : 0,
      hookState: isSet(object.hookState) ? globalThis.Number(object.hookState) : 0,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      fishplayers: globalThis.Array.isArray(object?.fishplayers)
        ? object.fishplayers.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: FishPoolMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.gp !== 0) {
      obj.gp = Math.round(message.gp);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.cd !== "") {
      obj.cd = message.cd;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.maxCount !== 0) {
      obj.maxCount = Math.round(message.maxCount);
    }
    if (message.tool1 !== 0) {
      obj.tool1 = Math.round(message.tool1);
    }
    if (message.tool2 !== 0) {
      obj.tool2 = Math.round(message.tool2);
    }
    if (message.tool3 !== 0) {
      obj.tool3 = Math.round(message.tool3);
    }
    if (message.tool4 !== 0) {
      obj.tool4 = Math.round(message.tool4);
    }
    if (message.hookState !== 0) {
      obj.hookState = Math.round(message.hookState);
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.fishplayers?.length) {
      obj.fishplayers = message.fishplayers.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FishPoolMsg>, I>>(base?: I): FishPoolMsg {
    return FishPoolMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FishPoolMsg>, I>>(object: I): FishPoolMsg {
    const message = createBaseFishPoolMsg();
    message.userId = object.userId ?? 0;
    message.level = object.level ?? 0;
    message.gp = object.gp ?? 0;
    message.score = object.score ?? 0;
    message.cd = object.cd ?? "";
    message.count = object.count ?? 0;
    message.maxCount = object.maxCount ?? 0;
    message.tool1 = object.tool1 ?? 0;
    message.tool2 = object.tool2 ?? 0;
    message.tool3 = object.tool3 ?? 0;
    message.tool4 = object.tool4 ?? 0;
    message.hookState = object.hookState ?? 0;
    message.order = object.order ?? 0;
    message.fishplayers = object.fishplayers?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
