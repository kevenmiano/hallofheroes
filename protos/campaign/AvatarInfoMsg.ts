// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/AvatarInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface AvatarInfoMsg {
  mountTempId: number;
  isExist: boolean;
  expairDate: string;
  activeDate: string;
  validity: number;
  param1: number;
  param2: number;
  starLevel: number;
  blessing: number;
}

function createBaseAvatarInfoMsg(): AvatarInfoMsg {
  return {
    mountTempId: 0,
    isExist: false,
    expairDate: "",
    activeDate: "",
    validity: 0,
    param1: 0,
    param2: 0,
    starLevel: 0,
    blessing: 0,
  };
}

export const AvatarInfoMsg: MessageFns<AvatarInfoMsg> = {
  encode(message: AvatarInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mountTempId !== 0) {
      writer.uint32(8).int32(message.mountTempId);
    }
    if (message.isExist !== false) {
      writer.uint32(16).bool(message.isExist);
    }
    if (message.expairDate !== "") {
      writer.uint32(26).string(message.expairDate);
    }
    if (message.activeDate !== "") {
      writer.uint32(34).string(message.activeDate);
    }
    if (message.validity !== 0) {
      writer.uint32(40).int32(message.validity);
    }
    if (message.param1 !== 0) {
      writer.uint32(48).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(56).int32(message.param2);
    }
    if (message.starLevel !== 0) {
      writer.uint32(64).int32(message.starLevel);
    }
    if (message.blessing !== 0) {
      writer.uint32(72).int32(message.blessing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvatarInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvatarInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mountTempId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expairDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.activeDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.validity = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.starLevel = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.blessing = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvatarInfoMsg {
    return {
      mountTempId: isSet(object.mountTempId) ? globalThis.Number(object.mountTempId) : 0,
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      expairDate: isSet(object.expairDate) ? globalThis.String(object.expairDate) : "",
      activeDate: isSet(object.activeDate) ? globalThis.String(object.activeDate) : "",
      validity: isSet(object.validity) ? globalThis.Number(object.validity) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
      starLevel: isSet(object.starLevel) ? globalThis.Number(object.starLevel) : 0,
      blessing: isSet(object.blessing) ? globalThis.Number(object.blessing) : 0,
    };
  },

  toJSON(message: AvatarInfoMsg): unknown {
    const obj: any = {};
    if (message.mountTempId !== 0) {
      obj.mountTempId = Math.round(message.mountTempId);
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.expairDate !== "") {
      obj.expairDate = message.expairDate;
    }
    if (message.activeDate !== "") {
      obj.activeDate = message.activeDate;
    }
    if (message.validity !== 0) {
      obj.validity = Math.round(message.validity);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    if (message.starLevel !== 0) {
      obj.starLevel = Math.round(message.starLevel);
    }
    if (message.blessing !== 0) {
      obj.blessing = Math.round(message.blessing);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvatarInfoMsg>, I>>(base?: I): AvatarInfoMsg {
    return AvatarInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvatarInfoMsg>, I>>(object: I): AvatarInfoMsg {
    const message = createBaseAvatarInfoMsg();
    message.mountTempId = object.mountTempId ?? 0;
    message.isExist = object.isExist ?? false;
    message.expairDate = object.expairDate ?? "";
    message.activeDate = object.activeDate ?? "";
    message.validity = object.validity ?? 0;
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    message.starLevel = object.starLevel ?? 0;
    message.blessing = object.blessing ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
