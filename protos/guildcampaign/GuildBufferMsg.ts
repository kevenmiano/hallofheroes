// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: guildcampaign/GuildBufferMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.guildcampaign";

export interface GuildBufferMsg {
  templateId: number;
  consortiaId: number;
  bufferName: string;
  curreCount: number;
  maxCdTimer: number;
  objectData: number;
  needPay: number;
  descr: string;
  param1: string;
}

function createBaseGuildBufferMsg(): GuildBufferMsg {
  return {
    templateId: 0,
    consortiaId: 0,
    bufferName: "",
    curreCount: 0,
    maxCdTimer: 0,
    objectData: 0,
    needPay: 0,
    descr: "",
    param1: "",
  };
}

export const GuildBufferMsg: MessageFns<GuildBufferMsg> = {
  encode(message: GuildBufferMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.templateId !== 0) {
      writer.uint32(8).int32(message.templateId);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(16).int32(message.consortiaId);
    }
    if (message.bufferName !== "") {
      writer.uint32(26).string(message.bufferName);
    }
    if (message.curreCount !== 0) {
      writer.uint32(32).int32(message.curreCount);
    }
    if (message.maxCdTimer !== 0) {
      writer.uint32(40).int32(message.maxCdTimer);
    }
    if (message.objectData !== 0) {
      writer.uint32(48).int32(message.objectData);
    }
    if (message.needPay !== 0) {
      writer.uint32(56).int32(message.needPay);
    }
    if (message.descr !== "") {
      writer.uint32(66).string(message.descr);
    }
    if (message.param1 !== "") {
      writer.uint32(74).string(message.param1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GuildBufferMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuildBufferMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bufferName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.curreCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxCdTimer = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.objectData = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.needPay = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.descr = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.param1 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GuildBufferMsg {
    return {
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      bufferName: isSet(object.bufferName) ? globalThis.String(object.bufferName) : "",
      curreCount: isSet(object.curreCount) ? globalThis.Number(object.curreCount) : 0,
      maxCdTimer: isSet(object.maxCdTimer) ? globalThis.Number(object.maxCdTimer) : 0,
      objectData: isSet(object.objectData) ? globalThis.Number(object.objectData) : 0,
      needPay: isSet(object.needPay) ? globalThis.Number(object.needPay) : 0,
      descr: isSet(object.descr) ? globalThis.String(object.descr) : "",
      param1: isSet(object.param1) ? globalThis.String(object.param1) : "",
    };
  },

  toJSON(message: GuildBufferMsg): unknown {
    const obj: any = {};
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.bufferName !== "") {
      obj.bufferName = message.bufferName;
    }
    if (message.curreCount !== 0) {
      obj.curreCount = Math.round(message.curreCount);
    }
    if (message.maxCdTimer !== 0) {
      obj.maxCdTimer = Math.round(message.maxCdTimer);
    }
    if (message.objectData !== 0) {
      obj.objectData = Math.round(message.objectData);
    }
    if (message.needPay !== 0) {
      obj.needPay = Math.round(message.needPay);
    }
    if (message.descr !== "") {
      obj.descr = message.descr;
    }
    if (message.param1 !== "") {
      obj.param1 = message.param1;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GuildBufferMsg>, I>>(base?: I): GuildBufferMsg {
    return GuildBufferMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GuildBufferMsg>, I>>(object: I): GuildBufferMsg {
    const message = createBaseGuildBufferMsg();
    message.templateId = object.templateId ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.bufferName = object.bufferName ?? "";
    message.curreCount = object.curreCount ?? 0;
    message.maxCdTimer = object.maxCdTimer ?? 0;
    message.objectData = object.objectData ?? 0;
    message.needPay = object.needPay ?? 0;
    message.descr = object.descr ?? "";
    message.param1 = object.param1 ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
