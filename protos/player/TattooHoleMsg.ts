// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/TattooHoleMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface TattooHoleMsg {
  hole: number;
  OldAddProperty: number;
  OldAddingValue: number;
  OldReduceProperty: number;
  OldReduceValue: number;
  OldStage: number;
  NewAddProperty: number;
  NewAddingValue: number;
  NewReduceProperty: number;
  NewReduceValue: number;
  NewStage: number;
}

function createBaseTattooHoleMsg(): TattooHoleMsg {
  return {
    hole: 0,
    OldAddProperty: 0,
    OldAddingValue: 0,
    OldReduceProperty: 0,
    OldReduceValue: 0,
    OldStage: 0,
    NewAddProperty: 0,
    NewAddingValue: 0,
    NewReduceProperty: 0,
    NewReduceValue: 0,
    NewStage: 0,
  };
}

export const TattooHoleMsg: MessageFns<TattooHoleMsg> = {
  encode(message: TattooHoleMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hole !== 0) {
      writer.uint32(8).int32(message.hole);
    }
    if (message.OldAddProperty !== 0) {
      writer.uint32(16).int32(message.OldAddProperty);
    }
    if (message.OldAddingValue !== 0) {
      writer.uint32(24).int32(message.OldAddingValue);
    }
    if (message.OldReduceProperty !== 0) {
      writer.uint32(32).int32(message.OldReduceProperty);
    }
    if (message.OldReduceValue !== 0) {
      writer.uint32(40).int32(message.OldReduceValue);
    }
    if (message.OldStage !== 0) {
      writer.uint32(48).int32(message.OldStage);
    }
    if (message.NewAddProperty !== 0) {
      writer.uint32(56).int32(message.NewAddProperty);
    }
    if (message.NewAddingValue !== 0) {
      writer.uint32(64).int32(message.NewAddingValue);
    }
    if (message.NewReduceProperty !== 0) {
      writer.uint32(72).int32(message.NewReduceProperty);
    }
    if (message.NewReduceValue !== 0) {
      writer.uint32(80).int32(message.NewReduceValue);
    }
    if (message.NewStage !== 0) {
      writer.uint32(88).int32(message.NewStage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TattooHoleMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTattooHoleMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hole = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.OldAddProperty = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.OldAddingValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.OldReduceProperty = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.OldReduceValue = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.OldStage = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.NewAddProperty = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.NewAddingValue = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.NewReduceProperty = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.NewReduceValue = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.NewStage = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TattooHoleMsg {
    return {
      hole: isSet(object.hole) ? globalThis.Number(object.hole) : 0,
      OldAddProperty: isSet(object.OldAddProperty) ? globalThis.Number(object.OldAddProperty) : 0,
      OldAddingValue: isSet(object.OldAddingValue) ? globalThis.Number(object.OldAddingValue) : 0,
      OldReduceProperty: isSet(object.OldReduceProperty) ? globalThis.Number(object.OldReduceProperty) : 0,
      OldReduceValue: isSet(object.OldReduceValue) ? globalThis.Number(object.OldReduceValue) : 0,
      OldStage: isSet(object.OldStage) ? globalThis.Number(object.OldStage) : 0,
      NewAddProperty: isSet(object.NewAddProperty) ? globalThis.Number(object.NewAddProperty) : 0,
      NewAddingValue: isSet(object.NewAddingValue) ? globalThis.Number(object.NewAddingValue) : 0,
      NewReduceProperty: isSet(object.NewReduceProperty) ? globalThis.Number(object.NewReduceProperty) : 0,
      NewReduceValue: isSet(object.NewReduceValue) ? globalThis.Number(object.NewReduceValue) : 0,
      NewStage: isSet(object.NewStage) ? globalThis.Number(object.NewStage) : 0,
    };
  },

  toJSON(message: TattooHoleMsg): unknown {
    const obj: any = {};
    if (message.hole !== 0) {
      obj.hole = Math.round(message.hole);
    }
    if (message.OldAddProperty !== 0) {
      obj.OldAddProperty = Math.round(message.OldAddProperty);
    }
    if (message.OldAddingValue !== 0) {
      obj.OldAddingValue = Math.round(message.OldAddingValue);
    }
    if (message.OldReduceProperty !== 0) {
      obj.OldReduceProperty = Math.round(message.OldReduceProperty);
    }
    if (message.OldReduceValue !== 0) {
      obj.OldReduceValue = Math.round(message.OldReduceValue);
    }
    if (message.OldStage !== 0) {
      obj.OldStage = Math.round(message.OldStage);
    }
    if (message.NewAddProperty !== 0) {
      obj.NewAddProperty = Math.round(message.NewAddProperty);
    }
    if (message.NewAddingValue !== 0) {
      obj.NewAddingValue = Math.round(message.NewAddingValue);
    }
    if (message.NewReduceProperty !== 0) {
      obj.NewReduceProperty = Math.round(message.NewReduceProperty);
    }
    if (message.NewReduceValue !== 0) {
      obj.NewReduceValue = Math.round(message.NewReduceValue);
    }
    if (message.NewStage !== 0) {
      obj.NewStage = Math.round(message.NewStage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TattooHoleMsg>, I>>(base?: I): TattooHoleMsg {
    return TattooHoleMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TattooHoleMsg>, I>>(object: I): TattooHoleMsg {
    const message = createBaseTattooHoleMsg();
    message.hole = object.hole ?? 0;
    message.OldAddProperty = object.OldAddProperty ?? 0;
    message.OldAddingValue = object.OldAddingValue ?? 0;
    message.OldReduceProperty = object.OldReduceProperty ?? 0;
    message.OldReduceValue = object.OldReduceValue ?? 0;
    message.OldStage = object.OldStage ?? 0;
    message.NewAddProperty = object.NewAddProperty ?? 0;
    message.NewAddingValue = object.NewAddingValue ?? 0;
    message.NewReduceProperty = object.NewReduceProperty ?? 0;
    message.NewReduceValue = object.NewReduceValue ?? 0;
    message.NewStage = object.NewStage ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
