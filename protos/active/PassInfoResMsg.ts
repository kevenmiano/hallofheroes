// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/PassInfoResMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface PassInfoResMsg {
  leftTime: number;
  baseReward: string;
  advancedReward: string;
  exp: number;
  grade: number;
  isPay: boolean;
  state: number;
  passIndex: number;
  rewardGrade: number;
}

function createBasePassInfoResMsg(): PassInfoResMsg {
  return {
    leftTime: 0,
    baseReward: "",
    advancedReward: "",
    exp: 0,
    grade: 0,
    isPay: false,
    state: 0,
    passIndex: 0,
    rewardGrade: 0,
  };
}

export const PassInfoResMsg: MessageFns<PassInfoResMsg> = {
  encode(message: PassInfoResMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftTime !== 0) {
      writer.uint32(8).int32(message.leftTime);
    }
    if (message.baseReward !== "") {
      writer.uint32(18).string(message.baseReward);
    }
    if (message.advancedReward !== "") {
      writer.uint32(26).string(message.advancedReward);
    }
    if (message.exp !== 0) {
      writer.uint32(32).int32(message.exp);
    }
    if (message.grade !== 0) {
      writer.uint32(40).int32(message.grade);
    }
    if (message.isPay !== false) {
      writer.uint32(48).bool(message.isPay);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.passIndex !== 0) {
      writer.uint32(64).int32(message.passIndex);
    }
    if (message.rewardGrade !== 0) {
      writer.uint32(72).int32(message.rewardGrade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PassInfoResMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePassInfoResMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseReward = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.advancedReward = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.exp = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isPay = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.passIndex = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.rewardGrade = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PassInfoResMsg {
    return {
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      baseReward: isSet(object.baseReward) ? globalThis.String(object.baseReward) : "",
      advancedReward: isSet(object.advancedReward) ? globalThis.String(object.advancedReward) : "",
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      isPay: isSet(object.isPay) ? globalThis.Boolean(object.isPay) : false,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      passIndex: isSet(object.passIndex) ? globalThis.Number(object.passIndex) : 0,
      rewardGrade: isSet(object.rewardGrade) ? globalThis.Number(object.rewardGrade) : 0,
    };
  },

  toJSON(message: PassInfoResMsg): unknown {
    const obj: any = {};
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.baseReward !== "") {
      obj.baseReward = message.baseReward;
    }
    if (message.advancedReward !== "") {
      obj.advancedReward = message.advancedReward;
    }
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.isPay !== false) {
      obj.isPay = message.isPay;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.passIndex !== 0) {
      obj.passIndex = Math.round(message.passIndex);
    }
    if (message.rewardGrade !== 0) {
      obj.rewardGrade = Math.round(message.rewardGrade);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PassInfoResMsg>, I>>(base?: I): PassInfoResMsg {
    return PassInfoResMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PassInfoResMsg>, I>>(object: I): PassInfoResMsg {
    const message = createBasePassInfoResMsg();
    message.leftTime = object.leftTime ?? 0;
    message.baseReward = object.baseReward ?? "";
    message.advancedReward = object.advancedReward ?? "";
    message.exp = object.exp ?? 0;
    message.grade = object.grade ?? 0;
    message.isPay = object.isPay ?? false;
    message.state = object.state ?? 0;
    message.passIndex = object.passIndex ?? 0;
    message.rewardGrade = object.rewardGrade ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
