// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: translate/TranslateRespMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.translate";

export interface TranslateRespMsg {
  reqid: string;
  code: number;
  errorMsg: string;
  content: string;
  tartgetLanguage: string;
  sourceLanguage: string;
  accuracy: number;
  time: string;
}

function createBaseTranslateRespMsg(): TranslateRespMsg {
  return {
    reqid: "",
    code: 0,
    errorMsg: "",
    content: "",
    tartgetLanguage: "",
    sourceLanguage: "",
    accuracy: 0,
    time: "",
  };
}

export const TranslateRespMsg: MessageFns<TranslateRespMsg> = {
  encode(message: TranslateRespMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reqid !== "") {
      writer.uint32(10).string(message.reqid);
    }
    if (message.code !== 0) {
      writer.uint32(16).int32(message.code);
    }
    if (message.errorMsg !== "") {
      writer.uint32(26).string(message.errorMsg);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.tartgetLanguage !== "") {
      writer.uint32(42).string(message.tartgetLanguage);
    }
    if (message.sourceLanguage !== "") {
      writer.uint32(50).string(message.sourceLanguage);
    }
    if (message.accuracy !== 0) {
      writer.uint32(56).int32(message.accuracy);
    }
    if (message.time !== "") {
      writer.uint32(66).string(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateRespMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateRespMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reqid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errorMsg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tartgetLanguage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sourceLanguage = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.accuracy = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.time = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateRespMsg {
    return {
      reqid: isSet(object.reqid) ? globalThis.String(object.reqid) : "",
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      errorMsg: isSet(object.errorMsg) ? globalThis.String(object.errorMsg) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      tartgetLanguage: isSet(object.tartgetLanguage) ? globalThis.String(object.tartgetLanguage) : "",
      sourceLanguage: isSet(object.sourceLanguage) ? globalThis.String(object.sourceLanguage) : "",
      accuracy: isSet(object.accuracy) ? globalThis.Number(object.accuracy) : 0,
      time: isSet(object.time) ? globalThis.String(object.time) : "",
    };
  },

  toJSON(message: TranslateRespMsg): unknown {
    const obj: any = {};
    if (message.reqid !== "") {
      obj.reqid = message.reqid;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.errorMsg !== "") {
      obj.errorMsg = message.errorMsg;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.tartgetLanguage !== "") {
      obj.tartgetLanguage = message.tartgetLanguage;
    }
    if (message.sourceLanguage !== "") {
      obj.sourceLanguage = message.sourceLanguage;
    }
    if (message.accuracy !== 0) {
      obj.accuracy = Math.round(message.accuracy);
    }
    if (message.time !== "") {
      obj.time = message.time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateRespMsg>, I>>(base?: I): TranslateRespMsg {
    return TranslateRespMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateRespMsg>, I>>(object: I): TranslateRespMsg {
    const message = createBaseTranslateRespMsg();
    message.reqid = object.reqid ?? "";
    message.code = object.code ?? 0;
    message.errorMsg = object.errorMsg ?? "";
    message.content = object.content ?? "";
    message.tartgetLanguage = object.tartgetLanguage ?? "";
    message.sourceLanguage = object.sourceLanguage ?? "";
    message.accuracy = object.accuracy ?? 0;
    message.time = object.time ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
