// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/MarriageCampaignMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface MarriageCampaignMsg {
  userIdA: number;
  nickNameA: string;
  userIdB: number;
  nickNameB: string;
  specTemplateId: number;
  beginTime: string;
  curMarId: number;
  isOver: boolean;
  userKey: string;
  createTime: string;
}

function createBaseMarriageCampaignMsg(): MarriageCampaignMsg {
  return {
    userIdA: 0,
    nickNameA: "",
    userIdB: 0,
    nickNameB: "",
    specTemplateId: 0,
    beginTime: "",
    curMarId: 0,
    isOver: false,
    userKey: "",
    createTime: "",
  };
}

export const MarriageCampaignMsg: MessageFns<MarriageCampaignMsg> = {
  encode(message: MarriageCampaignMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userIdA !== 0) {
      writer.uint32(8).int32(message.userIdA);
    }
    if (message.nickNameA !== "") {
      writer.uint32(18).string(message.nickNameA);
    }
    if (message.userIdB !== 0) {
      writer.uint32(24).int32(message.userIdB);
    }
    if (message.nickNameB !== "") {
      writer.uint32(34).string(message.nickNameB);
    }
    if (message.specTemplateId !== 0) {
      writer.uint32(40).int32(message.specTemplateId);
    }
    if (message.beginTime !== "") {
      writer.uint32(50).string(message.beginTime);
    }
    if (message.curMarId !== 0) {
      writer.uint32(56).int32(message.curMarId);
    }
    if (message.isOver !== false) {
      writer.uint32(64).bool(message.isOver);
    }
    if (message.userKey !== "") {
      writer.uint32(74).string(message.userKey);
    }
    if (message.createTime !== "") {
      writer.uint32(82).string(message.createTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarriageCampaignMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarriageCampaignMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userIdA = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickNameA = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userIdB = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nickNameB = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.specTemplateId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.beginTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curMarId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isOver = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarriageCampaignMsg {
    return {
      userIdA: isSet(object.userIdA) ? globalThis.Number(object.userIdA) : 0,
      nickNameA: isSet(object.nickNameA) ? globalThis.String(object.nickNameA) : "",
      userIdB: isSet(object.userIdB) ? globalThis.Number(object.userIdB) : 0,
      nickNameB: isSet(object.nickNameB) ? globalThis.String(object.nickNameB) : "",
      specTemplateId: isSet(object.specTemplateId) ? globalThis.Number(object.specTemplateId) : 0,
      beginTime: isSet(object.beginTime) ? globalThis.String(object.beginTime) : "",
      curMarId: isSet(object.curMarId) ? globalThis.Number(object.curMarId) : 0,
      isOver: isSet(object.isOver) ? globalThis.Boolean(object.isOver) : false,
      userKey: isSet(object.userKey) ? globalThis.String(object.userKey) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "",
    };
  },

  toJSON(message: MarriageCampaignMsg): unknown {
    const obj: any = {};
    if (message.userIdA !== 0) {
      obj.userIdA = Math.round(message.userIdA);
    }
    if (message.nickNameA !== "") {
      obj.nickNameA = message.nickNameA;
    }
    if (message.userIdB !== 0) {
      obj.userIdB = Math.round(message.userIdB);
    }
    if (message.nickNameB !== "") {
      obj.nickNameB = message.nickNameB;
    }
    if (message.specTemplateId !== 0) {
      obj.specTemplateId = Math.round(message.specTemplateId);
    }
    if (message.beginTime !== "") {
      obj.beginTime = message.beginTime;
    }
    if (message.curMarId !== 0) {
      obj.curMarId = Math.round(message.curMarId);
    }
    if (message.isOver !== false) {
      obj.isOver = message.isOver;
    }
    if (message.userKey !== "") {
      obj.userKey = message.userKey;
    }
    if (message.createTime !== "") {
      obj.createTime = message.createTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarriageCampaignMsg>, I>>(base?: I): MarriageCampaignMsg {
    return MarriageCampaignMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarriageCampaignMsg>, I>>(object: I): MarriageCampaignMsg {
    const message = createBaseMarriageCampaignMsg();
    message.userIdA = object.userIdA ?? 0;
    message.nickNameA = object.nickNameA ?? "";
    message.userIdB = object.userIdB ?? 0;
    message.nickNameB = object.nickNameB ?? "";
    message.specTemplateId = object.specTemplateId ?? 0;
    message.beginTime = object.beginTime ?? "";
    message.curMarId = object.curMarId ?? 0;
    message.isOver = object.isOver ?? false;
    message.userKey = object.userKey ?? "";
    message.createTime = object.createTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
