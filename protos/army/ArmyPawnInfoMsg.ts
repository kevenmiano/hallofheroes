// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/ArmyPawnInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface ArmyPawnInfoMsg {
  id: number;
  armyId: number;
  sites: number;
  sonType: number;
  tempateId: number;
  ownPawns: number;
  pawnLive: number[];
  fightPos: number;
  specialTempIds: string;
  comprehednTempIds: string;
  blessNum: number;
}

function createBaseArmyPawnInfoMsg(): ArmyPawnInfoMsg {
  return {
    id: 0,
    armyId: 0,
    sites: 0,
    sonType: 0,
    tempateId: 0,
    ownPawns: 0,
    pawnLive: [],
    fightPos: 0,
    specialTempIds: "",
    comprehednTempIds: "",
    blessNum: 0,
  };
}

export const ArmyPawnInfoMsg: MessageFns<ArmyPawnInfoMsg> = {
  encode(message: ArmyPawnInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.armyId !== 0) {
      writer.uint32(16).int32(message.armyId);
    }
    if (message.sites !== 0) {
      writer.uint32(24).int32(message.sites);
    }
    if (message.sonType !== 0) {
      writer.uint32(32).int32(message.sonType);
    }
    if (message.tempateId !== 0) {
      writer.uint32(40).int32(message.tempateId);
    }
    if (message.ownPawns !== 0) {
      writer.uint32(48).int32(message.ownPawns);
    }
    writer.uint32(58).fork();
    for (const v of message.pawnLive) {
      writer.int32(v);
    }
    writer.join();
    if (message.fightPos !== 0) {
      writer.uint32(64).int32(message.fightPos);
    }
    if (message.specialTempIds !== "") {
      writer.uint32(74).string(message.specialTempIds);
    }
    if (message.comprehednTempIds !== "") {
      writer.uint32(82).string(message.comprehednTempIds);
    }
    if (message.blessNum !== 0) {
      writer.uint32(88).int32(message.blessNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArmyPawnInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArmyPawnInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sites = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sonType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.tempateId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ownPawns = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.pawnLive.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pawnLive.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.fightPos = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.specialTempIds = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.comprehednTempIds = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.blessNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArmyPawnInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      sites: isSet(object.sites) ? globalThis.Number(object.sites) : 0,
      sonType: isSet(object.sonType) ? globalThis.Number(object.sonType) : 0,
      tempateId: isSet(object.tempateId) ? globalThis.Number(object.tempateId) : 0,
      ownPawns: isSet(object.ownPawns) ? globalThis.Number(object.ownPawns) : 0,
      pawnLive: globalThis.Array.isArray(object?.pawnLive) ? object.pawnLive.map((e: any) => globalThis.Number(e)) : [],
      fightPos: isSet(object.fightPos) ? globalThis.Number(object.fightPos) : 0,
      specialTempIds: isSet(object.specialTempIds) ? globalThis.String(object.specialTempIds) : "",
      comprehednTempIds: isSet(object.comprehednTempIds) ? globalThis.String(object.comprehednTempIds) : "",
      blessNum: isSet(object.blessNum) ? globalThis.Number(object.blessNum) : 0,
    };
  },

  toJSON(message: ArmyPawnInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.sites !== 0) {
      obj.sites = Math.round(message.sites);
    }
    if (message.sonType !== 0) {
      obj.sonType = Math.round(message.sonType);
    }
    if (message.tempateId !== 0) {
      obj.tempateId = Math.round(message.tempateId);
    }
    if (message.ownPawns !== 0) {
      obj.ownPawns = Math.round(message.ownPawns);
    }
    if (message.pawnLive?.length) {
      obj.pawnLive = message.pawnLive.map((e) => Math.round(e));
    }
    if (message.fightPos !== 0) {
      obj.fightPos = Math.round(message.fightPos);
    }
    if (message.specialTempIds !== "") {
      obj.specialTempIds = message.specialTempIds;
    }
    if (message.comprehednTempIds !== "") {
      obj.comprehednTempIds = message.comprehednTempIds;
    }
    if (message.blessNum !== 0) {
      obj.blessNum = Math.round(message.blessNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArmyPawnInfoMsg>, I>>(base?: I): ArmyPawnInfoMsg {
    return ArmyPawnInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArmyPawnInfoMsg>, I>>(object: I): ArmyPawnInfoMsg {
    const message = createBaseArmyPawnInfoMsg();
    message.id = object.id ?? 0;
    message.armyId = object.armyId ?? 0;
    message.sites = object.sites ?? 0;
    message.sonType = object.sonType ?? 0;
    message.tempateId = object.tempateId ?? 0;
    message.ownPawns = object.ownPawns ?? 0;
    message.pawnLive = object.pawnLive?.map((e) => e) || [];
    message.fightPos = object.fightPos ?? 0;
    message.specialTempIds = object.specialTempIds ?? "";
    message.comprehednTempIds = object.comprehednTempIds ?? "";
    message.blessNum = object.blessNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
