// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: room/RoomPlayerMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.room";

export interface RoomPlayerMsg {
  roomId: number;
  count: number;
  currentRoomIndex: number;
  playerState: number;
  heroId: number;
  playerId: number;
  grades: number;
  nickName: string;
  sex: number;
  templateId: number;
  arm: string;
  cloth: string;
  armyId: number;
  fightingCapacity: number;
  curPosX: number;
  curPosY: number;
  campaignId: number;
  onlineState: boolean;
  consortiaId: number;
  consortiaName: string;
  changeShapeId: number;
  armyState: number;
  teamId: number;
  bufferTempId: number;
  geste: number;
  headId: number;
  isVip: boolean;
  vipType: number;
  mountTempId: number;
  mountGrade: number;
  wing: string;
  serverName: string;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  appellid: number;
  vehicleTemplateId: number;
  fateSkills: string;
  petTemplateId: number;
  petQuqlity: number;
  petName: string;
  isNoGet: boolean;
  job: number;
  vipGrade: number;
  mulSportScore: number;
  segmentId: number;
  hp: number;
  maxHp: number;
  frameId: number;
  isReturnedPlayer: boolean;
  mountStatus: number;
  tarIds: number[];
}

function createBaseRoomPlayerMsg(): RoomPlayerMsg {
  return {
    roomId: 0,
    count: 0,
    currentRoomIndex: 0,
    playerState: 0,
    heroId: 0,
    playerId: 0,
    grades: 0,
    nickName: "",
    sex: 0,
    templateId: 0,
    arm: "",
    cloth: "",
    armyId: 0,
    fightingCapacity: 0,
    curPosX: 0,
    curPosY: 0,
    campaignId: 0,
    onlineState: false,
    consortiaId: 0,
    consortiaName: "",
    changeShapeId: 0,
    armyState: 0,
    teamId: 0,
    bufferTempId: 0,
    geste: 0,
    headId: 0,
    isVip: false,
    vipType: 0,
    mountTempId: 0,
    mountGrade: 0,
    wing: "",
    serverName: "",
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    appellid: 0,
    vehicleTemplateId: 0,
    fateSkills: "",
    petTemplateId: 0,
    petQuqlity: 0,
    petName: "",
    isNoGet: false,
    job: 0,
    vipGrade: 0,
    mulSportScore: 0,
    segmentId: 0,
    hp: 0,
    maxHp: 0,
    frameId: 0,
    isReturnedPlayer: false,
    mountStatus: 0,
    tarIds: [],
  };
}

export const RoomPlayerMsg: MessageFns<RoomPlayerMsg> = {
  encode(message: RoomPlayerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== 0) {
      writer.uint32(8).int32(message.roomId);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    if (message.currentRoomIndex !== 0) {
      writer.uint32(24).int32(message.currentRoomIndex);
    }
    if (message.playerState !== 0) {
      writer.uint32(32).int32(message.playerState);
    }
    if (message.heroId !== 0) {
      writer.uint32(40).int32(message.heroId);
    }
    if (message.playerId !== 0) {
      writer.uint32(48).int32(message.playerId);
    }
    if (message.grades !== 0) {
      writer.uint32(56).int32(message.grades);
    }
    if (message.nickName !== "") {
      writer.uint32(66).string(message.nickName);
    }
    if (message.sex !== 0) {
      writer.uint32(72).int32(message.sex);
    }
    if (message.templateId !== 0) {
      writer.uint32(80).int32(message.templateId);
    }
    if (message.arm !== "") {
      writer.uint32(90).string(message.arm);
    }
    if (message.cloth !== "") {
      writer.uint32(98).string(message.cloth);
    }
    if (message.armyId !== 0) {
      writer.uint32(104).int32(message.armyId);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(112).int32(message.fightingCapacity);
    }
    if (message.curPosX !== 0) {
      writer.uint32(120).int32(message.curPosX);
    }
    if (message.curPosY !== 0) {
      writer.uint32(128).int32(message.curPosY);
    }
    if (message.campaignId !== 0) {
      writer.uint32(136).int32(message.campaignId);
    }
    if (message.onlineState !== false) {
      writer.uint32(144).bool(message.onlineState);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(152).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(162).string(message.consortiaName);
    }
    if (message.changeShapeId !== 0) {
      writer.uint32(168).int32(message.changeShapeId);
    }
    if (message.armyState !== 0) {
      writer.uint32(176).int32(message.armyState);
    }
    if (message.teamId !== 0) {
      writer.uint32(184).int32(message.teamId);
    }
    if (message.bufferTempId !== 0) {
      writer.uint32(192).int32(message.bufferTempId);
    }
    if (message.geste !== 0) {
      writer.uint32(200).int32(message.geste);
    }
    if (message.headId !== 0) {
      writer.uint32(208).int32(message.headId);
    }
    if (message.isVip !== false) {
      writer.uint32(216).bool(message.isVip);
    }
    if (message.vipType !== 0) {
      writer.uint32(224).int32(message.vipType);
    }
    if (message.mountTempId !== 0) {
      writer.uint32(232).int32(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      writer.uint32(240).int32(message.mountGrade);
    }
    if (message.wing !== "") {
      writer.uint32(250).string(message.wing);
    }
    if (message.serverName !== "") {
      writer.uint32(258).string(message.serverName);
    }
    if (message.hat !== "") {
      writer.uint32(266).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(274).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(282).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(288).bool(message.hide);
    }
    if (message.appellid !== 0) {
      writer.uint32(296).int32(message.appellid);
    }
    if (message.vehicleTemplateId !== 0) {
      writer.uint32(304).int32(message.vehicleTemplateId);
    }
    if (message.fateSkills !== "") {
      writer.uint32(314).string(message.fateSkills);
    }
    if (message.petTemplateId !== 0) {
      writer.uint32(320).int32(message.petTemplateId);
    }
    if (message.petQuqlity !== 0) {
      writer.uint32(328).int32(message.petQuqlity);
    }
    if (message.petName !== "") {
      writer.uint32(338).string(message.petName);
    }
    if (message.isNoGet !== false) {
      writer.uint32(344).bool(message.isNoGet);
    }
    if (message.job !== 0) {
      writer.uint32(352).int32(message.job);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(360).int32(message.vipGrade);
    }
    if (message.mulSportScore !== 0) {
      writer.uint32(368).int32(message.mulSportScore);
    }
    if (message.segmentId !== 0) {
      writer.uint32(376).int32(message.segmentId);
    }
    if (message.hp !== 0) {
      writer.uint32(384).int32(message.hp);
    }
    if (message.maxHp !== 0) {
      writer.uint32(392).int32(message.maxHp);
    }
    if (message.frameId !== 0) {
      writer.uint32(400).int32(message.frameId);
    }
    if (message.isReturnedPlayer !== false) {
      writer.uint32(408).bool(message.isReturnedPlayer);
    }
    if (message.mountStatus !== 0) {
      writer.uint32(416).int32(message.mountStatus);
    }
    writer.uint32(426).fork();
    for (const v of message.tarIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomPlayerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomPlayerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentRoomIndex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playerState = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sex = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.cloth = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.curPosX = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.curPosY = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.onlineState = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.changeShapeId = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.armyState = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.teamId = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.bufferTempId = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.mountTempId = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.mountGrade = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.appellid = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.vehicleTemplateId = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.fateSkills = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.petTemplateId = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.petQuqlity = reader.int32();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.isNoGet = reader.bool();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.mulSportScore = reader.int32();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.segmentId = reader.int32();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.hp = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.maxHp = reader.int32();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.frameId = reader.int32();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.isReturnedPlayer = reader.bool();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.mountStatus = reader.int32();
          continue;
        }
        case 53: {
          if (tag === 424) {
            message.tarIds.push(reader.int32());

            continue;
          }

          if (tag === 426) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.tarIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomPlayerMsg {
    return {
      roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      currentRoomIndex: isSet(object.currentRoomIndex) ? globalThis.Number(object.currentRoomIndex) : 0,
      playerState: isSet(object.playerState) ? globalThis.Number(object.playerState) : 0,
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      sex: isSet(object.sex) ? globalThis.Number(object.sex) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      cloth: isSet(object.cloth) ? globalThis.String(object.cloth) : "",
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      curPosX: isSet(object.curPosX) ? globalThis.Number(object.curPosX) : 0,
      curPosY: isSet(object.curPosY) ? globalThis.Number(object.curPosY) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      onlineState: isSet(object.onlineState) ? globalThis.Boolean(object.onlineState) : false,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      changeShapeId: isSet(object.changeShapeId) ? globalThis.Number(object.changeShapeId) : 0,
      armyState: isSet(object.armyState) ? globalThis.Number(object.armyState) : 0,
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      bufferTempId: isSet(object.bufferTempId) ? globalThis.Number(object.bufferTempId) : 0,
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      mountTempId: isSet(object.mountTempId) ? globalThis.Number(object.mountTempId) : 0,
      mountGrade: isSet(object.mountGrade) ? globalThis.Number(object.mountGrade) : 0,
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      appellid: isSet(object.appellid) ? globalThis.Number(object.appellid) : 0,
      vehicleTemplateId: isSet(object.vehicleTemplateId) ? globalThis.Number(object.vehicleTemplateId) : 0,
      fateSkills: isSet(object.fateSkills) ? globalThis.String(object.fateSkills) : "",
      petTemplateId: isSet(object.petTemplateId) ? globalThis.Number(object.petTemplateId) : 0,
      petQuqlity: isSet(object.petQuqlity) ? globalThis.Number(object.petQuqlity) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      isNoGet: isSet(object.isNoGet) ? globalThis.Boolean(object.isNoGet) : false,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
      mulSportScore: isSet(object.mulSportScore) ? globalThis.Number(object.mulSportScore) : 0,
      segmentId: isSet(object.segmentId) ? globalThis.Number(object.segmentId) : 0,
      hp: isSet(object.hp) ? globalThis.Number(object.hp) : 0,
      maxHp: isSet(object.maxHp) ? globalThis.Number(object.maxHp) : 0,
      frameId: isSet(object.frameId) ? globalThis.Number(object.frameId) : 0,
      isReturnedPlayer: isSet(object.isReturnedPlayer) ? globalThis.Boolean(object.isReturnedPlayer) : false,
      mountStatus: isSet(object.mountStatus) ? globalThis.Number(object.mountStatus) : 0,
      tarIds: globalThis.Array.isArray(object?.tarIds) ? object.tarIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: RoomPlayerMsg): unknown {
    const obj: any = {};
    if (message.roomId !== 0) {
      obj.roomId = Math.round(message.roomId);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.currentRoomIndex !== 0) {
      obj.currentRoomIndex = Math.round(message.currentRoomIndex);
    }
    if (message.playerState !== 0) {
      obj.playerState = Math.round(message.playerState);
    }
    if (message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.sex !== 0) {
      obj.sex = Math.round(message.sex);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.cloth !== "") {
      obj.cloth = message.cloth;
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.curPosX !== 0) {
      obj.curPosX = Math.round(message.curPosX);
    }
    if (message.curPosY !== 0) {
      obj.curPosY = Math.round(message.curPosY);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.onlineState !== false) {
      obj.onlineState = message.onlineState;
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.changeShapeId !== 0) {
      obj.changeShapeId = Math.round(message.changeShapeId);
    }
    if (message.armyState !== 0) {
      obj.armyState = Math.round(message.armyState);
    }
    if (message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.bufferTempId !== 0) {
      obj.bufferTempId = Math.round(message.bufferTempId);
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.mountTempId !== 0) {
      obj.mountTempId = Math.round(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      obj.mountGrade = Math.round(message.mountGrade);
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.appellid !== 0) {
      obj.appellid = Math.round(message.appellid);
    }
    if (message.vehicleTemplateId !== 0) {
      obj.vehicleTemplateId = Math.round(message.vehicleTemplateId);
    }
    if (message.fateSkills !== "") {
      obj.fateSkills = message.fateSkills;
    }
    if (message.petTemplateId !== 0) {
      obj.petTemplateId = Math.round(message.petTemplateId);
    }
    if (message.petQuqlity !== 0) {
      obj.petQuqlity = Math.round(message.petQuqlity);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.isNoGet !== false) {
      obj.isNoGet = message.isNoGet;
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    if (message.mulSportScore !== 0) {
      obj.mulSportScore = Math.round(message.mulSportScore);
    }
    if (message.segmentId !== 0) {
      obj.segmentId = Math.round(message.segmentId);
    }
    if (message.hp !== 0) {
      obj.hp = Math.round(message.hp);
    }
    if (message.maxHp !== 0) {
      obj.maxHp = Math.round(message.maxHp);
    }
    if (message.frameId !== 0) {
      obj.frameId = Math.round(message.frameId);
    }
    if (message.isReturnedPlayer !== false) {
      obj.isReturnedPlayer = message.isReturnedPlayer;
    }
    if (message.mountStatus !== 0) {
      obj.mountStatus = Math.round(message.mountStatus);
    }
    if (message.tarIds?.length) {
      obj.tarIds = message.tarIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomPlayerMsg>, I>>(base?: I): RoomPlayerMsg {
    return RoomPlayerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomPlayerMsg>, I>>(object: I): RoomPlayerMsg {
    const message = createBaseRoomPlayerMsg();
    message.roomId = object.roomId ?? 0;
    message.count = object.count ?? 0;
    message.currentRoomIndex = object.currentRoomIndex ?? 0;
    message.playerState = object.playerState ?? 0;
    message.heroId = object.heroId ?? 0;
    message.playerId = object.playerId ?? 0;
    message.grades = object.grades ?? 0;
    message.nickName = object.nickName ?? "";
    message.sex = object.sex ?? 0;
    message.templateId = object.templateId ?? 0;
    message.arm = object.arm ?? "";
    message.cloth = object.cloth ?? "";
    message.armyId = object.armyId ?? 0;
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.curPosX = object.curPosX ?? 0;
    message.curPosY = object.curPosY ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.onlineState = object.onlineState ?? false;
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.changeShapeId = object.changeShapeId ?? 0;
    message.armyState = object.armyState ?? 0;
    message.teamId = object.teamId ?? 0;
    message.bufferTempId = object.bufferTempId ?? 0;
    message.geste = object.geste ?? 0;
    message.headId = object.headId ?? 0;
    message.isVip = object.isVip ?? false;
    message.vipType = object.vipType ?? 0;
    message.mountTempId = object.mountTempId ?? 0;
    message.mountGrade = object.mountGrade ?? 0;
    message.wing = object.wing ?? "";
    message.serverName = object.serverName ?? "";
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.appellid = object.appellid ?? 0;
    message.vehicleTemplateId = object.vehicleTemplateId ?? 0;
    message.fateSkills = object.fateSkills ?? "";
    message.petTemplateId = object.petTemplateId ?? 0;
    message.petQuqlity = object.petQuqlity ?? 0;
    message.petName = object.petName ?? "";
    message.isNoGet = object.isNoGet ?? false;
    message.job = object.job ?? 0;
    message.vipGrade = object.vipGrade ?? 0;
    message.mulSportScore = object.mulSportScore ?? 0;
    message.segmentId = object.segmentId ?? 0;
    message.hp = object.hp ?? 0;
    message.maxHp = object.maxHp ?? 0;
    message.frameId = object.frameId ?? 0;
    message.isReturnedPlayer = object.isReturnedPlayer ?? false;
    message.mountStatus = object.mountStatus ?? 0;
    message.tarIds = object.tarIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
