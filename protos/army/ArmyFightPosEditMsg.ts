// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/ArmyFightPosEditMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface ArmyFightPosEditMsg {
  userId: number;
  heroPos: number;
  pawnPos: number;
  serverName: string;
}

function createBaseArmyFightPosEditMsg(): ArmyFightPosEditMsg {
  return { userId: 0, heroPos: 0, pawnPos: 0, serverName: "" };
}

export const ArmyFightPosEditMsg: MessageFns<ArmyFightPosEditMsg> = {
  encode(message: ArmyFightPosEditMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.heroPos !== 0) {
      writer.uint32(16).int32(message.heroPos);
    }
    if (message.pawnPos !== 0) {
      writer.uint32(24).int32(message.pawnPos);
    }
    if (message.serverName !== "") {
      writer.uint32(34).string(message.serverName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArmyFightPosEditMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArmyFightPosEditMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.heroPos = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pawnPos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArmyFightPosEditMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      heroPos: isSet(object.heroPos) ? globalThis.Number(object.heroPos) : 0,
      pawnPos: isSet(object.pawnPos) ? globalThis.Number(object.pawnPos) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
    };
  },

  toJSON(message: ArmyFightPosEditMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.heroPos !== 0) {
      obj.heroPos = Math.round(message.heroPos);
    }
    if (message.pawnPos !== 0) {
      obj.pawnPos = Math.round(message.pawnPos);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArmyFightPosEditMsg>, I>>(base?: I): ArmyFightPosEditMsg {
    return ArmyFightPosEditMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArmyFightPosEditMsg>, I>>(object: I): ArmyFightPosEditMsg {
    const message = createBaseArmyFightPosEditMsg();
    message.userId = object.userId ?? 0;
    message.heroPos = object.heroPos ?? 0;
    message.pawnPos = object.pawnPos ?? 0;
    message.serverName = object.serverName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
