// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: mall/SearchItemReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.mall";

export interface SearchItemReqMsg {
  itemName: string;
  minLevel: number;
  maxLevel: number;
  quality: number;
  job: number;
  type: number;
  sonType: number;
  usable: boolean;
  page: number;
  orderBy: number;
  orderType: number;
}

function createBaseSearchItemReqMsg(): SearchItemReqMsg {
  return {
    itemName: "",
    minLevel: 0,
    maxLevel: 0,
    quality: 0,
    job: 0,
    type: 0,
    sonType: 0,
    usable: false,
    page: 0,
    orderBy: 0,
    orderType: 0,
  };
}

export const SearchItemReqMsg: MessageFns<SearchItemReqMsg> = {
  encode(message: SearchItemReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.itemName !== "") {
      writer.uint32(10).string(message.itemName);
    }
    if (message.minLevel !== 0) {
      writer.uint32(16).int32(message.minLevel);
    }
    if (message.maxLevel !== 0) {
      writer.uint32(24).int32(message.maxLevel);
    }
    if (message.quality !== 0) {
      writer.uint32(32).int32(message.quality);
    }
    if (message.job !== 0) {
      writer.uint32(40).int32(message.job);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.sonType !== 0) {
      writer.uint32(56).int32(message.sonType);
    }
    if (message.usable !== false) {
      writer.uint32(64).bool(message.usable);
    }
    if (message.page !== 0) {
      writer.uint32(72).int32(message.page);
    }
    if (message.orderBy !== 0) {
      writer.uint32(80).int32(message.orderBy);
    }
    if (message.orderType !== 0) {
      writer.uint32(88).int32(message.orderType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchItemReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchItemReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.itemName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minLevel = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxLevel = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sonType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.usable = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.orderBy = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.orderType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchItemReqMsg {
    return {
      itemName: isSet(object.itemName) ? globalThis.String(object.itemName) : "",
      minLevel: isSet(object.minLevel) ? globalThis.Number(object.minLevel) : 0,
      maxLevel: isSet(object.maxLevel) ? globalThis.Number(object.maxLevel) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      sonType: isSet(object.sonType) ? globalThis.Number(object.sonType) : 0,
      usable: isSet(object.usable) ? globalThis.Boolean(object.usable) : false,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      orderBy: isSet(object.orderBy) ? globalThis.Number(object.orderBy) : 0,
      orderType: isSet(object.orderType) ? globalThis.Number(object.orderType) : 0,
    };
  },

  toJSON(message: SearchItemReqMsg): unknown {
    const obj: any = {};
    if (message.itemName !== "") {
      obj.itemName = message.itemName;
    }
    if (message.minLevel !== 0) {
      obj.minLevel = Math.round(message.minLevel);
    }
    if (message.maxLevel !== 0) {
      obj.maxLevel = Math.round(message.maxLevel);
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.sonType !== 0) {
      obj.sonType = Math.round(message.sonType);
    }
    if (message.usable !== false) {
      obj.usable = message.usable;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.orderBy !== 0) {
      obj.orderBy = Math.round(message.orderBy);
    }
    if (message.orderType !== 0) {
      obj.orderType = Math.round(message.orderType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchItemReqMsg>, I>>(base?: I): SearchItemReqMsg {
    return SearchItemReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchItemReqMsg>, I>>(object: I): SearchItemReqMsg {
    const message = createBaseSearchItemReqMsg();
    message.itemName = object.itemName ?? "";
    message.minLevel = object.minLevel ?? 0;
    message.maxLevel = object.maxLevel ?? 0;
    message.quality = object.quality ?? 0;
    message.job = object.job ?? 0;
    message.type = object.type ?? 0;
    message.sonType = object.sonType ?? 0;
    message.usable = object.usable ?? false;
    message.page = object.page ?? 0;
    message.orderBy = object.orderBy ?? 0;
    message.orderType = object.orderType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
