// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: chat/ChatChannelMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.chat";

export interface ChatChannelMsg {
  channel: number;
  type: number;
  encodeMsg: string;
  otherId: number;
  name: string;
  team: number[];
  consortiaId: number;
  consortiaName: string;
  userType: number;
  limitGrade: number;
  maxGrade: number;
  isCenterTip: boolean;
  isBigTip: boolean;
  vipGrade: number;
  expUserIds: number[];
  bigBugleType: number;
  items: number[];
  stars: number[];
  powcards: number[];
  serverName: string;
  battleId: string;
  isImportant: boolean;
  appellid: number;
  job: number;
  receiveName: string;
  headid: number;
  level: number;
  curTime: string;
  frameId: number;
  fight: number;
  mainSite: string;
}

function createBaseChatChannelMsg(): ChatChannelMsg {
  return {
    channel: 0,
    type: 0,
    encodeMsg: "",
    otherId: 0,
    name: "",
    team: [],
    consortiaId: 0,
    consortiaName: "",
    userType: 0,
    limitGrade: 0,
    maxGrade: 0,
    isCenterTip: false,
    isBigTip: false,
    vipGrade: 0,
    expUserIds: [],
    bigBugleType: 0,
    items: [],
    stars: [],
    powcards: [],
    serverName: "",
    battleId: "",
    isImportant: false,
    appellid: 0,
    job: 0,
    receiveName: "",
    headid: 0,
    level: 0,
    curTime: "",
    frameId: 0,
    fight: 0,
    mainSite: "",
  };
}

export const ChatChannelMsg: MessageFns<ChatChannelMsg> = {
  encode(message: ChatChannelMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== 0) {
      writer.uint32(8).int32(message.channel);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.encodeMsg !== "") {
      writer.uint32(26).string(message.encodeMsg);
    }
    if (message.otherId !== 0) {
      writer.uint32(32).int32(message.otherId);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    writer.uint32(50).fork();
    for (const v of message.team) {
      writer.int32(v);
    }
    writer.join();
    if (message.consortiaId !== 0) {
      writer.uint32(56).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(66).string(message.consortiaName);
    }
    if (message.userType !== 0) {
      writer.uint32(72).int32(message.userType);
    }
    if (message.limitGrade !== 0) {
      writer.uint32(80).int32(message.limitGrade);
    }
    if (message.maxGrade !== 0) {
      writer.uint32(88).int32(message.maxGrade);
    }
    if (message.isCenterTip !== false) {
      writer.uint32(96).bool(message.isCenterTip);
    }
    if (message.isBigTip !== false) {
      writer.uint32(104).bool(message.isBigTip);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(112).int32(message.vipGrade);
    }
    writer.uint32(122).fork();
    for (const v of message.expUserIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.bigBugleType !== 0) {
      writer.uint32(128).int32(message.bigBugleType);
    }
    writer.uint32(138).fork();
    for (const v of message.items) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(146).fork();
    for (const v of message.stars) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(154).fork();
    for (const v of message.powcards) {
      writer.int32(v);
    }
    writer.join();
    if (message.serverName !== "") {
      writer.uint32(162).string(message.serverName);
    }
    if (message.battleId !== "") {
      writer.uint32(170).string(message.battleId);
    }
    if (message.isImportant !== false) {
      writer.uint32(176).bool(message.isImportant);
    }
    if (message.appellid !== 0) {
      writer.uint32(184).int32(message.appellid);
    }
    if (message.job !== 0) {
      writer.uint32(192).int32(message.job);
    }
    if (message.receiveName !== "") {
      writer.uint32(202).string(message.receiveName);
    }
    if (message.headid !== 0) {
      writer.uint32(208).int32(message.headid);
    }
    if (message.level !== 0) {
      writer.uint32(216).int32(message.level);
    }
    if (message.curTime !== "") {
      writer.uint32(226).string(message.curTime);
    }
    if (message.frameId !== 0) {
      writer.uint32(232).int32(message.frameId);
    }
    if (message.fight !== 0) {
      writer.uint32(240).int32(message.fight);
    }
    if (message.mainSite !== "") {
      writer.uint32(250).string(message.mainSite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatChannelMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatChannelMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.channel = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encodeMsg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.otherId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.team.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.team.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.userType = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.limitGrade = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.maxGrade = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isCenterTip = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isBigTip = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
        case 15: {
          if (tag === 120) {
            message.expUserIds.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.expUserIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.bigBugleType = reader.int32();
          continue;
        }
        case 17: {
          if (tag === 136) {
            message.items.push(reader.int32());

            continue;
          }

          if (tag === 138) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.items.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 18: {
          if (tag === 144) {
            message.stars.push(reader.int32());

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.stars.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 19: {
          if (tag === 152) {
            message.powcards.push(reader.int32());

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.powcards.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.battleId = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.isImportant = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.appellid = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.receiveName = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.headid = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.curTime = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.frameId = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.fight = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.mainSite = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatChannelMsg {
    return {
      channel: isSet(object.channel) ? globalThis.Number(object.channel) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      encodeMsg: isSet(object.encodeMsg) ? globalThis.String(object.encodeMsg) : "",
      otherId: isSet(object.otherId) ? globalThis.Number(object.otherId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      team: globalThis.Array.isArray(object?.team) ? object.team.map((e: any) => globalThis.Number(e)) : [],
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      userType: isSet(object.userType) ? globalThis.Number(object.userType) : 0,
      limitGrade: isSet(object.limitGrade) ? globalThis.Number(object.limitGrade) : 0,
      maxGrade: isSet(object.maxGrade) ? globalThis.Number(object.maxGrade) : 0,
      isCenterTip: isSet(object.isCenterTip) ? globalThis.Boolean(object.isCenterTip) : false,
      isBigTip: isSet(object.isBigTip) ? globalThis.Boolean(object.isBigTip) : false,
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
      expUserIds: globalThis.Array.isArray(object?.expUserIds)
        ? object.expUserIds.map((e: any) => globalThis.Number(e))
        : [],
      bigBugleType: isSet(object.bigBugleType) ? globalThis.Number(object.bigBugleType) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => globalThis.Number(e)) : [],
      stars: globalThis.Array.isArray(object?.stars) ? object.stars.map((e: any) => globalThis.Number(e)) : [],
      powcards: globalThis.Array.isArray(object?.powcards) ? object.powcards.map((e: any) => globalThis.Number(e)) : [],
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "",
      isImportant: isSet(object.isImportant) ? globalThis.Boolean(object.isImportant) : false,
      appellid: isSet(object.appellid) ? globalThis.Number(object.appellid) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      receiveName: isSet(object.receiveName) ? globalThis.String(object.receiveName) : "",
      headid: isSet(object.headid) ? globalThis.Number(object.headid) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      curTime: isSet(object.curTime) ? globalThis.String(object.curTime) : "",
      frameId: isSet(object.frameId) ? globalThis.Number(object.frameId) : 0,
      fight: isSet(object.fight) ? globalThis.Number(object.fight) : 0,
      mainSite: isSet(object.mainSite) ? globalThis.String(object.mainSite) : "",
    };
  },

  toJSON(message: ChatChannelMsg): unknown {
    const obj: any = {};
    if (message.channel !== 0) {
      obj.channel = Math.round(message.channel);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.encodeMsg !== "") {
      obj.encodeMsg = message.encodeMsg;
    }
    if (message.otherId !== 0) {
      obj.otherId = Math.round(message.otherId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.team?.length) {
      obj.team = message.team.map((e) => Math.round(e));
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.userType !== 0) {
      obj.userType = Math.round(message.userType);
    }
    if (message.limitGrade !== 0) {
      obj.limitGrade = Math.round(message.limitGrade);
    }
    if (message.maxGrade !== 0) {
      obj.maxGrade = Math.round(message.maxGrade);
    }
    if (message.isCenterTip !== false) {
      obj.isCenterTip = message.isCenterTip;
    }
    if (message.isBigTip !== false) {
      obj.isBigTip = message.isBigTip;
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    if (message.expUserIds?.length) {
      obj.expUserIds = message.expUserIds.map((e) => Math.round(e));
    }
    if (message.bigBugleType !== 0) {
      obj.bigBugleType = Math.round(message.bigBugleType);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Math.round(e));
    }
    if (message.stars?.length) {
      obj.stars = message.stars.map((e) => Math.round(e));
    }
    if (message.powcards?.length) {
      obj.powcards = message.powcards.map((e) => Math.round(e));
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.battleId !== "") {
      obj.battleId = message.battleId;
    }
    if (message.isImportant !== false) {
      obj.isImportant = message.isImportant;
    }
    if (message.appellid !== 0) {
      obj.appellid = Math.round(message.appellid);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.receiveName !== "") {
      obj.receiveName = message.receiveName;
    }
    if (message.headid !== 0) {
      obj.headid = Math.round(message.headid);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.curTime !== "") {
      obj.curTime = message.curTime;
    }
    if (message.frameId !== 0) {
      obj.frameId = Math.round(message.frameId);
    }
    if (message.fight !== 0) {
      obj.fight = Math.round(message.fight);
    }
    if (message.mainSite !== "") {
      obj.mainSite = message.mainSite;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatChannelMsg>, I>>(base?: I): ChatChannelMsg {
    return ChatChannelMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatChannelMsg>, I>>(object: I): ChatChannelMsg {
    const message = createBaseChatChannelMsg();
    message.channel = object.channel ?? 0;
    message.type = object.type ?? 0;
    message.encodeMsg = object.encodeMsg ?? "";
    message.otherId = object.otherId ?? 0;
    message.name = object.name ?? "";
    message.team = object.team?.map((e) => e) || [];
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.userType = object.userType ?? 0;
    message.limitGrade = object.limitGrade ?? 0;
    message.maxGrade = object.maxGrade ?? 0;
    message.isCenterTip = object.isCenterTip ?? false;
    message.isBigTip = object.isBigTip ?? false;
    message.vipGrade = object.vipGrade ?? 0;
    message.expUserIds = object.expUserIds?.map((e) => e) || [];
    message.bigBugleType = object.bigBugleType ?? 0;
    message.items = object.items?.map((e) => e) || [];
    message.stars = object.stars?.map((e) => e) || [];
    message.powcards = object.powcards?.map((e) => e) || [];
    message.serverName = object.serverName ?? "";
    message.battleId = object.battleId ?? "";
    message.isImportant = object.isImportant ?? false;
    message.appellid = object.appellid ?? 0;
    message.job = object.job ?? 0;
    message.receiveName = object.receiveName ?? "";
    message.headid = object.headid ?? 0;
    message.level = object.level ?? 0;
    message.curTime = object.curTime ?? "";
    message.frameId = object.frameId ?? 0;
    message.fight = object.fight ?? 0;
    message.mainSite = object.mainSite ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
