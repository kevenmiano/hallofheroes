// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: newactive/RankerOtherInfoRes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.newactive";

export interface RankerOtherInfoRes {
  entityId: number;
  fight: string;
  level: number;
  headId: number;
  entityName: string;
  leagueName: string;
}

function createBaseRankerOtherInfoRes(): RankerOtherInfoRes {
  return { entityId: 0, fight: "", level: 0, headId: 0, entityName: "", leagueName: "" };
}

export const RankerOtherInfoRes: MessageFns<RankerOtherInfoRes> = {
  encode(message: RankerOtherInfoRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== 0) {
      writer.uint32(8).int32(message.entityId);
    }
    if (message.fight !== "") {
      writer.uint32(18).string(message.fight);
    }
    if (message.level !== 0) {
      writer.uint32(24).int32(message.level);
    }
    if (message.headId !== 0) {
      writer.uint32(32).int32(message.headId);
    }
    if (message.entityName !== "") {
      writer.uint32(42).string(message.entityName);
    }
    if (message.leagueName !== "") {
      writer.uint32(50).string(message.leagueName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankerOtherInfoRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankerOtherInfoRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.entityId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fight = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.entityName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.leagueName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankerOtherInfoRes {
    return {
      entityId: isSet(object.entityId) ? globalThis.Number(object.entityId) : 0,
      fight: isSet(object.fight) ? globalThis.String(object.fight) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      entityName: isSet(object.entityName) ? globalThis.String(object.entityName) : "",
      leagueName: isSet(object.leagueName) ? globalThis.String(object.leagueName) : "",
    };
  },

  toJSON(message: RankerOtherInfoRes): unknown {
    const obj: any = {};
    if (message.entityId !== 0) {
      obj.entityId = Math.round(message.entityId);
    }
    if (message.fight !== "") {
      obj.fight = message.fight;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.entityName !== "") {
      obj.entityName = message.entityName;
    }
    if (message.leagueName !== "") {
      obj.leagueName = message.leagueName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RankerOtherInfoRes>, I>>(base?: I): RankerOtherInfoRes {
    return RankerOtherInfoRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RankerOtherInfoRes>, I>>(object: I): RankerOtherInfoRes {
    const message = createBaseRankerOtherInfoRes();
    message.entityId = object.entityId ?? 0;
    message.fight = object.fight ?? "";
    message.level = object.level ?? 0;
    message.headId = object.headId ?? 0;
    message.entityName = object.entityName ?? "";
    message.leagueName = object.leagueName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
