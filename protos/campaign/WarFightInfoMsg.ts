// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/WarFightInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface WarFightInfoMsg {
  teamId: number;
  score: number;
  order: number;
  geste: number;
  hitCount: number;
  leftTime: number;
  oneCount: number;
  twoCount: number;
  oneScore: number;
  twoScore: number;
}

function createBaseWarFightInfoMsg(): WarFightInfoMsg {
  return {
    teamId: 0,
    score: 0,
    order: 0,
    geste: 0,
    hitCount: 0,
    leftTime: 0,
    oneCount: 0,
    twoCount: 0,
    oneScore: 0,
    twoScore: 0,
  };
}

export const WarFightInfoMsg: MessageFns<WarFightInfoMsg> = {
  encode(message: WarFightInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== 0) {
      writer.uint32(8).int32(message.teamId);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    if (message.order !== 0) {
      writer.uint32(24).int32(message.order);
    }
    if (message.geste !== 0) {
      writer.uint32(32).int32(message.geste);
    }
    if (message.hitCount !== 0) {
      writer.uint32(40).int32(message.hitCount);
    }
    if (message.leftTime !== 0) {
      writer.uint32(48).int32(message.leftTime);
    }
    if (message.oneCount !== 0) {
      writer.uint32(56).int32(message.oneCount);
    }
    if (message.twoCount !== 0) {
      writer.uint32(64).int32(message.twoCount);
    }
    if (message.oneScore !== 0) {
      writer.uint32(72).int32(message.oneScore);
    }
    if (message.twoScore !== 0) {
      writer.uint32(80).int32(message.twoScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WarFightInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWarFightInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.teamId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hitCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.oneCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.twoCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.oneScore = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.twoScore = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WarFightInfoMsg {
    return {
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      hitCount: isSet(object.hitCount) ? globalThis.Number(object.hitCount) : 0,
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      oneCount: isSet(object.oneCount) ? globalThis.Number(object.oneCount) : 0,
      twoCount: isSet(object.twoCount) ? globalThis.Number(object.twoCount) : 0,
      oneScore: isSet(object.oneScore) ? globalThis.Number(object.oneScore) : 0,
      twoScore: isSet(object.twoScore) ? globalThis.Number(object.twoScore) : 0,
    };
  },

  toJSON(message: WarFightInfoMsg): unknown {
    const obj: any = {};
    if (message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.hitCount !== 0) {
      obj.hitCount = Math.round(message.hitCount);
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.oneCount !== 0) {
      obj.oneCount = Math.round(message.oneCount);
    }
    if (message.twoCount !== 0) {
      obj.twoCount = Math.round(message.twoCount);
    }
    if (message.oneScore !== 0) {
      obj.oneScore = Math.round(message.oneScore);
    }
    if (message.twoScore !== 0) {
      obj.twoScore = Math.round(message.twoScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WarFightInfoMsg>, I>>(base?: I): WarFightInfoMsg {
    return WarFightInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WarFightInfoMsg>, I>>(object: I): WarFightInfoMsg {
    const message = createBaseWarFightInfoMsg();
    message.teamId = object.teamId ?? 0;
    message.score = object.score ?? 0;
    message.order = object.order ?? 0;
    message.geste = object.geste ?? 0;
    message.hitCount = object.hitCount ?? 0;
    message.leftTime = object.leftTime ?? 0;
    message.oneCount = object.oneCount ?? 0;
    message.twoCount = object.twoCount ?? 0;
    message.oneScore = object.oneScore ?? 0;
    message.twoScore = object.twoScore ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
