// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ActiveInfoPB.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ActiveInfoPB {
  uuid: string;
  type: number;
  startTime: string;
  endTime: string;
  showTime: string;
  param1: number;
  param2: number;
  param3: number;
  param4: number;
  param5: string;
  param6: string;
  desc: string;
  awardTemp: number[];
}

function createBaseActiveInfoPB(): ActiveInfoPB {
  return {
    uuid: "",
    type: 0,
    startTime: "",
    endTime: "",
    showTime: "",
    param1: 0,
    param2: 0,
    param3: 0,
    param4: 0,
    param5: "",
    param6: "",
    desc: "",
    awardTemp: [],
  };
}

export const ActiveInfoPB: MessageFns<ActiveInfoPB> = {
  encode(
    message: ActiveInfoPB,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.startTime !== "") {
      writer.uint32(26).string(message.startTime);
    }
    if (message.endTime !== "") {
      writer.uint32(34).string(message.endTime);
    }
    if (message.showTime !== "") {
      writer.uint32(42).string(message.showTime);
    }
    if (message.param1 !== 0) {
      writer.uint32(48).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(56).int32(message.param2);
    }
    if (message.param3 !== 0) {
      writer.uint32(64).int32(message.param3);
    }
    if (message.param4 !== 0) {
      writer.uint32(72).int32(message.param4);
    }
    if (message.param5 !== "") {
      writer.uint32(82).string(message.param5);
    }
    if (message.param6 !== "") {
      writer.uint32(90).string(message.param6);
    }
    if (message.desc !== "") {
      writer.uint32(98).string(message.desc);
    }
    writer.uint32(106).fork();
    for (const v of message.awardTemp) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveInfoPB {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveInfoPB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.showTime = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.param3 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.param4 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.param5 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.param6 = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 13: {
          if (tag === 104) {
            message.awardTemp.push(reader.int32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.awardTemp.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveInfoPB {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      startTime: isSet(object.startTime)
        ? globalThis.String(object.startTime)
        : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      showTime: isSet(object.showTime)
        ? globalThis.String(object.showTime)
        : "",
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
      param3: isSet(object.param3) ? globalThis.Number(object.param3) : 0,
      param4: isSet(object.param4) ? globalThis.Number(object.param4) : 0,
      param5: isSet(object.param5) ? globalThis.String(object.param5) : "",
      param6: isSet(object.param6) ? globalThis.String(object.param6) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      awardTemp: globalThis.Array.isArray(object?.awardTemp)
        ? object.awardTemp.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ActiveInfoPB): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.showTime !== "") {
      obj.showTime = message.showTime;
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    if (message.param3 !== 0) {
      obj.param3 = Math.round(message.param3);
    }
    if (message.param4 !== 0) {
      obj.param4 = Math.round(message.param4);
    }
    if (message.param5 !== "") {
      obj.param5 = message.param5;
    }
    if (message.param6 !== "") {
      obj.param6 = message.param6;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.awardTemp?.length) {
      obj.awardTemp = message.awardTemp.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveInfoPB>, I>>(
    base?: I,
  ): ActiveInfoPB {
    return ActiveInfoPB.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveInfoPB>, I>>(
    object: I,
  ): ActiveInfoPB {
    const message = createBaseActiveInfoPB();
    message.uuid = object.uuid ?? "";
    message.type = object.type ?? 0;
    message.startTime = object.startTime ?? "";
    message.endTime = object.endTime ?? "";
    message.showTime = object.showTime ?? "";
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    message.param3 = object.param3 ?? 0;
    message.param4 = object.param4 ?? 0;
    message.param5 = object.param5 ?? "";
    message.param6 = object.param6 ?? "";
    message.desc = object.desc ?? "";
    message.awardTemp = object.awardTemp?.map((e) => e) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
