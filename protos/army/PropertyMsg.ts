// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/PropertyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface PropertyMsg {
  tempData: number;
  effectPer: number;
  effectData: number;
  bagPer: number;
  bagData: number;
  starPer: number;
  starData: number;
  powcardPer: number;
  powcardData: number;
  skillPer: number;
  skillData: number;
  baseJoin: number;
}

function createBasePropertyMsg(): PropertyMsg {
  return {
    tempData: 0,
    effectPer: 0,
    effectData: 0,
    bagPer: 0,
    bagData: 0,
    starPer: 0,
    starData: 0,
    powcardPer: 0,
    powcardData: 0,
    skillPer: 0,
    skillData: 0,
    baseJoin: 0,
  };
}

export const PropertyMsg: MessageFns<PropertyMsg> = {
  encode(message: PropertyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tempData !== 0) {
      writer.uint32(8).int32(message.tempData);
    }
    if (message.effectPer !== 0) {
      writer.uint32(16).int32(message.effectPer);
    }
    if (message.effectData !== 0) {
      writer.uint32(24).int32(message.effectData);
    }
    if (message.bagPer !== 0) {
      writer.uint32(32).int32(message.bagPer);
    }
    if (message.bagData !== 0) {
      writer.uint32(40).int32(message.bagData);
    }
    if (message.starPer !== 0) {
      writer.uint32(48).int32(message.starPer);
    }
    if (message.starData !== 0) {
      writer.uint32(56).int32(message.starData);
    }
    if (message.powcardPer !== 0) {
      writer.uint32(64).int32(message.powcardPer);
    }
    if (message.powcardData !== 0) {
      writer.uint32(72).int32(message.powcardData);
    }
    if (message.skillPer !== 0) {
      writer.uint32(80).int32(message.skillPer);
    }
    if (message.skillData !== 0) {
      writer.uint32(88).int32(message.skillData);
    }
    if (message.baseJoin !== 0) {
      writer.uint32(96).int32(message.baseJoin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PropertyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePropertyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tempData = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.effectPer = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.effectData = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bagPer = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.bagData = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.starPer = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.starData = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.powcardPer = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.powcardData = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.skillPer = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.skillData = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.baseJoin = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PropertyMsg {
    return {
      tempData: isSet(object.tempData) ? globalThis.Number(object.tempData) : 0,
      effectPer: isSet(object.effectPer) ? globalThis.Number(object.effectPer) : 0,
      effectData: isSet(object.effectData) ? globalThis.Number(object.effectData) : 0,
      bagPer: isSet(object.bagPer) ? globalThis.Number(object.bagPer) : 0,
      bagData: isSet(object.bagData) ? globalThis.Number(object.bagData) : 0,
      starPer: isSet(object.starPer) ? globalThis.Number(object.starPer) : 0,
      starData: isSet(object.starData) ? globalThis.Number(object.starData) : 0,
      powcardPer: isSet(object.powcardPer) ? globalThis.Number(object.powcardPer) : 0,
      powcardData: isSet(object.powcardData) ? globalThis.Number(object.powcardData) : 0,
      skillPer: isSet(object.skillPer) ? globalThis.Number(object.skillPer) : 0,
      skillData: isSet(object.skillData) ? globalThis.Number(object.skillData) : 0,
      baseJoin: isSet(object.baseJoin) ? globalThis.Number(object.baseJoin) : 0,
    };
  },

  toJSON(message: PropertyMsg): unknown {
    const obj: any = {};
    if (message.tempData !== 0) {
      obj.tempData = Math.round(message.tempData);
    }
    if (message.effectPer !== 0) {
      obj.effectPer = Math.round(message.effectPer);
    }
    if (message.effectData !== 0) {
      obj.effectData = Math.round(message.effectData);
    }
    if (message.bagPer !== 0) {
      obj.bagPer = Math.round(message.bagPer);
    }
    if (message.bagData !== 0) {
      obj.bagData = Math.round(message.bagData);
    }
    if (message.starPer !== 0) {
      obj.starPer = Math.round(message.starPer);
    }
    if (message.starData !== 0) {
      obj.starData = Math.round(message.starData);
    }
    if (message.powcardPer !== 0) {
      obj.powcardPer = Math.round(message.powcardPer);
    }
    if (message.powcardData !== 0) {
      obj.powcardData = Math.round(message.powcardData);
    }
    if (message.skillPer !== 0) {
      obj.skillPer = Math.round(message.skillPer);
    }
    if (message.skillData !== 0) {
      obj.skillData = Math.round(message.skillData);
    }
    if (message.baseJoin !== 0) {
      obj.baseJoin = Math.round(message.baseJoin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PropertyMsg>, I>>(base?: I): PropertyMsg {
    return PropertyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PropertyMsg>, I>>(object: I): PropertyMsg {
    const message = createBasePropertyMsg();
    message.tempData = object.tempData ?? 0;
    message.effectPer = object.effectPer ?? 0;
    message.effectData = object.effectData ?? 0;
    message.bagPer = object.bagPer ?? 0;
    message.bagData = object.bagData ?? 0;
    message.starPer = object.starPer ?? 0;
    message.starData = object.starData ?? 0;
    message.powcardPer = object.powcardPer ?? 0;
    message.powcardData = object.powcardData ?? 0;
    message.skillPer = object.skillPer ?? 0;
    message.skillData = object.skillData ?? 0;
    message.baseJoin = object.baseJoin ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
