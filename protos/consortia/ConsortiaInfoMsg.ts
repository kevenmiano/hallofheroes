// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaInfoMsg {
  consortiaId: number;
  creatorId: number;
  chairmanId: number;
  levels: number;
  addCount: number;
  currentCount: number;
  kickCount: number;
  shopLevel: number;
  storeLevel: number;
  altarLevel: number;
  schoolLevel: number;
  attackLevel: number;
  defenceLevel: number;
  agilityLevel: number;
  abilityLevel: number;
  captainLevel: number;
  goldLevel: number;
  fightPower: number;
  ownWildlands: number;
  offer: number;
  honor: number;
  blessTempId: number;
  blessCount: number;
  codeType: number;
  totalOffer: number;
  op: number;
  placard: string;
  description: string;
  consortiaName: string;
  creatorName: string;
  chairmanName: string;
  renames: string;
  quitResult: string;
  openApp: boolean;
  isExist: boolean;
  createDate: string;
  kickDate: string;
  deductDate: string;
  warnDate: string;
  quitDate: string;
  codeBeginDate: string;
  currentDate: string;
  codeNeedDate: number;
  orderInfo: string;
  physiqueLevel: number;
  isRobot: boolean;
  site: number[];
  speakTimes: number;
  votingDate: string;
  votingStatic: number;
  votingId: number;
  activeData: number;
  groupPlacard: string;
  altarDate: string;
  altarState: number;
  maxMave: number;
  newPowerLv: number;
  newAgilityLv: number;
  newIntellectLv: number;
  newPhysiqueLv: number;
  famGpLv: number;
  medalLv: number;
  honorLv: number;
  scoreLv: number;
  bossInfo: string;
  materials: number;
  TotalMaterials: number;
  hiSkillList: number[];
}

function createBaseConsortiaInfoMsg(): ConsortiaInfoMsg {
  return {
    consortiaId: 0,
    creatorId: 0,
    chairmanId: 0,
    levels: 0,
    addCount: 0,
    currentCount: 0,
    kickCount: 0,
    shopLevel: 0,
    storeLevel: 0,
    altarLevel: 0,
    schoolLevel: 0,
    attackLevel: 0,
    defenceLevel: 0,
    agilityLevel: 0,
    abilityLevel: 0,
    captainLevel: 0,
    goldLevel: 0,
    fightPower: 0,
    ownWildlands: 0,
    offer: 0,
    honor: 0,
    blessTempId: 0,
    blessCount: 0,
    codeType: 0,
    totalOffer: 0,
    op: 0,
    placard: "",
    description: "",
    consortiaName: "",
    creatorName: "",
    chairmanName: "",
    renames: "",
    quitResult: "",
    openApp: false,
    isExist: false,
    createDate: "",
    kickDate: "",
    deductDate: "",
    warnDate: "",
    quitDate: "",
    codeBeginDate: "",
    currentDate: "",
    codeNeedDate: 0,
    orderInfo: "",
    physiqueLevel: 0,
    isRobot: false,
    site: [],
    speakTimes: 0,
    votingDate: "",
    votingStatic: 0,
    votingId: 0,
    activeData: 0,
    groupPlacard: "",
    altarDate: "",
    altarState: 0,
    maxMave: 0,
    newPowerLv: 0,
    newAgilityLv: 0,
    newIntellectLv: 0,
    newPhysiqueLv: 0,
    famGpLv: 0,
    medalLv: 0,
    honorLv: 0,
    scoreLv: 0,
    bossInfo: "",
    materials: 0,
    TotalMaterials: 0,
    hiSkillList: [],
  };
}

export const ConsortiaInfoMsg: MessageFns<ConsortiaInfoMsg> = {
  encode(message: ConsortiaInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.creatorId !== 0) {
      writer.uint32(16).int32(message.creatorId);
    }
    if (message.chairmanId !== 0) {
      writer.uint32(24).int32(message.chairmanId);
    }
    if (message.levels !== 0) {
      writer.uint32(32).int32(message.levels);
    }
    if (message.addCount !== 0) {
      writer.uint32(40).int32(message.addCount);
    }
    if (message.currentCount !== 0) {
      writer.uint32(48).int32(message.currentCount);
    }
    if (message.kickCount !== 0) {
      writer.uint32(56).int32(message.kickCount);
    }
    if (message.shopLevel !== 0) {
      writer.uint32(64).int32(message.shopLevel);
    }
    if (message.storeLevel !== 0) {
      writer.uint32(72).int32(message.storeLevel);
    }
    if (message.altarLevel !== 0) {
      writer.uint32(80).int32(message.altarLevel);
    }
    if (message.schoolLevel !== 0) {
      writer.uint32(88).int32(message.schoolLevel);
    }
    if (message.attackLevel !== 0) {
      writer.uint32(96).int32(message.attackLevel);
    }
    if (message.defenceLevel !== 0) {
      writer.uint32(104).int32(message.defenceLevel);
    }
    if (message.agilityLevel !== 0) {
      writer.uint32(112).int32(message.agilityLevel);
    }
    if (message.abilityLevel !== 0) {
      writer.uint32(120).int32(message.abilityLevel);
    }
    if (message.captainLevel !== 0) {
      writer.uint32(128).int32(message.captainLevel);
    }
    if (message.goldLevel !== 0) {
      writer.uint32(136).int32(message.goldLevel);
    }
    if (message.fightPower !== 0) {
      writer.uint32(144).int32(message.fightPower);
    }
    if (message.ownWildlands !== 0) {
      writer.uint32(152).int32(message.ownWildlands);
    }
    if (message.offer !== 0) {
      writer.uint32(160).int32(message.offer);
    }
    if (message.honor !== 0) {
      writer.uint32(168).int32(message.honor);
    }
    if (message.blessTempId !== 0) {
      writer.uint32(176).int32(message.blessTempId);
    }
    if (message.blessCount !== 0) {
      writer.uint32(184).int32(message.blessCount);
    }
    if (message.codeType !== 0) {
      writer.uint32(192).int32(message.codeType);
    }
    if (message.totalOffer !== 0) {
      writer.uint32(200).int32(message.totalOffer);
    }
    if (message.op !== 0) {
      writer.uint32(208).int32(message.op);
    }
    if (message.placard !== "") {
      writer.uint32(218).string(message.placard);
    }
    if (message.description !== "") {
      writer.uint32(226).string(message.description);
    }
    if (message.consortiaName !== "") {
      writer.uint32(234).string(message.consortiaName);
    }
    if (message.creatorName !== "") {
      writer.uint32(242).string(message.creatorName);
    }
    if (message.chairmanName !== "") {
      writer.uint32(250).string(message.chairmanName);
    }
    if (message.renames !== "") {
      writer.uint32(258).string(message.renames);
    }
    if (message.quitResult !== "") {
      writer.uint32(266).string(message.quitResult);
    }
    if (message.openApp !== false) {
      writer.uint32(272).bool(message.openApp);
    }
    if (message.isExist !== false) {
      writer.uint32(280).bool(message.isExist);
    }
    if (message.createDate !== "") {
      writer.uint32(290).string(message.createDate);
    }
    if (message.kickDate !== "") {
      writer.uint32(298).string(message.kickDate);
    }
    if (message.deductDate !== "") {
      writer.uint32(306).string(message.deductDate);
    }
    if (message.warnDate !== "") {
      writer.uint32(314).string(message.warnDate);
    }
    if (message.quitDate !== "") {
      writer.uint32(322).string(message.quitDate);
    }
    if (message.codeBeginDate !== "") {
      writer.uint32(330).string(message.codeBeginDate);
    }
    if (message.currentDate !== "") {
      writer.uint32(338).string(message.currentDate);
    }
    if (message.codeNeedDate !== 0) {
      writer.uint32(344).int32(message.codeNeedDate);
    }
    if (message.orderInfo !== "") {
      writer.uint32(354).string(message.orderInfo);
    }
    if (message.physiqueLevel !== 0) {
      writer.uint32(360).int32(message.physiqueLevel);
    }
    if (message.isRobot !== false) {
      writer.uint32(368).bool(message.isRobot);
    }
    writer.uint32(378).fork();
    for (const v of message.site) {
      writer.int32(v);
    }
    writer.join();
    if (message.speakTimes !== 0) {
      writer.uint32(384).int32(message.speakTimes);
    }
    if (message.votingDate !== "") {
      writer.uint32(394).string(message.votingDate);
    }
    if (message.votingStatic !== 0) {
      writer.uint32(400).int32(message.votingStatic);
    }
    if (message.votingId !== 0) {
      writer.uint32(408).int32(message.votingId);
    }
    if (message.activeData !== 0) {
      writer.uint32(416).int32(message.activeData);
    }
    if (message.groupPlacard !== "") {
      writer.uint32(426).string(message.groupPlacard);
    }
    if (message.altarDate !== "") {
      writer.uint32(434).string(message.altarDate);
    }
    if (message.altarState !== 0) {
      writer.uint32(440).int32(message.altarState);
    }
    if (message.maxMave !== 0) {
      writer.uint32(448).int32(message.maxMave);
    }
    if (message.newPowerLv !== 0) {
      writer.uint32(456).int32(message.newPowerLv);
    }
    if (message.newAgilityLv !== 0) {
      writer.uint32(464).int32(message.newAgilityLv);
    }
    if (message.newIntellectLv !== 0) {
      writer.uint32(472).int32(message.newIntellectLv);
    }
    if (message.newPhysiqueLv !== 0) {
      writer.uint32(480).int32(message.newPhysiqueLv);
    }
    if (message.famGpLv !== 0) {
      writer.uint32(488).int32(message.famGpLv);
    }
    if (message.medalLv !== 0) {
      writer.uint32(496).int32(message.medalLv);
    }
    if (message.honorLv !== 0) {
      writer.uint32(504).int32(message.honorLv);
    }
    if (message.scoreLv !== 0) {
      writer.uint32(512).int32(message.scoreLv);
    }
    if (message.bossInfo !== "") {
      writer.uint32(522).string(message.bossInfo);
    }
    if (message.materials !== 0) {
      writer.uint32(528).int32(message.materials);
    }
    if (message.TotalMaterials !== 0) {
      writer.uint32(536).int32(message.TotalMaterials);
    }
    writer.uint32(546).fork();
    for (const v of message.hiSkillList) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chairmanId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.levels = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.addCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.kickCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.shopLevel = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.storeLevel = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.altarLevel = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.schoolLevel = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.attackLevel = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.defenceLevel = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.agilityLevel = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.abilityLevel = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.captainLevel = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.goldLevel = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.fightPower = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.ownWildlands = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.offer = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.honor = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.blessTempId = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.blessCount = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.codeType = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.totalOffer = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.placard = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.chairmanName = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.renames = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.quitResult = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.openApp = reader.bool();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.createDate = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.kickDate = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.deductDate = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.warnDate = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.quitDate = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.codeBeginDate = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.currentDate = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.codeNeedDate = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.orderInfo = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.physiqueLevel = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.isRobot = reader.bool();
          continue;
        }
        case 47: {
          if (tag === 376) {
            message.site.push(reader.int32());

            continue;
          }

          if (tag === 378) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.site.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.speakTimes = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.votingDate = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.votingStatic = reader.int32();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.votingId = reader.int32();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.activeData = reader.int32();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.groupPlacard = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.altarDate = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 440) {
            break;
          }

          message.altarState = reader.int32();
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.maxMave = reader.int32();
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.newPowerLv = reader.int32();
          continue;
        }
        case 58: {
          if (tag !== 464) {
            break;
          }

          message.newAgilityLv = reader.int32();
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.newIntellectLv = reader.int32();
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.newPhysiqueLv = reader.int32();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.famGpLv = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 496) {
            break;
          }

          message.medalLv = reader.int32();
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.honorLv = reader.int32();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.scoreLv = reader.int32();
          continue;
        }
        case 65: {
          if (tag !== 522) {
            break;
          }

          message.bossInfo = reader.string();
          continue;
        }
        case 66: {
          if (tag !== 528) {
            break;
          }

          message.materials = reader.int32();
          continue;
        }
        case 67: {
          if (tag !== 536) {
            break;
          }

          message.TotalMaterials = reader.int32();
          continue;
        }
        case 68: {
          if (tag === 544) {
            message.hiSkillList.push(reader.int32());

            continue;
          }

          if (tag === 546) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.hiSkillList.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaInfoMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      creatorId: isSet(object.creatorId) ? globalThis.Number(object.creatorId) : 0,
      chairmanId: isSet(object.chairmanId) ? globalThis.Number(object.chairmanId) : 0,
      levels: isSet(object.levels) ? globalThis.Number(object.levels) : 0,
      addCount: isSet(object.addCount) ? globalThis.Number(object.addCount) : 0,
      currentCount: isSet(object.currentCount) ? globalThis.Number(object.currentCount) : 0,
      kickCount: isSet(object.kickCount) ? globalThis.Number(object.kickCount) : 0,
      shopLevel: isSet(object.shopLevel) ? globalThis.Number(object.shopLevel) : 0,
      storeLevel: isSet(object.storeLevel) ? globalThis.Number(object.storeLevel) : 0,
      altarLevel: isSet(object.altarLevel) ? globalThis.Number(object.altarLevel) : 0,
      schoolLevel: isSet(object.schoolLevel) ? globalThis.Number(object.schoolLevel) : 0,
      attackLevel: isSet(object.attackLevel) ? globalThis.Number(object.attackLevel) : 0,
      defenceLevel: isSet(object.defenceLevel) ? globalThis.Number(object.defenceLevel) : 0,
      agilityLevel: isSet(object.agilityLevel) ? globalThis.Number(object.agilityLevel) : 0,
      abilityLevel: isSet(object.abilityLevel) ? globalThis.Number(object.abilityLevel) : 0,
      captainLevel: isSet(object.captainLevel) ? globalThis.Number(object.captainLevel) : 0,
      goldLevel: isSet(object.goldLevel) ? globalThis.Number(object.goldLevel) : 0,
      fightPower: isSet(object.fightPower) ? globalThis.Number(object.fightPower) : 0,
      ownWildlands: isSet(object.ownWildlands) ? globalThis.Number(object.ownWildlands) : 0,
      offer: isSet(object.offer) ? globalThis.Number(object.offer) : 0,
      honor: isSet(object.honor) ? globalThis.Number(object.honor) : 0,
      blessTempId: isSet(object.blessTempId) ? globalThis.Number(object.blessTempId) : 0,
      blessCount: isSet(object.blessCount) ? globalThis.Number(object.blessCount) : 0,
      codeType: isSet(object.codeType) ? globalThis.Number(object.codeType) : 0,
      totalOffer: isSet(object.totalOffer) ? globalThis.Number(object.totalOffer) : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      placard: isSet(object.placard) ? globalThis.String(object.placard) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      creatorName: isSet(object.creatorName) ? globalThis.String(object.creatorName) : "",
      chairmanName: isSet(object.chairmanName) ? globalThis.String(object.chairmanName) : "",
      renames: isSet(object.renames) ? globalThis.String(object.renames) : "",
      quitResult: isSet(object.quitResult) ? globalThis.String(object.quitResult) : "",
      openApp: isSet(object.openApp) ? globalThis.Boolean(object.openApp) : false,
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      createDate: isSet(object.createDate) ? globalThis.String(object.createDate) : "",
      kickDate: isSet(object.kickDate) ? globalThis.String(object.kickDate) : "",
      deductDate: isSet(object.deductDate) ? globalThis.String(object.deductDate) : "",
      warnDate: isSet(object.warnDate) ? globalThis.String(object.warnDate) : "",
      quitDate: isSet(object.quitDate) ? globalThis.String(object.quitDate) : "",
      codeBeginDate: isSet(object.codeBeginDate) ? globalThis.String(object.codeBeginDate) : "",
      currentDate: isSet(object.currentDate) ? globalThis.String(object.currentDate) : "",
      codeNeedDate: isSet(object.codeNeedDate) ? globalThis.Number(object.codeNeedDate) : 0,
      orderInfo: isSet(object.orderInfo) ? globalThis.String(object.orderInfo) : "",
      physiqueLevel: isSet(object.physiqueLevel) ? globalThis.Number(object.physiqueLevel) : 0,
      isRobot: isSet(object.isRobot) ? globalThis.Boolean(object.isRobot) : false,
      site: globalThis.Array.isArray(object?.site) ? object.site.map((e: any) => globalThis.Number(e)) : [],
      speakTimes: isSet(object.speakTimes) ? globalThis.Number(object.speakTimes) : 0,
      votingDate: isSet(object.votingDate) ? globalThis.String(object.votingDate) : "",
      votingStatic: isSet(object.votingStatic) ? globalThis.Number(object.votingStatic) : 0,
      votingId: isSet(object.votingId) ? globalThis.Number(object.votingId) : 0,
      activeData: isSet(object.activeData) ? globalThis.Number(object.activeData) : 0,
      groupPlacard: isSet(object.groupPlacard) ? globalThis.String(object.groupPlacard) : "",
      altarDate: isSet(object.altarDate) ? globalThis.String(object.altarDate) : "",
      altarState: isSet(object.altarState) ? globalThis.Number(object.altarState) : 0,
      maxMave: isSet(object.maxMave) ? globalThis.Number(object.maxMave) : 0,
      newPowerLv: isSet(object.newPowerLv) ? globalThis.Number(object.newPowerLv) : 0,
      newAgilityLv: isSet(object.newAgilityLv) ? globalThis.Number(object.newAgilityLv) : 0,
      newIntellectLv: isSet(object.newIntellectLv) ? globalThis.Number(object.newIntellectLv) : 0,
      newPhysiqueLv: isSet(object.newPhysiqueLv) ? globalThis.Number(object.newPhysiqueLv) : 0,
      famGpLv: isSet(object.famGpLv) ? globalThis.Number(object.famGpLv) : 0,
      medalLv: isSet(object.medalLv) ? globalThis.Number(object.medalLv) : 0,
      honorLv: isSet(object.honorLv) ? globalThis.Number(object.honorLv) : 0,
      scoreLv: isSet(object.scoreLv) ? globalThis.Number(object.scoreLv) : 0,
      bossInfo: isSet(object.bossInfo) ? globalThis.String(object.bossInfo) : "",
      materials: isSet(object.materials) ? globalThis.Number(object.materials) : 0,
      TotalMaterials: isSet(object.TotalMaterials) ? globalThis.Number(object.TotalMaterials) : 0,
      hiSkillList: globalThis.Array.isArray(object?.hiSkillList)
        ? object.hiSkillList.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ConsortiaInfoMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.creatorId !== 0) {
      obj.creatorId = Math.round(message.creatorId);
    }
    if (message.chairmanId !== 0) {
      obj.chairmanId = Math.round(message.chairmanId);
    }
    if (message.levels !== 0) {
      obj.levels = Math.round(message.levels);
    }
    if (message.addCount !== 0) {
      obj.addCount = Math.round(message.addCount);
    }
    if (message.currentCount !== 0) {
      obj.currentCount = Math.round(message.currentCount);
    }
    if (message.kickCount !== 0) {
      obj.kickCount = Math.round(message.kickCount);
    }
    if (message.shopLevel !== 0) {
      obj.shopLevel = Math.round(message.shopLevel);
    }
    if (message.storeLevel !== 0) {
      obj.storeLevel = Math.round(message.storeLevel);
    }
    if (message.altarLevel !== 0) {
      obj.altarLevel = Math.round(message.altarLevel);
    }
    if (message.schoolLevel !== 0) {
      obj.schoolLevel = Math.round(message.schoolLevel);
    }
    if (message.attackLevel !== 0) {
      obj.attackLevel = Math.round(message.attackLevel);
    }
    if (message.defenceLevel !== 0) {
      obj.defenceLevel = Math.round(message.defenceLevel);
    }
    if (message.agilityLevel !== 0) {
      obj.agilityLevel = Math.round(message.agilityLevel);
    }
    if (message.abilityLevel !== 0) {
      obj.abilityLevel = Math.round(message.abilityLevel);
    }
    if (message.captainLevel !== 0) {
      obj.captainLevel = Math.round(message.captainLevel);
    }
    if (message.goldLevel !== 0) {
      obj.goldLevel = Math.round(message.goldLevel);
    }
    if (message.fightPower !== 0) {
      obj.fightPower = Math.round(message.fightPower);
    }
    if (message.ownWildlands !== 0) {
      obj.ownWildlands = Math.round(message.ownWildlands);
    }
    if (message.offer !== 0) {
      obj.offer = Math.round(message.offer);
    }
    if (message.honor !== 0) {
      obj.honor = Math.round(message.honor);
    }
    if (message.blessTempId !== 0) {
      obj.blessTempId = Math.round(message.blessTempId);
    }
    if (message.blessCount !== 0) {
      obj.blessCount = Math.round(message.blessCount);
    }
    if (message.codeType !== 0) {
      obj.codeType = Math.round(message.codeType);
    }
    if (message.totalOffer !== 0) {
      obj.totalOffer = Math.round(message.totalOffer);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.placard !== "") {
      obj.placard = message.placard;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.creatorName !== "") {
      obj.creatorName = message.creatorName;
    }
    if (message.chairmanName !== "") {
      obj.chairmanName = message.chairmanName;
    }
    if (message.renames !== "") {
      obj.renames = message.renames;
    }
    if (message.quitResult !== "") {
      obj.quitResult = message.quitResult;
    }
    if (message.openApp !== false) {
      obj.openApp = message.openApp;
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.createDate !== "") {
      obj.createDate = message.createDate;
    }
    if (message.kickDate !== "") {
      obj.kickDate = message.kickDate;
    }
    if (message.deductDate !== "") {
      obj.deductDate = message.deductDate;
    }
    if (message.warnDate !== "") {
      obj.warnDate = message.warnDate;
    }
    if (message.quitDate !== "") {
      obj.quitDate = message.quitDate;
    }
    if (message.codeBeginDate !== "") {
      obj.codeBeginDate = message.codeBeginDate;
    }
    if (message.currentDate !== "") {
      obj.currentDate = message.currentDate;
    }
    if (message.codeNeedDate !== 0) {
      obj.codeNeedDate = Math.round(message.codeNeedDate);
    }
    if (message.orderInfo !== "") {
      obj.orderInfo = message.orderInfo;
    }
    if (message.physiqueLevel !== 0) {
      obj.physiqueLevel = Math.round(message.physiqueLevel);
    }
    if (message.isRobot !== false) {
      obj.isRobot = message.isRobot;
    }
    if (message.site?.length) {
      obj.site = message.site.map((e) => Math.round(e));
    }
    if (message.speakTimes !== 0) {
      obj.speakTimes = Math.round(message.speakTimes);
    }
    if (message.votingDate !== "") {
      obj.votingDate = message.votingDate;
    }
    if (message.votingStatic !== 0) {
      obj.votingStatic = Math.round(message.votingStatic);
    }
    if (message.votingId !== 0) {
      obj.votingId = Math.round(message.votingId);
    }
    if (message.activeData !== 0) {
      obj.activeData = Math.round(message.activeData);
    }
    if (message.groupPlacard !== "") {
      obj.groupPlacard = message.groupPlacard;
    }
    if (message.altarDate !== "") {
      obj.altarDate = message.altarDate;
    }
    if (message.altarState !== 0) {
      obj.altarState = Math.round(message.altarState);
    }
    if (message.maxMave !== 0) {
      obj.maxMave = Math.round(message.maxMave);
    }
    if (message.newPowerLv !== 0) {
      obj.newPowerLv = Math.round(message.newPowerLv);
    }
    if (message.newAgilityLv !== 0) {
      obj.newAgilityLv = Math.round(message.newAgilityLv);
    }
    if (message.newIntellectLv !== 0) {
      obj.newIntellectLv = Math.round(message.newIntellectLv);
    }
    if (message.newPhysiqueLv !== 0) {
      obj.newPhysiqueLv = Math.round(message.newPhysiqueLv);
    }
    if (message.famGpLv !== 0) {
      obj.famGpLv = Math.round(message.famGpLv);
    }
    if (message.medalLv !== 0) {
      obj.medalLv = Math.round(message.medalLv);
    }
    if (message.honorLv !== 0) {
      obj.honorLv = Math.round(message.honorLv);
    }
    if (message.scoreLv !== 0) {
      obj.scoreLv = Math.round(message.scoreLv);
    }
    if (message.bossInfo !== "") {
      obj.bossInfo = message.bossInfo;
    }
    if (message.materials !== 0) {
      obj.materials = Math.round(message.materials);
    }
    if (message.TotalMaterials !== 0) {
      obj.TotalMaterials = Math.round(message.TotalMaterials);
    }
    if (message.hiSkillList?.length) {
      obj.hiSkillList = message.hiSkillList.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaInfoMsg>, I>>(base?: I): ConsortiaInfoMsg {
    return ConsortiaInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaInfoMsg>, I>>(object: I): ConsortiaInfoMsg {
    const message = createBaseConsortiaInfoMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.creatorId = object.creatorId ?? 0;
    message.chairmanId = object.chairmanId ?? 0;
    message.levels = object.levels ?? 0;
    message.addCount = object.addCount ?? 0;
    message.currentCount = object.currentCount ?? 0;
    message.kickCount = object.kickCount ?? 0;
    message.shopLevel = object.shopLevel ?? 0;
    message.storeLevel = object.storeLevel ?? 0;
    message.altarLevel = object.altarLevel ?? 0;
    message.schoolLevel = object.schoolLevel ?? 0;
    message.attackLevel = object.attackLevel ?? 0;
    message.defenceLevel = object.defenceLevel ?? 0;
    message.agilityLevel = object.agilityLevel ?? 0;
    message.abilityLevel = object.abilityLevel ?? 0;
    message.captainLevel = object.captainLevel ?? 0;
    message.goldLevel = object.goldLevel ?? 0;
    message.fightPower = object.fightPower ?? 0;
    message.ownWildlands = object.ownWildlands ?? 0;
    message.offer = object.offer ?? 0;
    message.honor = object.honor ?? 0;
    message.blessTempId = object.blessTempId ?? 0;
    message.blessCount = object.blessCount ?? 0;
    message.codeType = object.codeType ?? 0;
    message.totalOffer = object.totalOffer ?? 0;
    message.op = object.op ?? 0;
    message.placard = object.placard ?? "";
    message.description = object.description ?? "";
    message.consortiaName = object.consortiaName ?? "";
    message.creatorName = object.creatorName ?? "";
    message.chairmanName = object.chairmanName ?? "";
    message.renames = object.renames ?? "";
    message.quitResult = object.quitResult ?? "";
    message.openApp = object.openApp ?? false;
    message.isExist = object.isExist ?? false;
    message.createDate = object.createDate ?? "";
    message.kickDate = object.kickDate ?? "";
    message.deductDate = object.deductDate ?? "";
    message.warnDate = object.warnDate ?? "";
    message.quitDate = object.quitDate ?? "";
    message.codeBeginDate = object.codeBeginDate ?? "";
    message.currentDate = object.currentDate ?? "";
    message.codeNeedDate = object.codeNeedDate ?? 0;
    message.orderInfo = object.orderInfo ?? "";
    message.physiqueLevel = object.physiqueLevel ?? 0;
    message.isRobot = object.isRobot ?? false;
    message.site = object.site?.map((e) => e) || [];
    message.speakTimes = object.speakTimes ?? 0;
    message.votingDate = object.votingDate ?? "";
    message.votingStatic = object.votingStatic ?? 0;
    message.votingId = object.votingId ?? 0;
    message.activeData = object.activeData ?? 0;
    message.groupPlacard = object.groupPlacard ?? "";
    message.altarDate = object.altarDate ?? "";
    message.altarState = object.altarState ?? 0;
    message.maxMave = object.maxMave ?? 0;
    message.newPowerLv = object.newPowerLv ?? 0;
    message.newAgilityLv = object.newAgilityLv ?? 0;
    message.newIntellectLv = object.newIntellectLv ?? 0;
    message.newPhysiqueLv = object.newPhysiqueLv ?? 0;
    message.famGpLv = object.famGpLv ?? 0;
    message.medalLv = object.medalLv ?? 0;
    message.honorLv = object.honorLv ?? 0;
    message.scoreLv = object.scoreLv ?? 0;
    message.bossInfo = object.bossInfo ?? "";
    message.materials = object.materials ?? 0;
    message.TotalMaterials = object.TotalMaterials ?? 0;
    message.hiSkillList = object.hiSkillList?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
