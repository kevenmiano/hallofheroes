// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: pet/PlayerPetOpMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.pet";

export interface PlayerPetOpMsg {
  petId: number;
  opType: number;
  petName: string;
  attributes: number[];
  value: number;
  itemPos: number;
  payType: number;
  targetUserid: number;
  skillId: number;
  petIds: number[];
}

function createBasePlayerPetOpMsg(): PlayerPetOpMsg {
  return {
    petId: 0,
    opType: 0,
    petName: "",
    attributes: [],
    value: 0,
    itemPos: 0,
    payType: 0,
    targetUserid: 0,
    skillId: 0,
    petIds: [],
  };
}

export const PlayerPetOpMsg: MessageFns<PlayerPetOpMsg> = {
  encode(message: PlayerPetOpMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.petId !== 0) {
      writer.uint32(8).int32(message.petId);
    }
    if (message.opType !== 0) {
      writer.uint32(16).int32(message.opType);
    }
    if (message.petName !== "") {
      writer.uint32(26).string(message.petName);
    }
    writer.uint32(34).fork();
    for (const v of message.attributes) {
      writer.int32(v);
    }
    writer.join();
    if (message.value !== 0) {
      writer.uint32(40).int32(message.value);
    }
    if (message.itemPos !== 0) {
      writer.uint32(48).int32(message.itemPos);
    }
    if (message.payType !== 0) {
      writer.uint32(56).int32(message.payType);
    }
    if (message.targetUserid !== 0) {
      writer.uint32(64).int32(message.targetUserid);
    }
    if (message.skillId !== 0) {
      writer.uint32(72).int32(message.skillId);
    }
    writer.uint32(82).fork();
    for (const v of message.petIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerPetOpMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerPetOpMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.petId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.attributes.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.attributes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.itemPos = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.targetUserid = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.skillId = reader.int32();
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.petIds.push(reader.int32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.petIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerPetOpMsg {
    return {
      petId: isSet(object.petId) ? globalThis.Number(object.petId) : 0,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => globalThis.Number(e))
        : [],
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      itemPos: isSet(object.itemPos) ? globalThis.Number(object.itemPos) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
      targetUserid: isSet(object.targetUserid) ? globalThis.Number(object.targetUserid) : 0,
      skillId: isSet(object.skillId) ? globalThis.Number(object.skillId) : 0,
      petIds: globalThis.Array.isArray(object?.petIds) ? object.petIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: PlayerPetOpMsg): unknown {
    const obj: any = {};
    if (message.petId !== 0) {
      obj.petId = Math.round(message.petId);
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Math.round(e));
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.itemPos !== 0) {
      obj.itemPos = Math.round(message.itemPos);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    if (message.targetUserid !== 0) {
      obj.targetUserid = Math.round(message.targetUserid);
    }
    if (message.skillId !== 0) {
      obj.skillId = Math.round(message.skillId);
    }
    if (message.petIds?.length) {
      obj.petIds = message.petIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerPetOpMsg>, I>>(base?: I): PlayerPetOpMsg {
    return PlayerPetOpMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerPetOpMsg>, I>>(object: I): PlayerPetOpMsg {
    const message = createBasePlayerPetOpMsg();
    message.petId = object.petId ?? 0;
    message.opType = object.opType ?? 0;
    message.petName = object.petName ?? "";
    message.attributes = object.attributes?.map((e) => e) || [];
    message.value = object.value ?? 0;
    message.itemPos = object.itemPos ?? 0;
    message.payType = object.payType ?? 0;
    message.targetUserid = object.targetUserid ?? 0;
    message.skillId = object.skillId ?? 0;
    message.petIds = object.petIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
