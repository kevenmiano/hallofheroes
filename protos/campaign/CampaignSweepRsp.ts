// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignSweepRsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignSweepRsp {
  result: number[];
  status: number;
  sweepType: number;
  totalGp: number;
  dropItems: number[];
  campaignId: number;
}

function createBaseCampaignSweepRsp(): CampaignSweepRsp {
  return { result: [], status: 0, sweepType: 0, totalGp: 0, dropItems: [], campaignId: 0 };
}

export const CampaignSweepRsp: MessageFns<CampaignSweepRsp> = {
  encode(message: CampaignSweepRsp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.join();
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.sweepType !== 0) {
      writer.uint32(24).int32(message.sweepType);
    }
    if (message.totalGp !== 0) {
      writer.uint32(32).int32(message.totalGp);
    }
    writer.uint32(42).fork();
    for (const v of message.dropItems) {
      writer.int32(v);
    }
    writer.join();
    if (message.campaignId !== 0) {
      writer.uint32(48).int32(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignSweepRsp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignSweepRsp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.result.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sweepType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalGp = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.dropItems.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dropItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignSweepRsp {
    return {
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => globalThis.Number(e)) : [],
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      sweepType: isSet(object.sweepType) ? globalThis.Number(object.sweepType) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.Number(object.totalGp) : 0,
      dropItems: globalThis.Array.isArray(object?.dropItems)
        ? object.dropItems.map((e: any) => globalThis.Number(e))
        : [],
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
    };
  },

  toJSON(message: CampaignSweepRsp): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Math.round(e));
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.sweepType !== 0) {
      obj.sweepType = Math.round(message.sweepType);
    }
    if (message.totalGp !== 0) {
      obj.totalGp = Math.round(message.totalGp);
    }
    if (message.dropItems?.length) {
      obj.dropItems = message.dropItems.map((e) => Math.round(e));
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignSweepRsp>, I>>(base?: I): CampaignSweepRsp {
    return CampaignSweepRsp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignSweepRsp>, I>>(object: I): CampaignSweepRsp {
    const message = createBaseCampaignSweepRsp();
    message.result = object.result?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.sweepType = object.sweepType ?? 0;
    message.totalGp = object.totalGp ?? 0;
    message.dropItems = object.dropItems?.map((e) => e) || [];
    message.campaignId = object.campaignId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
