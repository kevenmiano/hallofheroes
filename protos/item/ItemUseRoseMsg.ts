// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: item/ItemUseRoseMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.item";

export interface ItemUseRoseMsg {
  playerId: number;
  friendId: number;
  favoraCount: number;
  addCharm: number;
  noticeType: number;
  itemCount: number;
  itemName: string;
  friendNameXml: string;
  msg: string;
}

function createBaseItemUseRoseMsg(): ItemUseRoseMsg {
  return {
    playerId: 0,
    friendId: 0,
    favoraCount: 0,
    addCharm: 0,
    noticeType: 0,
    itemCount: 0,
    itemName: "",
    friendNameXml: "",
    msg: "",
  };
}

export const ItemUseRoseMsg: MessageFns<ItemUseRoseMsg> = {
  encode(message: ItemUseRoseMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.friendId !== 0) {
      writer.uint32(16).int32(message.friendId);
    }
    if (message.favoraCount !== 0) {
      writer.uint32(24).int32(message.favoraCount);
    }
    if (message.addCharm !== 0) {
      writer.uint32(32).int32(message.addCharm);
    }
    if (message.noticeType !== 0) {
      writer.uint32(40).int32(message.noticeType);
    }
    if (message.itemCount !== 0) {
      writer.uint32(48).int32(message.itemCount);
    }
    if (message.itemName !== "") {
      writer.uint32(58).string(message.itemName);
    }
    if (message.friendNameXml !== "") {
      writer.uint32(66).string(message.friendNameXml);
    }
    if (message.msg !== "") {
      writer.uint32(74).string(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemUseRoseMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemUseRoseMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.friendId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.favoraCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.addCharm = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.noticeType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.itemCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.itemName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.friendNameXml = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemUseRoseMsg {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      friendId: isSet(object.friendId) ? globalThis.Number(object.friendId) : 0,
      favoraCount: isSet(object.favoraCount) ? globalThis.Number(object.favoraCount) : 0,
      addCharm: isSet(object.addCharm) ? globalThis.Number(object.addCharm) : 0,
      noticeType: isSet(object.noticeType) ? globalThis.Number(object.noticeType) : 0,
      itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : 0,
      itemName: isSet(object.itemName) ? globalThis.String(object.itemName) : "",
      friendNameXml: isSet(object.friendNameXml) ? globalThis.String(object.friendNameXml) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
    };
  },

  toJSON(message: ItemUseRoseMsg): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.friendId !== 0) {
      obj.friendId = Math.round(message.friendId);
    }
    if (message.favoraCount !== 0) {
      obj.favoraCount = Math.round(message.favoraCount);
    }
    if (message.addCharm !== 0) {
      obj.addCharm = Math.round(message.addCharm);
    }
    if (message.noticeType !== 0) {
      obj.noticeType = Math.round(message.noticeType);
    }
    if (message.itemCount !== 0) {
      obj.itemCount = Math.round(message.itemCount);
    }
    if (message.itemName !== "") {
      obj.itemName = message.itemName;
    }
    if (message.friendNameXml !== "") {
      obj.friendNameXml = message.friendNameXml;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemUseRoseMsg>, I>>(base?: I): ItemUseRoseMsg {
    return ItemUseRoseMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemUseRoseMsg>, I>>(object: I): ItemUseRoseMsg {
    const message = createBaseItemUseRoseMsg();
    message.playerId = object.playerId ?? 0;
    message.friendId = object.friendId ?? 0;
    message.favoraCount = object.favoraCount ?? 0;
    message.addCharm = object.addCharm ?? 0;
    message.noticeType = object.noticeType ?? 0;
    message.itemCount = object.itemCount ?? 0;
    message.itemName = object.itemName ?? "";
    message.friendNameXml = object.friendNameXml ?? "";
    message.msg = object.msg ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
