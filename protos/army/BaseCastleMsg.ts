// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/BaseCastleMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface BaseCastleMsg {
  id: number;
  mapId: number;
  posX: number;
  posY: number;
  templateId: number;
  type: number;
  occupyPlayerId: number;
  occupyPlayerName: string;
  occupyLeagueName: string;
  state: number;
  defenceLefttime: number;
  castleName: string;
  leftEnergy: number;
  grade: number;
  isDefenceBuffer: boolean;
  vipCastleView: number;
  vipType: number;
  vipGrade: number;
}

function createBaseBaseCastleMsg(): BaseCastleMsg {
  return {
    id: 0,
    mapId: 0,
    posX: 0,
    posY: 0,
    templateId: 0,
    type: 0,
    occupyPlayerId: 0,
    occupyPlayerName: "",
    occupyLeagueName: "",
    state: 0,
    defenceLefttime: 0,
    castleName: "",
    leftEnergy: 0,
    grade: 0,
    isDefenceBuffer: false,
    vipCastleView: 0,
    vipType: 0,
    vipGrade: 0,
  };
}

export const BaseCastleMsg: MessageFns<BaseCastleMsg> = {
  encode(message: BaseCastleMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.mapId !== 0) {
      writer.uint32(16).int32(message.mapId);
    }
    if (message.posX !== 0) {
      writer.uint32(24).int32(message.posX);
    }
    if (message.posY !== 0) {
      writer.uint32(32).int32(message.posY);
    }
    if (message.templateId !== 0) {
      writer.uint32(40).int32(message.templateId);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.occupyPlayerId !== 0) {
      writer.uint32(56).int32(message.occupyPlayerId);
    }
    if (message.occupyPlayerName !== "") {
      writer.uint32(66).string(message.occupyPlayerName);
    }
    if (message.occupyLeagueName !== "") {
      writer.uint32(74).string(message.occupyLeagueName);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.defenceLefttime !== 0) {
      writer.uint32(88).int32(message.defenceLefttime);
    }
    if (message.castleName !== "") {
      writer.uint32(98).string(message.castleName);
    }
    if (message.leftEnergy !== 0) {
      writer.uint32(104).int32(message.leftEnergy);
    }
    if (message.grade !== 0) {
      writer.uint32(112).int32(message.grade);
    }
    if (message.isDefenceBuffer !== false) {
      writer.uint32(120).bool(message.isDefenceBuffer);
    }
    if (message.vipCastleView !== 0) {
      writer.uint32(128).int32(message.vipCastleView);
    }
    if (message.vipType !== 0) {
      writer.uint32(136).int32(message.vipType);
    }
    if (message.vipGrade !== 0) {
      writer.uint32(144).int32(message.vipGrade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseCastleMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseCastleMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.posX = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.posY = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.occupyPlayerId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.occupyPlayerName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.occupyLeagueName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.defenceLefttime = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.castleName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.leftEnergy = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.isDefenceBuffer = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.vipCastleView = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.vipGrade = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseCastleMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      occupyPlayerId: isSet(object.occupyPlayerId) ? globalThis.Number(object.occupyPlayerId) : 0,
      occupyPlayerName: isSet(object.occupyPlayerName) ? globalThis.String(object.occupyPlayerName) : "",
      occupyLeagueName: isSet(object.occupyLeagueName) ? globalThis.String(object.occupyLeagueName) : "",
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      defenceLefttime: isSet(object.defenceLefttime) ? globalThis.Number(object.defenceLefttime) : 0,
      castleName: isSet(object.castleName) ? globalThis.String(object.castleName) : "",
      leftEnergy: isSet(object.leftEnergy) ? globalThis.Number(object.leftEnergy) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      isDefenceBuffer: isSet(object.isDefenceBuffer) ? globalThis.Boolean(object.isDefenceBuffer) : false,
      vipCastleView: isSet(object.vipCastleView) ? globalThis.Number(object.vipCastleView) : 0,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      vipGrade: isSet(object.vipGrade) ? globalThis.Number(object.vipGrade) : 0,
    };
  },

  toJSON(message: BaseCastleMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.posX !== 0) {
      obj.posX = Math.round(message.posX);
    }
    if (message.posY !== 0) {
      obj.posY = Math.round(message.posY);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.occupyPlayerId !== 0) {
      obj.occupyPlayerId = Math.round(message.occupyPlayerId);
    }
    if (message.occupyPlayerName !== "") {
      obj.occupyPlayerName = message.occupyPlayerName;
    }
    if (message.occupyLeagueName !== "") {
      obj.occupyLeagueName = message.occupyLeagueName;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.defenceLefttime !== 0) {
      obj.defenceLefttime = Math.round(message.defenceLefttime);
    }
    if (message.castleName !== "") {
      obj.castleName = message.castleName;
    }
    if (message.leftEnergy !== 0) {
      obj.leftEnergy = Math.round(message.leftEnergy);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.isDefenceBuffer !== false) {
      obj.isDefenceBuffer = message.isDefenceBuffer;
    }
    if (message.vipCastleView !== 0) {
      obj.vipCastleView = Math.round(message.vipCastleView);
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.vipGrade !== 0) {
      obj.vipGrade = Math.round(message.vipGrade);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseCastleMsg>, I>>(base?: I): BaseCastleMsg {
    return BaseCastleMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseCastleMsg>, I>>(object: I): BaseCastleMsg {
    const message = createBaseBaseCastleMsg();
    message.id = object.id ?? 0;
    message.mapId = object.mapId ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.templateId = object.templateId ?? 0;
    message.type = object.type ?? 0;
    message.occupyPlayerId = object.occupyPlayerId ?? 0;
    message.occupyPlayerName = object.occupyPlayerName ?? "";
    message.occupyLeagueName = object.occupyLeagueName ?? "";
    message.state = object.state ?? 0;
    message.defenceLefttime = object.defenceLefttime ?? 0;
    message.castleName = object.castleName ?? "";
    message.leftEnergy = object.leftEnergy ?? 0;
    message.grade = object.grade ?? 0;
    message.isDefenceBuffer = object.isDefenceBuffer ?? false;
    message.vipCastleView = object.vipCastleView ?? 0;
    message.vipType = object.vipType ?? 0;
    message.vipGrade = object.vipGrade ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
