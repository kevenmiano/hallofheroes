// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignNodeUpdateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignNodeUpdateMsg {
  nodeId: number;
  nodeState: number;
  userId: number;
  visitUserIds: number[];
  userIds: number[];
  uuId: string;
  param1: number;
  sonType: number;
  visitServerName: number[];
  leftFightingTime: number;
}

function createBaseCampaignNodeUpdateMsg(): CampaignNodeUpdateMsg {
  return {
    nodeId: 0,
    nodeState: 0,
    userId: 0,
    visitUserIds: [],
    userIds: [],
    uuId: "",
    param1: 0,
    sonType: 0,
    visitServerName: [],
    leftFightingTime: 0,
  };
}

export const CampaignNodeUpdateMsg: MessageFns<CampaignNodeUpdateMsg> = {
  encode(message: CampaignNodeUpdateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== 0) {
      writer.uint32(8).int32(message.nodeId);
    }
    if (message.nodeState !== 0) {
      writer.uint32(16).int32(message.nodeState);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    writer.uint32(34).fork();
    for (const v of message.visitUserIds) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.userIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.uuId !== "") {
      writer.uint32(50).string(message.uuId);
    }
    if (message.param1 !== 0) {
      writer.uint32(56).int32(message.param1);
    }
    if (message.sonType !== 0) {
      writer.uint32(64).int32(message.sonType);
    }
    writer.uint32(74).fork();
    for (const v of message.visitServerName) {
      writer.int32(v);
    }
    writer.join();
    if (message.leftFightingTime !== 0) {
      writer.uint32(80).int32(message.leftFightingTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignNodeUpdateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignNodeUpdateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nodeState = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.visitUserIds.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.visitUserIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.userIds.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uuId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.sonType = reader.int32();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.visitServerName.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.visitServerName.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.leftFightingTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignNodeUpdateMsg {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      nodeState: isSet(object.nodeState) ? globalThis.Number(object.nodeState) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      visitUserIds: globalThis.Array.isArray(object?.visitUserIds)
        ? object.visitUserIds.map((e: any) => globalThis.Number(e))
        : [],
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.Number(e)) : [],
      uuId: isSet(object.uuId) ? globalThis.String(object.uuId) : "",
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      sonType: isSet(object.sonType) ? globalThis.Number(object.sonType) : 0,
      visitServerName: globalThis.Array.isArray(object?.visitServerName)
        ? object.visitServerName.map((e: any) => globalThis.Number(e))
        : [],
      leftFightingTime: isSet(object.leftFightingTime) ? globalThis.Number(object.leftFightingTime) : 0,
    };
  },

  toJSON(message: CampaignNodeUpdateMsg): unknown {
    const obj: any = {};
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.nodeState !== 0) {
      obj.nodeState = Math.round(message.nodeState);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.visitUserIds?.length) {
      obj.visitUserIds = message.visitUserIds.map((e) => Math.round(e));
    }
    if (message.userIds?.length) {
      obj.userIds = message.userIds.map((e) => Math.round(e));
    }
    if (message.uuId !== "") {
      obj.uuId = message.uuId;
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.sonType !== 0) {
      obj.sonType = Math.round(message.sonType);
    }
    if (message.visitServerName?.length) {
      obj.visitServerName = message.visitServerName.map((e) => Math.round(e));
    }
    if (message.leftFightingTime !== 0) {
      obj.leftFightingTime = Math.round(message.leftFightingTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignNodeUpdateMsg>, I>>(base?: I): CampaignNodeUpdateMsg {
    return CampaignNodeUpdateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignNodeUpdateMsg>, I>>(object: I): CampaignNodeUpdateMsg {
    const message = createBaseCampaignNodeUpdateMsg();
    message.nodeId = object.nodeId ?? 0;
    message.nodeState = object.nodeState ?? 0;
    message.userId = object.userId ?? 0;
    message.visitUserIds = object.visitUserIds?.map((e) => e) || [];
    message.userIds = object.userIds?.map((e) => e) || [];
    message.uuId = object.uuId ?? "";
    message.param1 = object.param1 ?? 0;
    message.sonType = object.sonType ?? 0;
    message.visitServerName = object.visitServerName?.map((e) => e) || [];
    message.leftFightingTime = object.leftFightingTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
