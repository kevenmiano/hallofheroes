// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: remotepet/RemotePetMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.remotepet";

export interface RemotePetMsg {
  userId: number;
  nowIndex: number;
  MaxIndex: number;
  order: number;
  skills: string;
  items: string;
  sweepTime: string;
  specialIndex: string;
  pos: string;
  pets: string;
  sweepIndex: number;
  isFirst: boolean;
  fight: number;
  lastOrder: number;
  isGet: boolean;
  resetTime: string;
  skillStatus: string;
}

function createBaseRemotePetMsg(): RemotePetMsg {
  return {
    userId: 0,
    nowIndex: 0,
    MaxIndex: 0,
    order: 0,
    skills: "",
    items: "",
    sweepTime: "",
    specialIndex: "",
    pos: "",
    pets: "",
    sweepIndex: 0,
    isFirst: false,
    fight: 0,
    lastOrder: 0,
    isGet: false,
    resetTime: "",
    skillStatus: "",
  };
}

export const RemotePetMsg: MessageFns<RemotePetMsg> = {
  encode(message: RemotePetMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.nowIndex !== 0) {
      writer.uint32(16).int32(message.nowIndex);
    }
    if (message.MaxIndex !== 0) {
      writer.uint32(24).int32(message.MaxIndex);
    }
    if (message.order !== 0) {
      writer.uint32(32).int32(message.order);
    }
    if (message.skills !== "") {
      writer.uint32(42).string(message.skills);
    }
    if (message.items !== "") {
      writer.uint32(50).string(message.items);
    }
    if (message.sweepTime !== "") {
      writer.uint32(58).string(message.sweepTime);
    }
    if (message.specialIndex !== "") {
      writer.uint32(66).string(message.specialIndex);
    }
    if (message.pos !== "") {
      writer.uint32(74).string(message.pos);
    }
    if (message.pets !== "") {
      writer.uint32(82).string(message.pets);
    }
    if (message.sweepIndex !== 0) {
      writer.uint32(88).int32(message.sweepIndex);
    }
    if (message.isFirst !== false) {
      writer.uint32(96).bool(message.isFirst);
    }
    if (message.fight !== 0) {
      writer.uint32(104).int32(message.fight);
    }
    if (message.lastOrder !== 0) {
      writer.uint32(112).int32(message.lastOrder);
    }
    if (message.isGet !== false) {
      writer.uint32(120).bool(message.isGet);
    }
    if (message.resetTime !== "") {
      writer.uint32(130).string(message.resetTime);
    }
    if (message.skillStatus !== "") {
      writer.uint32(138).string(message.skillStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemotePetMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemotePetMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nowIndex = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.MaxIndex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skills = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.items = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sweepTime = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.specialIndex = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.pos = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.pets = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.sweepIndex = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isFirst = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.fight = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.lastOrder = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.isGet = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.resetTime = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.skillStatus = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemotePetMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nowIndex: isSet(object.nowIndex) ? globalThis.Number(object.nowIndex) : 0,
      MaxIndex: isSet(object.MaxIndex) ? globalThis.Number(object.MaxIndex) : 0,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      skills: isSet(object.skills) ? globalThis.String(object.skills) : "",
      items: isSet(object.items) ? globalThis.String(object.items) : "",
      sweepTime: isSet(object.sweepTime) ? globalThis.String(object.sweepTime) : "",
      specialIndex: isSet(object.specialIndex) ? globalThis.String(object.specialIndex) : "",
      pos: isSet(object.pos) ? globalThis.String(object.pos) : "",
      pets: isSet(object.pets) ? globalThis.String(object.pets) : "",
      sweepIndex: isSet(object.sweepIndex) ? globalThis.Number(object.sweepIndex) : 0,
      isFirst: isSet(object.isFirst) ? globalThis.Boolean(object.isFirst) : false,
      fight: isSet(object.fight) ? globalThis.Number(object.fight) : 0,
      lastOrder: isSet(object.lastOrder) ? globalThis.Number(object.lastOrder) : 0,
      isGet: isSet(object.isGet) ? globalThis.Boolean(object.isGet) : false,
      resetTime: isSet(object.resetTime) ? globalThis.String(object.resetTime) : "",
      skillStatus: isSet(object.skillStatus) ? globalThis.String(object.skillStatus) : "",
    };
  },

  toJSON(message: RemotePetMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nowIndex !== 0) {
      obj.nowIndex = Math.round(message.nowIndex);
    }
    if (message.MaxIndex !== 0) {
      obj.MaxIndex = Math.round(message.MaxIndex);
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.skills !== "") {
      obj.skills = message.skills;
    }
    if (message.items !== "") {
      obj.items = message.items;
    }
    if (message.sweepTime !== "") {
      obj.sweepTime = message.sweepTime;
    }
    if (message.specialIndex !== "") {
      obj.specialIndex = message.specialIndex;
    }
    if (message.pos !== "") {
      obj.pos = message.pos;
    }
    if (message.pets !== "") {
      obj.pets = message.pets;
    }
    if (message.sweepIndex !== 0) {
      obj.sweepIndex = Math.round(message.sweepIndex);
    }
    if (message.isFirst !== false) {
      obj.isFirst = message.isFirst;
    }
    if (message.fight !== 0) {
      obj.fight = Math.round(message.fight);
    }
    if (message.lastOrder !== 0) {
      obj.lastOrder = Math.round(message.lastOrder);
    }
    if (message.isGet !== false) {
      obj.isGet = message.isGet;
    }
    if (message.resetTime !== "") {
      obj.resetTime = message.resetTime;
    }
    if (message.skillStatus !== "") {
      obj.skillStatus = message.skillStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemotePetMsg>, I>>(base?: I): RemotePetMsg {
    return RemotePetMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemotePetMsg>, I>>(object: I): RemotePetMsg {
    const message = createBaseRemotePetMsg();
    message.userId = object.userId ?? 0;
    message.nowIndex = object.nowIndex ?? 0;
    message.MaxIndex = object.MaxIndex ?? 0;
    message.order = object.order ?? 0;
    message.skills = object.skills ?? "";
    message.items = object.items ?? "";
    message.sweepTime = object.sweepTime ?? "";
    message.specialIndex = object.specialIndex ?? "";
    message.pos = object.pos ?? "";
    message.pets = object.pets ?? "";
    message.sweepIndex = object.sweepIndex ?? 0;
    message.isFirst = object.isFirst ?? false;
    message.fight = object.fight ?? 0;
    message.lastOrder = object.lastOrder ?? 0;
    message.isGet = object.isGet ?? false;
    message.resetTime = object.resetTime ?? "";
    message.skillStatus = object.skillStatus ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
