// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/AvaterMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface AvaterMsg {
  userId: number;
  armTempId: number;
  clothTempId: number;
  fashionArmTempId: number;
  fashionClothTempId: number;
  fashionWingTempId: number;
  fashionHeadTempId: number;
}

function createBaseAvaterMsg(): AvaterMsg {
  return {
    userId: 0,
    armTempId: 0,
    clothTempId: 0,
    fashionArmTempId: 0,
    fashionClothTempId: 0,
    fashionWingTempId: 0,
    fashionHeadTempId: 0,
  };
}

export const AvaterMsg: MessageFns<AvaterMsg> = {
  encode(message: AvaterMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.armTempId !== 0) {
      writer.uint32(16).int32(message.armTempId);
    }
    if (message.clothTempId !== 0) {
      writer.uint32(24).int32(message.clothTempId);
    }
    if (message.fashionArmTempId !== 0) {
      writer.uint32(32).int32(message.fashionArmTempId);
    }
    if (message.fashionClothTempId !== 0) {
      writer.uint32(40).int32(message.fashionClothTempId);
    }
    if (message.fashionWingTempId !== 0) {
      writer.uint32(48).int32(message.fashionWingTempId);
    }
    if (message.fashionHeadTempId !== 0) {
      writer.uint32(56).int32(message.fashionHeadTempId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvaterMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvaterMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.armTempId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.clothTempId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fashionArmTempId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fashionClothTempId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fashionWingTempId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fashionHeadTempId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvaterMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      armTempId: isSet(object.armTempId) ? globalThis.Number(object.armTempId) : 0,
      clothTempId: isSet(object.clothTempId) ? globalThis.Number(object.clothTempId) : 0,
      fashionArmTempId: isSet(object.fashionArmTempId) ? globalThis.Number(object.fashionArmTempId) : 0,
      fashionClothTempId: isSet(object.fashionClothTempId) ? globalThis.Number(object.fashionClothTempId) : 0,
      fashionWingTempId: isSet(object.fashionWingTempId) ? globalThis.Number(object.fashionWingTempId) : 0,
      fashionHeadTempId: isSet(object.fashionHeadTempId) ? globalThis.Number(object.fashionHeadTempId) : 0,
    };
  },

  toJSON(message: AvaterMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.armTempId !== 0) {
      obj.armTempId = Math.round(message.armTempId);
    }
    if (message.clothTempId !== 0) {
      obj.clothTempId = Math.round(message.clothTempId);
    }
    if (message.fashionArmTempId !== 0) {
      obj.fashionArmTempId = Math.round(message.fashionArmTempId);
    }
    if (message.fashionClothTempId !== 0) {
      obj.fashionClothTempId = Math.round(message.fashionClothTempId);
    }
    if (message.fashionWingTempId !== 0) {
      obj.fashionWingTempId = Math.round(message.fashionWingTempId);
    }
    if (message.fashionHeadTempId !== 0) {
      obj.fashionHeadTempId = Math.round(message.fashionHeadTempId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvaterMsg>, I>>(base?: I): AvaterMsg {
    return AvaterMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvaterMsg>, I>>(object: I): AvaterMsg {
    const message = createBaseAvaterMsg();
    message.userId = object.userId ?? 0;
    message.armTempId = object.armTempId ?? 0;
    message.clothTempId = object.clothTempId ?? 0;
    message.fashionArmTempId = object.fashionArmTempId ?? 0;
    message.fashionClothTempId = object.fashionClothTempId ?? 0;
    message.fashionWingTempId = object.fashionWingTempId ?? 0;
    message.fashionHeadTempId = object.fashionHeadTempId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
