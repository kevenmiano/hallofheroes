// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/FarmPetInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface FarmPetInfoMsg {
  userId: number;
  petId: number;
  pos: number;
  beginTime: string;
  endTime: string;
  petTemplateId: number;
  state: number;
  petName: string;
  quality: number;
}

function createBaseFarmPetInfoMsg(): FarmPetInfoMsg {
  return {
    userId: 0,
    petId: 0,
    pos: 0,
    beginTime: "",
    endTime: "",
    petTemplateId: 0,
    state: 0,
    petName: "",
    quality: 0,
  };
}

export const FarmPetInfoMsg: MessageFns<FarmPetInfoMsg> = {
  encode(message: FarmPetInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.petId !== 0) {
      writer.uint32(16).int32(message.petId);
    }
    if (message.pos !== 0) {
      writer.uint32(24).int32(message.pos);
    }
    if (message.beginTime !== "") {
      writer.uint32(34).string(message.beginTime);
    }
    if (message.endTime !== "") {
      writer.uint32(42).string(message.endTime);
    }
    if (message.petTemplateId !== 0) {
      writer.uint32(48).int32(message.petTemplateId);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.petName !== "") {
      writer.uint32(66).string(message.petName);
    }
    if (message.quality !== 0) {
      writer.uint32(72).int32(message.quality);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FarmPetInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFarmPetInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.petId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.beginTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.petTemplateId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FarmPetInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      petId: isSet(object.petId) ? globalThis.Number(object.petId) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      beginTime: isSet(object.beginTime) ? globalThis.String(object.beginTime) : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      petTemplateId: isSet(object.petTemplateId) ? globalThis.Number(object.petTemplateId) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
    };
  },

  toJSON(message: FarmPetInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.petId !== 0) {
      obj.petId = Math.round(message.petId);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.beginTime !== "") {
      obj.beginTime = message.beginTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.petTemplateId !== 0) {
      obj.petTemplateId = Math.round(message.petTemplateId);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FarmPetInfoMsg>, I>>(base?: I): FarmPetInfoMsg {
    return FarmPetInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FarmPetInfoMsg>, I>>(object: I): FarmPetInfoMsg {
    const message = createBaseFarmPetInfoMsg();
    message.userId = object.userId ?? 0;
    message.petId = object.petId ?? 0;
    message.pos = object.pos ?? 0;
    message.beginTime = object.beginTime ?? "";
    message.endTime = object.endTime ?? "";
    message.petTemplateId = object.petTemplateId ?? 0;
    message.state = object.state ?? 0;
    message.petName = object.petName ?? "";
    message.quality = object.quality ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
