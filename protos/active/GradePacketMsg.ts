// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/GradePacketMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface GradePacketMsg {
  grade: number;
  packet: string;
  preferPacket: string;
  price: number;
  discount: number;
  id: number;
}

function createBaseGradePacketMsg(): GradePacketMsg {
  return { grade: 0, packet: "", preferPacket: "", price: 0, discount: 0, id: 0 };
}

export const GradePacketMsg: MessageFns<GradePacketMsg> = {
  encode(message: GradePacketMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grade !== 0) {
      writer.uint32(8).int32(message.grade);
    }
    if (message.packet !== "") {
      writer.uint32(18).string(message.packet);
    }
    if (message.preferPacket !== "") {
      writer.uint32(26).string(message.preferPacket);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    if (message.discount !== 0) {
      writer.uint32(40).int32(message.discount);
    }
    if (message.id !== 0) {
      writer.uint32(48).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GradePacketMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGradePacketMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.packet = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.preferPacket = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.discount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GradePacketMsg {
    return {
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      packet: isSet(object.packet) ? globalThis.String(object.packet) : "",
      preferPacket: isSet(object.preferPacket) ? globalThis.String(object.preferPacket) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
    };
  },

  toJSON(message: GradePacketMsg): unknown {
    const obj: any = {};
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.packet !== "") {
      obj.packet = message.packet;
    }
    if (message.preferPacket !== "") {
      obj.preferPacket = message.preferPacket;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.discount !== 0) {
      obj.discount = Math.round(message.discount);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GradePacketMsg>, I>>(base?: I): GradePacketMsg {
    return GradePacketMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GradePacketMsg>, I>>(object: I): GradePacketMsg {
    const message = createBaseGradePacketMsg();
    message.grade = object.grade ?? 0;
    message.packet = object.packet ?? "";
    message.preferPacket = object.preferPacket ?? "";
    message.price = object.price ?? 0;
    message.discount = object.discount ?? 0;
    message.id = object.id ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
