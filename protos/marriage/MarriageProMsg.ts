// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/MarriageProMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface MarriageProMsg {
  userIdA: number;
  nickNameA: string;
  jobA: number;
  userIdB: number;
  nickNameB: string;
  jobB: number;
  time: string;
  valid: boolean;
  ringTemplateId: number;
  userAGrade: number;
  userAConsortia: string;
  msg: string;
  headId: number;
  isAgree: number;
}

function createBaseMarriageProMsg(): MarriageProMsg {
  return {
    userIdA: 0,
    nickNameA: "",
    jobA: 0,
    userIdB: 0,
    nickNameB: "",
    jobB: 0,
    time: "",
    valid: false,
    ringTemplateId: 0,
    userAGrade: 0,
    userAConsortia: "",
    msg: "",
    headId: 0,
    isAgree: 0,
  };
}

export const MarriageProMsg: MessageFns<MarriageProMsg> = {
  encode(message: MarriageProMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userIdA !== 0) {
      writer.uint32(8).int32(message.userIdA);
    }
    if (message.nickNameA !== "") {
      writer.uint32(18).string(message.nickNameA);
    }
    if (message.jobA !== 0) {
      writer.uint32(24).int32(message.jobA);
    }
    if (message.userIdB !== 0) {
      writer.uint32(32).int32(message.userIdB);
    }
    if (message.nickNameB !== "") {
      writer.uint32(42).string(message.nickNameB);
    }
    if (message.jobB !== 0) {
      writer.uint32(48).int32(message.jobB);
    }
    if (message.time !== "") {
      writer.uint32(58).string(message.time);
    }
    if (message.valid !== false) {
      writer.uint32(64).bool(message.valid);
    }
    if (message.ringTemplateId !== 0) {
      writer.uint32(72).int32(message.ringTemplateId);
    }
    if (message.userAGrade !== 0) {
      writer.uint32(80).int32(message.userAGrade);
    }
    if (message.userAConsortia !== "") {
      writer.uint32(90).string(message.userAConsortia);
    }
    if (message.msg !== "") {
      writer.uint32(98).string(message.msg);
    }
    if (message.headId !== 0) {
      writer.uint32(104).int32(message.headId);
    }
    if (message.isAgree !== 0) {
      writer.uint32(112).int32(message.isAgree);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarriageProMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarriageProMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userIdA = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickNameA = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.jobA = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userIdB = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nickNameB = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.jobB = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.time = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.ringTemplateId = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.userAGrade = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.userAConsortia = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.isAgree = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarriageProMsg {
    return {
      userIdA: isSet(object.userIdA) ? globalThis.Number(object.userIdA) : 0,
      nickNameA: isSet(object.nickNameA) ? globalThis.String(object.nickNameA) : "",
      jobA: isSet(object.jobA) ? globalThis.Number(object.jobA) : 0,
      userIdB: isSet(object.userIdB) ? globalThis.Number(object.userIdB) : 0,
      nickNameB: isSet(object.nickNameB) ? globalThis.String(object.nickNameB) : "",
      jobB: isSet(object.jobB) ? globalThis.Number(object.jobB) : 0,
      time: isSet(object.time) ? globalThis.String(object.time) : "",
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      ringTemplateId: isSet(object.ringTemplateId) ? globalThis.Number(object.ringTemplateId) : 0,
      userAGrade: isSet(object.userAGrade) ? globalThis.Number(object.userAGrade) : 0,
      userAConsortia: isSet(object.userAConsortia) ? globalThis.String(object.userAConsortia) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      isAgree: isSet(object.isAgree) ? globalThis.Number(object.isAgree) : 0,
    };
  },

  toJSON(message: MarriageProMsg): unknown {
    const obj: any = {};
    if (message.userIdA !== 0) {
      obj.userIdA = Math.round(message.userIdA);
    }
    if (message.nickNameA !== "") {
      obj.nickNameA = message.nickNameA;
    }
    if (message.jobA !== 0) {
      obj.jobA = Math.round(message.jobA);
    }
    if (message.userIdB !== 0) {
      obj.userIdB = Math.round(message.userIdB);
    }
    if (message.nickNameB !== "") {
      obj.nickNameB = message.nickNameB;
    }
    if (message.jobB !== 0) {
      obj.jobB = Math.round(message.jobB);
    }
    if (message.time !== "") {
      obj.time = message.time;
    }
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.ringTemplateId !== 0) {
      obj.ringTemplateId = Math.round(message.ringTemplateId);
    }
    if (message.userAGrade !== 0) {
      obj.userAGrade = Math.round(message.userAGrade);
    }
    if (message.userAConsortia !== "") {
      obj.userAConsortia = message.userAConsortia;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.isAgree !== 0) {
      obj.isAgree = Math.round(message.isAgree);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarriageProMsg>, I>>(base?: I): MarriageProMsg {
    return MarriageProMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarriageProMsg>, I>>(object: I): MarriageProMsg {
    const message = createBaseMarriageProMsg();
    message.userIdA = object.userIdA ?? 0;
    message.nickNameA = object.nickNameA ?? "";
    message.jobA = object.jobA ?? 0;
    message.userIdB = object.userIdB ?? 0;
    message.nickNameB = object.nickNameB ?? "";
    message.jobB = object.jobB ?? 0;
    message.time = object.time ?? "";
    message.valid = object.valid ?? false;
    message.ringTemplateId = object.ringTemplateId ?? 0;
    message.userAGrade = object.userAGrade ?? 0;
    message.userAConsortia = object.userAConsortia ?? "";
    message.msg = object.msg ?? "";
    message.headId = object.headId ?? 0;
    message.isAgree = object.isAgree ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
