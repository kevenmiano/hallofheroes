// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/HeartMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface HeartMsg {
  order: number;
  templateId: number;
  options: number[];
  result: number;
  optionA: number;
  optionB: number;
  remainTime: number;
  random: number;
}

function createBaseHeartMsg(): HeartMsg {
  return { order: 0, templateId: 0, options: [], result: 0, optionA: 0, optionB: 0, remainTime: 0, random: 0 };
}

export const HeartMsg: MessageFns<HeartMsg> = {
  encode(message: HeartMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== 0) {
      writer.uint32(8).int32(message.order);
    }
    if (message.templateId !== 0) {
      writer.uint32(16).int32(message.templateId);
    }
    writer.uint32(26).fork();
    for (const v of message.options) {
      writer.int32(v);
    }
    writer.join();
    if (message.result !== 0) {
      writer.uint32(32).int32(message.result);
    }
    if (message.optionA !== 0) {
      writer.uint32(40).int32(message.optionA);
    }
    if (message.optionB !== 0) {
      writer.uint32(48).int32(message.optionB);
    }
    if (message.remainTime !== 0) {
      writer.uint32(56).int32(message.remainTime);
    }
    if (message.random !== 0) {
      writer.uint32(64).int32(message.random);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.options.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.options.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.optionA = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.optionB = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.remainTime = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.random = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartMsg {
    return {
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => globalThis.Number(e)) : [],
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      optionA: isSet(object.optionA) ? globalThis.Number(object.optionA) : 0,
      optionB: isSet(object.optionB) ? globalThis.Number(object.optionB) : 0,
      remainTime: isSet(object.remainTime) ? globalThis.Number(object.remainTime) : 0,
      random: isSet(object.random) ? globalThis.Number(object.random) : 0,
    };
  },

  toJSON(message: HeartMsg): unknown {
    const obj: any = {};
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => Math.round(e));
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.optionA !== 0) {
      obj.optionA = Math.round(message.optionA);
    }
    if (message.optionB !== 0) {
      obj.optionB = Math.round(message.optionB);
    }
    if (message.remainTime !== 0) {
      obj.remainTime = Math.round(message.remainTime);
    }
    if (message.random !== 0) {
      obj.random = Math.round(message.random);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartMsg>, I>>(base?: I): HeartMsg {
    return HeartMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartMsg>, I>>(object: I): HeartMsg {
    const message = createBaseHeartMsg();
    message.order = object.order ?? 0;
    message.templateId = object.templateId ?? 0;
    message.options = object.options?.map((e) => e) || [];
    message.result = object.result ?? 0;
    message.optionA = object.optionA ?? 0;
    message.optionB = object.optionB ?? 0;
    message.remainTime = object.remainTime ?? 0;
    message.random = object.random ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
