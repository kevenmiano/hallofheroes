// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: fate/FateInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.fate";

export interface FateInfoMsg {
  templateId: number;
  fateTypes: number;
  totalGp: number;
  grades: number;
  property1: string;
  property2: string;
  turnCount: number;
}

function createBaseFateInfoMsg(): FateInfoMsg {
  return { templateId: 0, fateTypes: 0, totalGp: 0, grades: 0, property1: "", property2: "", turnCount: 0 };
}

export const FateInfoMsg: MessageFns<FateInfoMsg> = {
  encode(message: FateInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.templateId !== 0) {
      writer.uint32(8).int32(message.templateId);
    }
    if (message.fateTypes !== 0) {
      writer.uint32(16).int32(message.fateTypes);
    }
    if (message.totalGp !== 0) {
      writer.uint32(24).int32(message.totalGp);
    }
    if (message.grades !== 0) {
      writer.uint32(32).int32(message.grades);
    }
    if (message.property1 !== "") {
      writer.uint32(42).string(message.property1);
    }
    if (message.property2 !== "") {
      writer.uint32(50).string(message.property2);
    }
    if (message.turnCount !== 0) {
      writer.uint32(56).int32(message.turnCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FateInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFateInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fateTypes = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalGp = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.property1 = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.property2 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.turnCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FateInfoMsg {
    return {
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      fateTypes: isSet(object.fateTypes) ? globalThis.Number(object.fateTypes) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.Number(object.totalGp) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      property1: isSet(object.property1) ? globalThis.String(object.property1) : "",
      property2: isSet(object.property2) ? globalThis.String(object.property2) : "",
      turnCount: isSet(object.turnCount) ? globalThis.Number(object.turnCount) : 0,
    };
  },

  toJSON(message: FateInfoMsg): unknown {
    const obj: any = {};
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.fateTypes !== 0) {
      obj.fateTypes = Math.round(message.fateTypes);
    }
    if (message.totalGp !== 0) {
      obj.totalGp = Math.round(message.totalGp);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.property1 !== "") {
      obj.property1 = message.property1;
    }
    if (message.property2 !== "") {
      obj.property2 = message.property2;
    }
    if (message.turnCount !== 0) {
      obj.turnCount = Math.round(message.turnCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FateInfoMsg>, I>>(base?: I): FateInfoMsg {
    return FateInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FateInfoMsg>, I>>(object: I): FateInfoMsg {
    const message = createBaseFateInfoMsg();
    message.templateId = object.templateId ?? 0;
    message.fateTypes = object.fateTypes ?? 0;
    message.totalGp = object.totalGp ?? 0;
    message.grades = object.grades ?? 0;
    message.property1 = object.property1 ?? "";
    message.property2 = object.property2 ?? "";
    message.turnCount = object.turnCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
