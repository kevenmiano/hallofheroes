// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/DamageMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface DamageMsg {
  livingId: number;
  damageType: number;
  hasIcon: boolean;
  isHarmful: boolean;
  damageValue: number;
  leftValue: number;
  extraData: number;
  parry: boolean;
  dropInfos: number[];
  order: number;
  hpLimit: number;
  resistValue: number;
  resistType: number;
  resistPercent: number;
  hp2: number;
  hp3: number;
}

function createBaseDamageMsg(): DamageMsg {
  return {
    livingId: 0,
    damageType: 0,
    hasIcon: false,
    isHarmful: false,
    damageValue: 0,
    leftValue: 0,
    extraData: 0,
    parry: false,
    dropInfos: [],
    order: 0,
    hpLimit: 0,
    resistValue: 0,
    resistType: 0,
    resistPercent: 0,
    hp2: 0,
    hp3: 0,
  };
}

export const DamageMsg: MessageFns<DamageMsg> = {
  encode(message: DamageMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.livingId !== 0) {
      writer.uint32(8).int32(message.livingId);
    }
    if (message.damageType !== 0) {
      writer.uint32(16).int32(message.damageType);
    }
    if (message.hasIcon !== false) {
      writer.uint32(24).bool(message.hasIcon);
    }
    if (message.isHarmful !== false) {
      writer.uint32(32).bool(message.isHarmful);
    }
    if (message.damageValue !== 0) {
      writer.uint32(40).int32(message.damageValue);
    }
    if (message.leftValue !== 0) {
      writer.uint32(48).int32(message.leftValue);
    }
    if (message.extraData !== 0) {
      writer.uint32(56).int32(message.extraData);
    }
    if (message.parry !== false) {
      writer.uint32(64).bool(message.parry);
    }
    writer.uint32(74).fork();
    for (const v of message.dropInfos) {
      writer.int32(v);
    }
    writer.join();
    if (message.order !== 0) {
      writer.uint32(80).int32(message.order);
    }
    if (message.hpLimit !== 0) {
      writer.uint32(88).int32(message.hpLimit);
    }
    if (message.resistValue !== 0) {
      writer.uint32(96).int32(message.resistValue);
    }
    if (message.resistType !== 0) {
      writer.uint32(104).int32(message.resistType);
    }
    if (message.resistPercent !== 0) {
      writer.uint32(112).int32(message.resistPercent);
    }
    if (message.hp2 !== 0) {
      writer.uint32(120).int32(message.hp2);
    }
    if (message.hp3 !== 0) {
      writer.uint32(128).int32(message.hp3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DamageMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDamageMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.livingId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.damageType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasIcon = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isHarmful = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.damageValue = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftValue = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.extraData = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.parry = reader.bool();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.dropInfos.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dropInfos.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.hpLimit = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.resistValue = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.resistType = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.resistPercent = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.hp2 = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.hp3 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DamageMsg {
    return {
      livingId: isSet(object.livingId) ? globalThis.Number(object.livingId) : 0,
      damageType: isSet(object.damageType) ? globalThis.Number(object.damageType) : 0,
      hasIcon: isSet(object.hasIcon) ? globalThis.Boolean(object.hasIcon) : false,
      isHarmful: isSet(object.isHarmful) ? globalThis.Boolean(object.isHarmful) : false,
      damageValue: isSet(object.damageValue) ? globalThis.Number(object.damageValue) : 0,
      leftValue: isSet(object.leftValue) ? globalThis.Number(object.leftValue) : 0,
      extraData: isSet(object.extraData) ? globalThis.Number(object.extraData) : 0,
      parry: isSet(object.parry) ? globalThis.Boolean(object.parry) : false,
      dropInfos: globalThis.Array.isArray(object?.dropInfos)
        ? object.dropInfos.map((e: any) => globalThis.Number(e))
        : [],
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      hpLimit: isSet(object.hpLimit) ? globalThis.Number(object.hpLimit) : 0,
      resistValue: isSet(object.resistValue) ? globalThis.Number(object.resistValue) : 0,
      resistType: isSet(object.resistType) ? globalThis.Number(object.resistType) : 0,
      resistPercent: isSet(object.resistPercent) ? globalThis.Number(object.resistPercent) : 0,
      hp2: isSet(object.hp2) ? globalThis.Number(object.hp2) : 0,
      hp3: isSet(object.hp3) ? globalThis.Number(object.hp3) : 0,
    };
  },

  toJSON(message: DamageMsg): unknown {
    const obj: any = {};
    if (message.livingId !== 0) {
      obj.livingId = Math.round(message.livingId);
    }
    if (message.damageType !== 0) {
      obj.damageType = Math.round(message.damageType);
    }
    if (message.hasIcon !== false) {
      obj.hasIcon = message.hasIcon;
    }
    if (message.isHarmful !== false) {
      obj.isHarmful = message.isHarmful;
    }
    if (message.damageValue !== 0) {
      obj.damageValue = Math.round(message.damageValue);
    }
    if (message.leftValue !== 0) {
      obj.leftValue = Math.round(message.leftValue);
    }
    if (message.extraData !== 0) {
      obj.extraData = Math.round(message.extraData);
    }
    if (message.parry !== false) {
      obj.parry = message.parry;
    }
    if (message.dropInfos?.length) {
      obj.dropInfos = message.dropInfos.map((e) => Math.round(e));
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.hpLimit !== 0) {
      obj.hpLimit = Math.round(message.hpLimit);
    }
    if (message.resistValue !== 0) {
      obj.resistValue = Math.round(message.resistValue);
    }
    if (message.resistType !== 0) {
      obj.resistType = Math.round(message.resistType);
    }
    if (message.resistPercent !== 0) {
      obj.resistPercent = Math.round(message.resistPercent);
    }
    if (message.hp2 !== 0) {
      obj.hp2 = Math.round(message.hp2);
    }
    if (message.hp3 !== 0) {
      obj.hp3 = Math.round(message.hp3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DamageMsg>, I>>(base?: I): DamageMsg {
    return DamageMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DamageMsg>, I>>(object: I): DamageMsg {
    const message = createBaseDamageMsg();
    message.livingId = object.livingId ?? 0;
    message.damageType = object.damageType ?? 0;
    message.hasIcon = object.hasIcon ?? false;
    message.isHarmful = object.isHarmful ?? false;
    message.damageValue = object.damageValue ?? 0;
    message.leftValue = object.leftValue ?? 0;
    message.extraData = object.extraData ?? 0;
    message.parry = object.parry ?? false;
    message.dropInfos = object.dropInfos?.map((e) => e) || [];
    message.order = object.order ?? 0;
    message.hpLimit = object.hpLimit ?? 0;
    message.resistValue = object.resistValue ?? 0;
    message.resistType = object.resistType ?? 0;
    message.resistPercent = object.resistPercent ?? 0;
    message.hp2 = object.hp2 ?? 0;
    message.hp3 = object.hp3 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
