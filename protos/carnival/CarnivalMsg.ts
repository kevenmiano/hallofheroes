// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: carnival/CarnivalMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.carnival";

export interface CarnivalMsg {
  opType: number;
  score: number;
  scoreRewardInfo: string;
  totalCharge: number;
  lotteryCount: number;
  dayCharge: number;
  giftBuyInfo: string;
  dayOnline: number;
  onlineDate: string;
  onlineRewardInfo: string;
  luckCount: number;
  luckNum: number;
  gameInfo: string;
  result: string;
  snowRewardCount: number;
}

function createBaseCarnivalMsg(): CarnivalMsg {
  return {
    opType: 0,
    score: 0,
    scoreRewardInfo: "",
    totalCharge: 0,
    lotteryCount: 0,
    dayCharge: 0,
    giftBuyInfo: "",
    dayOnline: 0,
    onlineDate: "",
    onlineRewardInfo: "",
    luckCount: 0,
    luckNum: 0,
    gameInfo: "",
    result: "",
    snowRewardCount: 0,
  };
}

export const CarnivalMsg: MessageFns<CarnivalMsg> = {
  encode(message: CarnivalMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opType !== 0) {
      writer.uint32(8).int32(message.opType);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    if (message.scoreRewardInfo !== "") {
      writer.uint32(26).string(message.scoreRewardInfo);
    }
    if (message.totalCharge !== 0) {
      writer.uint32(32).int32(message.totalCharge);
    }
    if (message.lotteryCount !== 0) {
      writer.uint32(40).int32(message.lotteryCount);
    }
    if (message.dayCharge !== 0) {
      writer.uint32(48).int32(message.dayCharge);
    }
    if (message.giftBuyInfo !== "") {
      writer.uint32(58).string(message.giftBuyInfo);
    }
    if (message.dayOnline !== 0) {
      writer.uint32(64).int32(message.dayOnline);
    }
    if (message.onlineDate !== "") {
      writer.uint32(74).string(message.onlineDate);
    }
    if (message.onlineRewardInfo !== "") {
      writer.uint32(82).string(message.onlineRewardInfo);
    }
    if (message.luckCount !== 0) {
      writer.uint32(88).int32(message.luckCount);
    }
    if (message.luckNum !== 0) {
      writer.uint32(96).int32(message.luckNum);
    }
    if (message.gameInfo !== "") {
      writer.uint32(106).string(message.gameInfo);
    }
    if (message.result !== "") {
      writer.uint32(114).string(message.result);
    }
    if (message.snowRewardCount !== 0) {
      writer.uint32(120).int32(message.snowRewardCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CarnivalMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCarnivalMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.scoreRewardInfo = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalCharge = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lotteryCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.dayCharge = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.giftBuyInfo = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.dayOnline = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.onlineDate = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.onlineRewardInfo = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.luckCount = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.luckNum = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.gameInfo = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.result = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.snowRewardCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CarnivalMsg {
    return {
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      scoreRewardInfo: isSet(object.scoreRewardInfo) ? globalThis.String(object.scoreRewardInfo) : "",
      totalCharge: isSet(object.totalCharge) ? globalThis.Number(object.totalCharge) : 0,
      lotteryCount: isSet(object.lotteryCount) ? globalThis.Number(object.lotteryCount) : 0,
      dayCharge: isSet(object.dayCharge) ? globalThis.Number(object.dayCharge) : 0,
      giftBuyInfo: isSet(object.giftBuyInfo) ? globalThis.String(object.giftBuyInfo) : "",
      dayOnline: isSet(object.dayOnline) ? globalThis.Number(object.dayOnline) : 0,
      onlineDate: isSet(object.onlineDate) ? globalThis.String(object.onlineDate) : "",
      onlineRewardInfo: isSet(object.onlineRewardInfo) ? globalThis.String(object.onlineRewardInfo) : "",
      luckCount: isSet(object.luckCount) ? globalThis.Number(object.luckCount) : 0,
      luckNum: isSet(object.luckNum) ? globalThis.Number(object.luckNum) : 0,
      gameInfo: isSet(object.gameInfo) ? globalThis.String(object.gameInfo) : "",
      result: isSet(object.result) ? globalThis.String(object.result) : "",
      snowRewardCount: isSet(object.snowRewardCount) ? globalThis.Number(object.snowRewardCount) : 0,
    };
  },

  toJSON(message: CarnivalMsg): unknown {
    const obj: any = {};
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.scoreRewardInfo !== "") {
      obj.scoreRewardInfo = message.scoreRewardInfo;
    }
    if (message.totalCharge !== 0) {
      obj.totalCharge = Math.round(message.totalCharge);
    }
    if (message.lotteryCount !== 0) {
      obj.lotteryCount = Math.round(message.lotteryCount);
    }
    if (message.dayCharge !== 0) {
      obj.dayCharge = Math.round(message.dayCharge);
    }
    if (message.giftBuyInfo !== "") {
      obj.giftBuyInfo = message.giftBuyInfo;
    }
    if (message.dayOnline !== 0) {
      obj.dayOnline = Math.round(message.dayOnline);
    }
    if (message.onlineDate !== "") {
      obj.onlineDate = message.onlineDate;
    }
    if (message.onlineRewardInfo !== "") {
      obj.onlineRewardInfo = message.onlineRewardInfo;
    }
    if (message.luckCount !== 0) {
      obj.luckCount = Math.round(message.luckCount);
    }
    if (message.luckNum !== 0) {
      obj.luckNum = Math.round(message.luckNum);
    }
    if (message.gameInfo !== "") {
      obj.gameInfo = message.gameInfo;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    if (message.snowRewardCount !== 0) {
      obj.snowRewardCount = Math.round(message.snowRewardCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CarnivalMsg>, I>>(base?: I): CarnivalMsg {
    return CarnivalMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CarnivalMsg>, I>>(object: I): CarnivalMsg {
    const message = createBaseCarnivalMsg();
    message.opType = object.opType ?? 0;
    message.score = object.score ?? 0;
    message.scoreRewardInfo = object.scoreRewardInfo ?? "";
    message.totalCharge = object.totalCharge ?? 0;
    message.lotteryCount = object.lotteryCount ?? 0;
    message.dayCharge = object.dayCharge ?? 0;
    message.giftBuyInfo = object.giftBuyInfo ?? "";
    message.dayOnline = object.dayOnline ?? 0;
    message.onlineDate = object.onlineDate ?? "";
    message.onlineRewardInfo = object.onlineRewardInfo ?? "";
    message.luckCount = object.luckCount ?? 0;
    message.luckNum = object.luckNum ?? 0;
    message.gameInfo = object.gameInfo ?? "";
    message.result = object.result ?? "";
    message.snowRewardCount = object.snowRewardCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
