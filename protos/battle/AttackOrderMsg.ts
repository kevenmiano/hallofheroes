// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/AttackOrderMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface AttackOrderMsg {
  battleId: string;
  frame: number;
  orderId: number;
  isPassive: boolean;
  livingId: number;
  sp: number;
  spAdded: number;
  damages: number[];
  execFrame: number;
  frameNum: number;
  attackMillis: string;
  buffers: number[];
  awakenSoldiers: number[];
  attackOrderSeq: number;
  cdTime: number;
  awake: number;
  awakeAdd: number;
  waitRevives: number[];
}

function createBaseAttackOrderMsg(): AttackOrderMsg {
  return {
    battleId: "",
    frame: 0,
    orderId: 0,
    isPassive: false,
    livingId: 0,
    sp: 0,
    spAdded: 0,
    damages: [],
    execFrame: 0,
    frameNum: 0,
    attackMillis: "",
    buffers: [],
    awakenSoldiers: [],
    attackOrderSeq: 0,
    cdTime: 0,
    awake: 0,
    awakeAdd: 0,
    waitRevives: [],
  };
}

export const AttackOrderMsg: MessageFns<AttackOrderMsg> = {
  encode(message: AttackOrderMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.battleId !== "") {
      writer.uint32(10).string(message.battleId);
    }
    if (message.frame !== 0) {
      writer.uint32(16).int32(message.frame);
    }
    if (message.orderId !== 0) {
      writer.uint32(24).int32(message.orderId);
    }
    if (message.isPassive !== false) {
      writer.uint32(32).bool(message.isPassive);
    }
    if (message.livingId !== 0) {
      writer.uint32(40).int32(message.livingId);
    }
    if (message.sp !== 0) {
      writer.uint32(48).int32(message.sp);
    }
    if (message.spAdded !== 0) {
      writer.uint32(56).int32(message.spAdded);
    }
    writer.uint32(66).fork();
    for (const v of message.damages) {
      writer.int32(v);
    }
    writer.join();
    if (message.execFrame !== 0) {
      writer.uint32(72).int32(message.execFrame);
    }
    if (message.frameNum !== 0) {
      writer.uint32(80).int32(message.frameNum);
    }
    if (message.attackMillis !== "") {
      writer.uint32(90).string(message.attackMillis);
    }
    writer.uint32(98).fork();
    for (const v of message.buffers) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(106).fork();
    for (const v of message.awakenSoldiers) {
      writer.int32(v);
    }
    writer.join();
    if (message.attackOrderSeq !== 0) {
      writer.uint32(112).int32(message.attackOrderSeq);
    }
    if (message.cdTime !== 0) {
      writer.uint32(120).int32(message.cdTime);
    }
    if (message.awake !== 0) {
      writer.uint32(128).int32(message.awake);
    }
    if (message.awakeAdd !== 0) {
      writer.uint32(136).int32(message.awakeAdd);
    }
    writer.uint32(146).fork();
    for (const v of message.waitRevives) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackOrderMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackOrderMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.battleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.frame = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.orderId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isPassive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.livingId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sp = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.spAdded = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.damages.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.damages.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.execFrame = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.frameNum = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.attackMillis = reader.string();
          continue;
        }
        case 12: {
          if (tag === 96) {
            message.buffers.push(reader.int32());

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.buffers.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 13: {
          if (tag === 104) {
            message.awakenSoldiers.push(reader.int32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.awakenSoldiers.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.attackOrderSeq = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.cdTime = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.awake = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.awakeAdd = reader.int32();
          continue;
        }
        case 18: {
          if (tag === 144) {
            message.waitRevives.push(reader.int32());

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.waitRevives.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackOrderMsg {
    return {
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "",
      frame: isSet(object.frame) ? globalThis.Number(object.frame) : 0,
      orderId: isSet(object.orderId) ? globalThis.Number(object.orderId) : 0,
      isPassive: isSet(object.isPassive) ? globalThis.Boolean(object.isPassive) : false,
      livingId: isSet(object.livingId) ? globalThis.Number(object.livingId) : 0,
      sp: isSet(object.sp) ? globalThis.Number(object.sp) : 0,
      spAdded: isSet(object.spAdded) ? globalThis.Number(object.spAdded) : 0,
      damages: globalThis.Array.isArray(object?.damages) ? object.damages.map((e: any) => globalThis.Number(e)) : [],
      execFrame: isSet(object.execFrame) ? globalThis.Number(object.execFrame) : 0,
      frameNum: isSet(object.frameNum) ? globalThis.Number(object.frameNum) : 0,
      attackMillis: isSet(object.attackMillis) ? globalThis.String(object.attackMillis) : "",
      buffers: globalThis.Array.isArray(object?.buffers) ? object.buffers.map((e: any) => globalThis.Number(e)) : [],
      awakenSoldiers: globalThis.Array.isArray(object?.awakenSoldiers)
        ? object.awakenSoldiers.map((e: any) => globalThis.Number(e))
        : [],
      attackOrderSeq: isSet(object.attackOrderSeq) ? globalThis.Number(object.attackOrderSeq) : 0,
      cdTime: isSet(object.cdTime) ? globalThis.Number(object.cdTime) : 0,
      awake: isSet(object.awake) ? globalThis.Number(object.awake) : 0,
      awakeAdd: isSet(object.awakeAdd) ? globalThis.Number(object.awakeAdd) : 0,
      waitRevives: globalThis.Array.isArray(object?.waitRevives)
        ? object.waitRevives.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: AttackOrderMsg): unknown {
    const obj: any = {};
    if (message.battleId !== "") {
      obj.battleId = message.battleId;
    }
    if (message.frame !== 0) {
      obj.frame = Math.round(message.frame);
    }
    if (message.orderId !== 0) {
      obj.orderId = Math.round(message.orderId);
    }
    if (message.isPassive !== false) {
      obj.isPassive = message.isPassive;
    }
    if (message.livingId !== 0) {
      obj.livingId = Math.round(message.livingId);
    }
    if (message.sp !== 0) {
      obj.sp = Math.round(message.sp);
    }
    if (message.spAdded !== 0) {
      obj.spAdded = Math.round(message.spAdded);
    }
    if (message.damages?.length) {
      obj.damages = message.damages.map((e) => Math.round(e));
    }
    if (message.execFrame !== 0) {
      obj.execFrame = Math.round(message.execFrame);
    }
    if (message.frameNum !== 0) {
      obj.frameNum = Math.round(message.frameNum);
    }
    if (message.attackMillis !== "") {
      obj.attackMillis = message.attackMillis;
    }
    if (message.buffers?.length) {
      obj.buffers = message.buffers.map((e) => Math.round(e));
    }
    if (message.awakenSoldiers?.length) {
      obj.awakenSoldiers = message.awakenSoldiers.map((e) => Math.round(e));
    }
    if (message.attackOrderSeq !== 0) {
      obj.attackOrderSeq = Math.round(message.attackOrderSeq);
    }
    if (message.cdTime !== 0) {
      obj.cdTime = Math.round(message.cdTime);
    }
    if (message.awake !== 0) {
      obj.awake = Math.round(message.awake);
    }
    if (message.awakeAdd !== 0) {
      obj.awakeAdd = Math.round(message.awakeAdd);
    }
    if (message.waitRevives?.length) {
      obj.waitRevives = message.waitRevives.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttackOrderMsg>, I>>(base?: I): AttackOrderMsg {
    return AttackOrderMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttackOrderMsg>, I>>(object: I): AttackOrderMsg {
    const message = createBaseAttackOrderMsg();
    message.battleId = object.battleId ?? "";
    message.frame = object.frame ?? 0;
    message.orderId = object.orderId ?? 0;
    message.isPassive = object.isPassive ?? false;
    message.livingId = object.livingId ?? 0;
    message.sp = object.sp ?? 0;
    message.spAdded = object.spAdded ?? 0;
    message.damages = object.damages?.map((e) => e) || [];
    message.execFrame = object.execFrame ?? 0;
    message.frameNum = object.frameNum ?? 0;
    message.attackMillis = object.attackMillis ?? "";
    message.buffers = object.buffers?.map((e) => e) || [];
    message.awakenSoldiers = object.awakenSoldiers?.map((e) => e) || [];
    message.attackOrderSeq = object.attackOrderSeq ?? 0;
    message.cdTime = object.cdTime ?? 0;
    message.awake = object.awake ?? 0;
    message.awakeAdd = object.awakeAdd ?? 0;
    message.waitRevives = object.waitRevives?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
