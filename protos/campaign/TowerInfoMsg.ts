// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/TowerInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface TowerInfoMsg {
  enterCount: number;
  totalGp: number;
  towerIndex: number;
  maxIndex: number;
  order: number;
  maxEnterCount: number;
  itemTempIds: string;
  freeEnterCount: number;
  campaignId: number;
  index: number;
  firstHitId: number;
  firstHitName: string;
  passIndex: number;
  pass: number;
}

function createBaseTowerInfoMsg(): TowerInfoMsg {
  return {
    enterCount: 0,
    totalGp: 0,
    towerIndex: 0,
    maxIndex: 0,
    order: 0,
    maxEnterCount: 0,
    itemTempIds: "",
    freeEnterCount: 0,
    campaignId: 0,
    index: 0,
    firstHitId: 0,
    firstHitName: "",
    passIndex: 0,
    pass: 0,
  };
}

export const TowerInfoMsg: MessageFns<TowerInfoMsg> = {
  encode(message: TowerInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enterCount !== 0) {
      writer.uint32(8).int32(message.enterCount);
    }
    if (message.totalGp !== 0) {
      writer.uint32(16).int32(message.totalGp);
    }
    if (message.towerIndex !== 0) {
      writer.uint32(24).int32(message.towerIndex);
    }
    if (message.maxIndex !== 0) {
      writer.uint32(32).int32(message.maxIndex);
    }
    if (message.order !== 0) {
      writer.uint32(40).int32(message.order);
    }
    if (message.maxEnterCount !== 0) {
      writer.uint32(48).int32(message.maxEnterCount);
    }
    if (message.itemTempIds !== "") {
      writer.uint32(58).string(message.itemTempIds);
    }
    if (message.freeEnterCount !== 0) {
      writer.uint32(64).int32(message.freeEnterCount);
    }
    if (message.campaignId !== 0) {
      writer.uint32(72).int32(message.campaignId);
    }
    if (message.index !== 0) {
      writer.uint32(80).int32(message.index);
    }
    if (message.firstHitId !== 0) {
      writer.uint32(88).int32(message.firstHitId);
    }
    if (message.firstHitName !== "") {
      writer.uint32(98).string(message.firstHitName);
    }
    if (message.passIndex !== 0) {
      writer.uint32(104).int32(message.passIndex);
    }
    if (message.pass !== 0) {
      writer.uint32(112).int32(message.pass);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TowerInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTowerInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enterCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalGp = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.towerIndex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxIndex = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.maxEnterCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.itemTempIds = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.freeEnterCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.firstHitId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.firstHitName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.passIndex = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.pass = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TowerInfoMsg {
    return {
      enterCount: isSet(object.enterCount) ? globalThis.Number(object.enterCount) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.Number(object.totalGp) : 0,
      towerIndex: isSet(object.towerIndex) ? globalThis.Number(object.towerIndex) : 0,
      maxIndex: isSet(object.maxIndex) ? globalThis.Number(object.maxIndex) : 0,
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      maxEnterCount: isSet(object.maxEnterCount) ? globalThis.Number(object.maxEnterCount) : 0,
      itemTempIds: isSet(object.itemTempIds) ? globalThis.String(object.itemTempIds) : "",
      freeEnterCount: isSet(object.freeEnterCount) ? globalThis.Number(object.freeEnterCount) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      firstHitId: isSet(object.firstHitId) ? globalThis.Number(object.firstHitId) : 0,
      firstHitName: isSet(object.firstHitName) ? globalThis.String(object.firstHitName) : "",
      passIndex: isSet(object.passIndex) ? globalThis.Number(object.passIndex) : 0,
      pass: isSet(object.pass) ? globalThis.Number(object.pass) : 0,
    };
  },

  toJSON(message: TowerInfoMsg): unknown {
    const obj: any = {};
    if (message.enterCount !== 0) {
      obj.enterCount = Math.round(message.enterCount);
    }
    if (message.totalGp !== 0) {
      obj.totalGp = Math.round(message.totalGp);
    }
    if (message.towerIndex !== 0) {
      obj.towerIndex = Math.round(message.towerIndex);
    }
    if (message.maxIndex !== 0) {
      obj.maxIndex = Math.round(message.maxIndex);
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.maxEnterCount !== 0) {
      obj.maxEnterCount = Math.round(message.maxEnterCount);
    }
    if (message.itemTempIds !== "") {
      obj.itemTempIds = message.itemTempIds;
    }
    if (message.freeEnterCount !== 0) {
      obj.freeEnterCount = Math.round(message.freeEnterCount);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.firstHitId !== 0) {
      obj.firstHitId = Math.round(message.firstHitId);
    }
    if (message.firstHitName !== "") {
      obj.firstHitName = message.firstHitName;
    }
    if (message.passIndex !== 0) {
      obj.passIndex = Math.round(message.passIndex);
    }
    if (message.pass !== 0) {
      obj.pass = Math.round(message.pass);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TowerInfoMsg>, I>>(base?: I): TowerInfoMsg {
    return TowerInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TowerInfoMsg>, I>>(object: I): TowerInfoMsg {
    const message = createBaseTowerInfoMsg();
    message.enterCount = object.enterCount ?? 0;
    message.totalGp = object.totalGp ?? 0;
    message.towerIndex = object.towerIndex ?? 0;
    message.maxIndex = object.maxIndex ?? 0;
    message.order = object.order ?? 0;
    message.maxEnterCount = object.maxEnterCount ?? 0;
    message.itemTempIds = object.itemTempIds ?? "";
    message.freeEnterCount = object.freeEnterCount ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.index = object.index ?? 0;
    message.firstHitId = object.firstHitId ?? 0;
    message.firstHitName = object.firstHitName ?? "";
    message.passIndex = object.passIndex ?? 0;
    message.pass = object.pass ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
