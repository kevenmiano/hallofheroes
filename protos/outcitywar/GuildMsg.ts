// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: outcitywar/GuildMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.outcitywar";

export interface GuildMsg {
  guildId: number;
  guildName: string;
  guildStatus: number;
  guildScore: number;
  camp: number;
  noticeMsg: string;
  attendNum: number;
}

function createBaseGuildMsg(): GuildMsg {
  return { guildId: 0, guildName: "", guildStatus: 0, guildScore: 0, camp: 0, noticeMsg: "", attendNum: 0 };
}

export const GuildMsg: MessageFns<GuildMsg> = {
  encode(message: GuildMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== 0) {
      writer.uint32(8).int32(message.guildId);
    }
    if (message.guildName !== "") {
      writer.uint32(18).string(message.guildName);
    }
    if (message.guildStatus !== 0) {
      writer.uint32(24).int32(message.guildStatus);
    }
    if (message.guildScore !== 0) {
      writer.uint32(32).int32(message.guildScore);
    }
    if (message.camp !== 0) {
      writer.uint32(40).int32(message.camp);
    }
    if (message.noticeMsg !== "") {
      writer.uint32(50).string(message.noticeMsg);
    }
    if (message.attendNum !== 0) {
      writer.uint32(56).int32(message.attendNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GuildMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuildMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.guildId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guildName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.guildStatus = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.guildScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.camp = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.noticeMsg = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.attendNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GuildMsg {
    return {
      guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
      guildName: isSet(object.guildName) ? globalThis.String(object.guildName) : "",
      guildStatus: isSet(object.guildStatus) ? globalThis.Number(object.guildStatus) : 0,
      guildScore: isSet(object.guildScore) ? globalThis.Number(object.guildScore) : 0,
      camp: isSet(object.camp) ? globalThis.Number(object.camp) : 0,
      noticeMsg: isSet(object.noticeMsg) ? globalThis.String(object.noticeMsg) : "",
      attendNum: isSet(object.attendNum) ? globalThis.Number(object.attendNum) : 0,
    };
  },

  toJSON(message: GuildMsg): unknown {
    const obj: any = {};
    if (message.guildId !== 0) {
      obj.guildId = Math.round(message.guildId);
    }
    if (message.guildName !== "") {
      obj.guildName = message.guildName;
    }
    if (message.guildStatus !== 0) {
      obj.guildStatus = Math.round(message.guildStatus);
    }
    if (message.guildScore !== 0) {
      obj.guildScore = Math.round(message.guildScore);
    }
    if (message.camp !== 0) {
      obj.camp = Math.round(message.camp);
    }
    if (message.noticeMsg !== "") {
      obj.noticeMsg = message.noticeMsg;
    }
    if (message.attendNum !== 0) {
      obj.attendNum = Math.round(message.attendNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GuildMsg>, I>>(base?: I): GuildMsg {
    return GuildMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GuildMsg>, I>>(object: I): GuildMsg {
    const message = createBaseGuildMsg();
    message.guildId = object.guildId ?? 0;
    message.guildName = object.guildName ?? "";
    message.guildStatus = object.guildStatus ?? 0;
    message.guildScore = object.guildScore ?? 0;
    message.camp = object.camp ?? 0;
    message.noticeMsg = object.noticeMsg ?? "";
    message.attendNum = object.attendNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
