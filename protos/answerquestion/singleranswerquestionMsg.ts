// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: answerquestion/singleranswerquestionMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.answerquestion";

export interface singleranswerquestionMsg {
  id: number;
  question: string;
  option1: string;
  option2: string;
  option3: string;
  option4: string;
  answer: number;
}

function createBasesingleranswerquestionMsg(): singleranswerquestionMsg {
  return { id: 0, question: "", option1: "", option2: "", option3: "", option4: "", answer: 0 };
}

export const singleranswerquestionMsg: MessageFns<singleranswerquestionMsg> = {
  encode(message: singleranswerquestionMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.question !== "") {
      writer.uint32(18).string(message.question);
    }
    if (message.option1 !== "") {
      writer.uint32(26).string(message.option1);
    }
    if (message.option2 !== "") {
      writer.uint32(34).string(message.option2);
    }
    if (message.option3 !== "") {
      writer.uint32(42).string(message.option3);
    }
    if (message.option4 !== "") {
      writer.uint32(50).string(message.option4);
    }
    if (message.answer !== 0) {
      writer.uint32(56).int32(message.answer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): singleranswerquestionMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasesingleranswerquestionMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.question = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.option1 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.option2 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.option3 = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.option4 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.answer = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): singleranswerquestionMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      question: isSet(object.question) ? globalThis.String(object.question) : "",
      option1: isSet(object.option1) ? globalThis.String(object.option1) : "",
      option2: isSet(object.option2) ? globalThis.String(object.option2) : "",
      option3: isSet(object.option3) ? globalThis.String(object.option3) : "",
      option4: isSet(object.option4) ? globalThis.String(object.option4) : "",
      answer: isSet(object.answer) ? globalThis.Number(object.answer) : 0,
    };
  },

  toJSON(message: singleranswerquestionMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.question !== "") {
      obj.question = message.question;
    }
    if (message.option1 !== "") {
      obj.option1 = message.option1;
    }
    if (message.option2 !== "") {
      obj.option2 = message.option2;
    }
    if (message.option3 !== "") {
      obj.option3 = message.option3;
    }
    if (message.option4 !== "") {
      obj.option4 = message.option4;
    }
    if (message.answer !== 0) {
      obj.answer = Math.round(message.answer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<singleranswerquestionMsg>, I>>(base?: I): singleranswerquestionMsg {
    return singleranswerquestionMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<singleranswerquestionMsg>, I>>(object: I): singleranswerquestionMsg {
    const message = createBasesingleranswerquestionMsg();
    message.id = object.id ?? 0;
    message.question = object.question ?? "";
    message.option1 = object.option1 ?? "";
    message.option2 = object.option2 ?? "";
    message.option3 = object.option3 ?? "";
    message.option4 = object.option4 ?? "";
    message.answer = object.answer ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
