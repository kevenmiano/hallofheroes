// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: pet/PetInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.pet";

export interface PetInfoMsg {
  petId: number;
  templateId: number;
  petName: string;
  curGp: number;
  curGrade: number;
  power: number;
  intel: number;
  physi: number;
  armor: number;
  remainPoints: number;
  addPowerApti: number;
  addIntelApti: number;
  addPhysiApti: number;
  addArmorApti: number;
  powerApti: number;
  intelApti: number;
  physiApti: number;
  armorApti: number;
  curQualityGp: number;
  growthRate: number;
  maxHp: number;
  fireResi: number;
  waterResi: number;
  electResi: number;
  windResi: number;
  darkResi: number;
  lightResi: number;
  followSkills: string;
  changeSkills: string;
  isFight: boolean;
  isPractice: boolean;
  isBind: boolean;
  totalGp: string;
  fightingCapacity: number;
  isDel: boolean;
  quality: number;
  isGuard: boolean;
  chaSkillIndexs: string;
  fastKey: string;
  initQuality: number;
  isLocked: boolean;
  bagAttack: number;
  bagDefence: number;
  bagMagicattack: number;
  bagMagicdefence: number;
  bagLiving: number;
  remotePetSkillIndexs: string;
  remoteHp: number;
  isRemote: boolean;
  remoteDie: boolean;
  skillIndex: number;
  isActiveSecond: boolean;
  totalQualityGp: number;
  atkpotential: number;
  matpotential: number;
  defpotential: number;
  mdfpotential: number;
  hppotential: number;
  atkpotentialAtr: number;
  matpotentialAtr: number;
  defpotentialAtr: number;
  mdfpotentialAtr: number;
  hppotentialAtr: number;
  atkbeneAtr: number;
  matbeneAtr: number;
  defbeneAtr: number;
  mdfbeneAtr: number;
  hpbeneAtr: number;
}

function createBasePetInfoMsg(): PetInfoMsg {
  return {
    petId: 0,
    templateId: 0,
    petName: "",
    curGp: 0,
    curGrade: 0,
    power: 0,
    intel: 0,
    physi: 0,
    armor: 0,
    remainPoints: 0,
    addPowerApti: 0,
    addIntelApti: 0,
    addPhysiApti: 0,
    addArmorApti: 0,
    powerApti: 0,
    intelApti: 0,
    physiApti: 0,
    armorApti: 0,
    curQualityGp: 0,
    growthRate: 0,
    maxHp: 0,
    fireResi: 0,
    waterResi: 0,
    electResi: 0,
    windResi: 0,
    darkResi: 0,
    lightResi: 0,
    followSkills: "",
    changeSkills: "",
    isFight: false,
    isPractice: false,
    isBind: false,
    totalGp: "",
    fightingCapacity: 0,
    isDel: false,
    quality: 0,
    isGuard: false,
    chaSkillIndexs: "",
    fastKey: "",
    initQuality: 0,
    isLocked: false,
    bagAttack: 0,
    bagDefence: 0,
    bagMagicattack: 0,
    bagMagicdefence: 0,
    bagLiving: 0,
    remotePetSkillIndexs: "",
    remoteHp: 0,
    isRemote: false,
    remoteDie: false,
    skillIndex: 0,
    isActiveSecond: false,
    totalQualityGp: 0,
    atkpotential: 0,
    matpotential: 0,
    defpotential: 0,
    mdfpotential: 0,
    hppotential: 0,
    atkpotentialAtr: 0,
    matpotentialAtr: 0,
    defpotentialAtr: 0,
    mdfpotentialAtr: 0,
    hppotentialAtr: 0,
    atkbeneAtr: 0,
    matbeneAtr: 0,
    defbeneAtr: 0,
    mdfbeneAtr: 0,
    hpbeneAtr: 0,
  };
}

export const PetInfoMsg: MessageFns<PetInfoMsg> = {
  encode(message: PetInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.petId !== 0) {
      writer.uint32(8).int32(message.petId);
    }
    if (message.templateId !== 0) {
      writer.uint32(16).int32(message.templateId);
    }
    if (message.petName !== "") {
      writer.uint32(26).string(message.petName);
    }
    if (message.curGp !== 0) {
      writer.uint32(32).int32(message.curGp);
    }
    if (message.curGrade !== 0) {
      writer.uint32(40).int32(message.curGrade);
    }
    if (message.power !== 0) {
      writer.uint32(48).int32(message.power);
    }
    if (message.intel !== 0) {
      writer.uint32(56).int32(message.intel);
    }
    if (message.physi !== 0) {
      writer.uint32(64).int32(message.physi);
    }
    if (message.armor !== 0) {
      writer.uint32(72).int32(message.armor);
    }
    if (message.remainPoints !== 0) {
      writer.uint32(80).int32(message.remainPoints);
    }
    if (message.addPowerApti !== 0) {
      writer.uint32(88).int32(message.addPowerApti);
    }
    if (message.addIntelApti !== 0) {
      writer.uint32(96).int32(message.addIntelApti);
    }
    if (message.addPhysiApti !== 0) {
      writer.uint32(104).int32(message.addPhysiApti);
    }
    if (message.addArmorApti !== 0) {
      writer.uint32(112).int32(message.addArmorApti);
    }
    if (message.powerApti !== 0) {
      writer.uint32(120).int32(message.powerApti);
    }
    if (message.intelApti !== 0) {
      writer.uint32(128).int32(message.intelApti);
    }
    if (message.physiApti !== 0) {
      writer.uint32(136).int32(message.physiApti);
    }
    if (message.armorApti !== 0) {
      writer.uint32(144).int32(message.armorApti);
    }
    if (message.curQualityGp !== 0) {
      writer.uint32(152).int32(message.curQualityGp);
    }
    if (message.growthRate !== 0) {
      writer.uint32(160).int32(message.growthRate);
    }
    if (message.maxHp !== 0) {
      writer.uint32(168).int32(message.maxHp);
    }
    if (message.fireResi !== 0) {
      writer.uint32(176).int32(message.fireResi);
    }
    if (message.waterResi !== 0) {
      writer.uint32(184).int32(message.waterResi);
    }
    if (message.electResi !== 0) {
      writer.uint32(192).int32(message.electResi);
    }
    if (message.windResi !== 0) {
      writer.uint32(200).int32(message.windResi);
    }
    if (message.darkResi !== 0) {
      writer.uint32(208).int32(message.darkResi);
    }
    if (message.lightResi !== 0) {
      writer.uint32(216).int32(message.lightResi);
    }
    if (message.followSkills !== "") {
      writer.uint32(226).string(message.followSkills);
    }
    if (message.changeSkills !== "") {
      writer.uint32(234).string(message.changeSkills);
    }
    if (message.isFight !== false) {
      writer.uint32(240).bool(message.isFight);
    }
    if (message.isPractice !== false) {
      writer.uint32(248).bool(message.isPractice);
    }
    if (message.isBind !== false) {
      writer.uint32(256).bool(message.isBind);
    }
    if (message.totalGp !== "") {
      writer.uint32(266).string(message.totalGp);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(272).int32(message.fightingCapacity);
    }
    if (message.isDel !== false) {
      writer.uint32(280).bool(message.isDel);
    }
    if (message.quality !== 0) {
      writer.uint32(288).int32(message.quality);
    }
    if (message.isGuard !== false) {
      writer.uint32(296).bool(message.isGuard);
    }
    if (message.chaSkillIndexs !== "") {
      writer.uint32(306).string(message.chaSkillIndexs);
    }
    if (message.fastKey !== "") {
      writer.uint32(314).string(message.fastKey);
    }
    if (message.initQuality !== 0) {
      writer.uint32(320).int32(message.initQuality);
    }
    if (message.isLocked !== false) {
      writer.uint32(328).bool(message.isLocked);
    }
    if (message.bagAttack !== 0) {
      writer.uint32(336).int32(message.bagAttack);
    }
    if (message.bagDefence !== 0) {
      writer.uint32(344).int32(message.bagDefence);
    }
    if (message.bagMagicattack !== 0) {
      writer.uint32(352).int32(message.bagMagicattack);
    }
    if (message.bagMagicdefence !== 0) {
      writer.uint32(360).int32(message.bagMagicdefence);
    }
    if (message.bagLiving !== 0) {
      writer.uint32(368).int32(message.bagLiving);
    }
    if (message.remotePetSkillIndexs !== "") {
      writer.uint32(378).string(message.remotePetSkillIndexs);
    }
    if (message.remoteHp !== 0) {
      writer.uint32(384).int32(message.remoteHp);
    }
    if (message.isRemote !== false) {
      writer.uint32(392).bool(message.isRemote);
    }
    if (message.remoteDie !== false) {
      writer.uint32(400).bool(message.remoteDie);
    }
    if (message.skillIndex !== 0) {
      writer.uint32(408).int32(message.skillIndex);
    }
    if (message.isActiveSecond !== false) {
      writer.uint32(416).bool(message.isActiveSecond);
    }
    if (message.totalQualityGp !== 0) {
      writer.uint32(424).int32(message.totalQualityGp);
    }
    if (message.atkpotential !== 0) {
      writer.uint32(432).int32(message.atkpotential);
    }
    if (message.matpotential !== 0) {
      writer.uint32(440).int32(message.matpotential);
    }
    if (message.defpotential !== 0) {
      writer.uint32(448).int32(message.defpotential);
    }
    if (message.mdfpotential !== 0) {
      writer.uint32(456).int32(message.mdfpotential);
    }
    if (message.hppotential !== 0) {
      writer.uint32(464).int32(message.hppotential);
    }
    if (message.atkpotentialAtr !== 0) {
      writer.uint32(472).int32(message.atkpotentialAtr);
    }
    if (message.matpotentialAtr !== 0) {
      writer.uint32(480).int32(message.matpotentialAtr);
    }
    if (message.defpotentialAtr !== 0) {
      writer.uint32(488).int32(message.defpotentialAtr);
    }
    if (message.mdfpotentialAtr !== 0) {
      writer.uint32(496).int32(message.mdfpotentialAtr);
    }
    if (message.hppotentialAtr !== 0) {
      writer.uint32(504).int32(message.hppotentialAtr);
    }
    if (message.atkbeneAtr !== 0) {
      writer.uint32(512).int32(message.atkbeneAtr);
    }
    if (message.matbeneAtr !== 0) {
      writer.uint32(520).int32(message.matbeneAtr);
    }
    if (message.defbeneAtr !== 0) {
      writer.uint32(528).int32(message.defbeneAtr);
    }
    if (message.mdfbeneAtr !== 0) {
      writer.uint32(536).int32(message.mdfbeneAtr);
    }
    if (message.hpbeneAtr !== 0) {
      writer.uint32(544).int32(message.hpbeneAtr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PetInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePetInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.petId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.curGp = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.curGrade = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.power = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.intel = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.physi = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.armor = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.remainPoints = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.addPowerApti = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.addIntelApti = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.addPhysiApti = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.addArmorApti = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.powerApti = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.intelApti = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.physiApti = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.armorApti = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.curQualityGp = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.growthRate = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.maxHp = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.fireResi = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.waterResi = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.electResi = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.windResi = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.darkResi = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.lightResi = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.followSkills = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.changeSkills = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isFight = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.isPractice = reader.bool();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.isBind = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.totalGp = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.isDel = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.isGuard = reader.bool();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.chaSkillIndexs = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.fastKey = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.initQuality = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.isLocked = reader.bool();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.bagAttack = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.bagDefence = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.bagMagicattack = reader.int32();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.bagMagicdefence = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.bagLiving = reader.int32();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.remotePetSkillIndexs = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.remoteHp = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.isRemote = reader.bool();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.remoteDie = reader.bool();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.skillIndex = reader.int32();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.isActiveSecond = reader.bool();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.totalQualityGp = reader.int32();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.atkpotential = reader.int32();
          continue;
        }
        case 55: {
          if (tag !== 440) {
            break;
          }

          message.matpotential = reader.int32();
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.defpotential = reader.int32();
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.mdfpotential = reader.int32();
          continue;
        }
        case 58: {
          if (tag !== 464) {
            break;
          }

          message.hppotential = reader.int32();
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.atkpotentialAtr = reader.int32();
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.matpotentialAtr = reader.int32();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.defpotentialAtr = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 496) {
            break;
          }

          message.mdfpotentialAtr = reader.int32();
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.hppotentialAtr = reader.int32();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.atkbeneAtr = reader.int32();
          continue;
        }
        case 65: {
          if (tag !== 520) {
            break;
          }

          message.matbeneAtr = reader.int32();
          continue;
        }
        case 66: {
          if (tag !== 528) {
            break;
          }

          message.defbeneAtr = reader.int32();
          continue;
        }
        case 67: {
          if (tag !== 536) {
            break;
          }

          message.mdfbeneAtr = reader.int32();
          continue;
        }
        case 68: {
          if (tag !== 544) {
            break;
          }

          message.hpbeneAtr = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PetInfoMsg {
    return {
      petId: isSet(object.petId) ? globalThis.Number(object.petId) : 0,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      curGp: isSet(object.curGp) ? globalThis.Number(object.curGp) : 0,
      curGrade: isSet(object.curGrade) ? globalThis.Number(object.curGrade) : 0,
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      intel: isSet(object.intel) ? globalThis.Number(object.intel) : 0,
      physi: isSet(object.physi) ? globalThis.Number(object.physi) : 0,
      armor: isSet(object.armor) ? globalThis.Number(object.armor) : 0,
      remainPoints: isSet(object.remainPoints) ? globalThis.Number(object.remainPoints) : 0,
      addPowerApti: isSet(object.addPowerApti) ? globalThis.Number(object.addPowerApti) : 0,
      addIntelApti: isSet(object.addIntelApti) ? globalThis.Number(object.addIntelApti) : 0,
      addPhysiApti: isSet(object.addPhysiApti) ? globalThis.Number(object.addPhysiApti) : 0,
      addArmorApti: isSet(object.addArmorApti) ? globalThis.Number(object.addArmorApti) : 0,
      powerApti: isSet(object.powerApti) ? globalThis.Number(object.powerApti) : 0,
      intelApti: isSet(object.intelApti) ? globalThis.Number(object.intelApti) : 0,
      physiApti: isSet(object.physiApti) ? globalThis.Number(object.physiApti) : 0,
      armorApti: isSet(object.armorApti) ? globalThis.Number(object.armorApti) : 0,
      curQualityGp: isSet(object.curQualityGp) ? globalThis.Number(object.curQualityGp) : 0,
      growthRate: isSet(object.growthRate) ? globalThis.Number(object.growthRate) : 0,
      maxHp: isSet(object.maxHp) ? globalThis.Number(object.maxHp) : 0,
      fireResi: isSet(object.fireResi) ? globalThis.Number(object.fireResi) : 0,
      waterResi: isSet(object.waterResi) ? globalThis.Number(object.waterResi) : 0,
      electResi: isSet(object.electResi) ? globalThis.Number(object.electResi) : 0,
      windResi: isSet(object.windResi) ? globalThis.Number(object.windResi) : 0,
      darkResi: isSet(object.darkResi) ? globalThis.Number(object.darkResi) : 0,
      lightResi: isSet(object.lightResi) ? globalThis.Number(object.lightResi) : 0,
      followSkills: isSet(object.followSkills) ? globalThis.String(object.followSkills) : "",
      changeSkills: isSet(object.changeSkills) ? globalThis.String(object.changeSkills) : "",
      isFight: isSet(object.isFight) ? globalThis.Boolean(object.isFight) : false,
      isPractice: isSet(object.isPractice) ? globalThis.Boolean(object.isPractice) : false,
      isBind: isSet(object.isBind) ? globalThis.Boolean(object.isBind) : false,
      totalGp: isSet(object.totalGp) ? globalThis.String(object.totalGp) : "",
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      isDel: isSet(object.isDel) ? globalThis.Boolean(object.isDel) : false,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      isGuard: isSet(object.isGuard) ? globalThis.Boolean(object.isGuard) : false,
      chaSkillIndexs: isSet(object.chaSkillIndexs) ? globalThis.String(object.chaSkillIndexs) : "",
      fastKey: isSet(object.fastKey) ? globalThis.String(object.fastKey) : "",
      initQuality: isSet(object.initQuality) ? globalThis.Number(object.initQuality) : 0,
      isLocked: isSet(object.isLocked) ? globalThis.Boolean(object.isLocked) : false,
      bagAttack: isSet(object.bagAttack) ? globalThis.Number(object.bagAttack) : 0,
      bagDefence: isSet(object.bagDefence) ? globalThis.Number(object.bagDefence) : 0,
      bagMagicattack: isSet(object.bagMagicattack) ? globalThis.Number(object.bagMagicattack) : 0,
      bagMagicdefence: isSet(object.bagMagicdefence) ? globalThis.Number(object.bagMagicdefence) : 0,
      bagLiving: isSet(object.bagLiving) ? globalThis.Number(object.bagLiving) : 0,
      remotePetSkillIndexs: isSet(object.remotePetSkillIndexs) ? globalThis.String(object.remotePetSkillIndexs) : "",
      remoteHp: isSet(object.remoteHp) ? globalThis.Number(object.remoteHp) : 0,
      isRemote: isSet(object.isRemote) ? globalThis.Boolean(object.isRemote) : false,
      remoteDie: isSet(object.remoteDie) ? globalThis.Boolean(object.remoteDie) : false,
      skillIndex: isSet(object.skillIndex) ? globalThis.Number(object.skillIndex) : 0,
      isActiveSecond: isSet(object.isActiveSecond) ? globalThis.Boolean(object.isActiveSecond) : false,
      totalQualityGp: isSet(object.totalQualityGp) ? globalThis.Number(object.totalQualityGp) : 0,
      atkpotential: isSet(object.atkpotential) ? globalThis.Number(object.atkpotential) : 0,
      matpotential: isSet(object.matpotential) ? globalThis.Number(object.matpotential) : 0,
      defpotential: isSet(object.defpotential) ? globalThis.Number(object.defpotential) : 0,
      mdfpotential: isSet(object.mdfpotential) ? globalThis.Number(object.mdfpotential) : 0,
      hppotential: isSet(object.hppotential) ? globalThis.Number(object.hppotential) : 0,
      atkpotentialAtr: isSet(object.atkpotentialAtr) ? globalThis.Number(object.atkpotentialAtr) : 0,
      matpotentialAtr: isSet(object.matpotentialAtr) ? globalThis.Number(object.matpotentialAtr) : 0,
      defpotentialAtr: isSet(object.defpotentialAtr) ? globalThis.Number(object.defpotentialAtr) : 0,
      mdfpotentialAtr: isSet(object.mdfpotentialAtr) ? globalThis.Number(object.mdfpotentialAtr) : 0,
      hppotentialAtr: isSet(object.hppotentialAtr) ? globalThis.Number(object.hppotentialAtr) : 0,
      atkbeneAtr: isSet(object.atkbeneAtr) ? globalThis.Number(object.atkbeneAtr) : 0,
      matbeneAtr: isSet(object.matbeneAtr) ? globalThis.Number(object.matbeneAtr) : 0,
      defbeneAtr: isSet(object.defbeneAtr) ? globalThis.Number(object.defbeneAtr) : 0,
      mdfbeneAtr: isSet(object.mdfbeneAtr) ? globalThis.Number(object.mdfbeneAtr) : 0,
      hpbeneAtr: isSet(object.hpbeneAtr) ? globalThis.Number(object.hpbeneAtr) : 0,
    };
  },

  toJSON(message: PetInfoMsg): unknown {
    const obj: any = {};
    if (message.petId !== 0) {
      obj.petId = Math.round(message.petId);
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.curGp !== 0) {
      obj.curGp = Math.round(message.curGp);
    }
    if (message.curGrade !== 0) {
      obj.curGrade = Math.round(message.curGrade);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.intel !== 0) {
      obj.intel = Math.round(message.intel);
    }
    if (message.physi !== 0) {
      obj.physi = Math.round(message.physi);
    }
    if (message.armor !== 0) {
      obj.armor = Math.round(message.armor);
    }
    if (message.remainPoints !== 0) {
      obj.remainPoints = Math.round(message.remainPoints);
    }
    if (message.addPowerApti !== 0) {
      obj.addPowerApti = Math.round(message.addPowerApti);
    }
    if (message.addIntelApti !== 0) {
      obj.addIntelApti = Math.round(message.addIntelApti);
    }
    if (message.addPhysiApti !== 0) {
      obj.addPhysiApti = Math.round(message.addPhysiApti);
    }
    if (message.addArmorApti !== 0) {
      obj.addArmorApti = Math.round(message.addArmorApti);
    }
    if (message.powerApti !== 0) {
      obj.powerApti = Math.round(message.powerApti);
    }
    if (message.intelApti !== 0) {
      obj.intelApti = Math.round(message.intelApti);
    }
    if (message.physiApti !== 0) {
      obj.physiApti = Math.round(message.physiApti);
    }
    if (message.armorApti !== 0) {
      obj.armorApti = Math.round(message.armorApti);
    }
    if (message.curQualityGp !== 0) {
      obj.curQualityGp = Math.round(message.curQualityGp);
    }
    if (message.growthRate !== 0) {
      obj.growthRate = Math.round(message.growthRate);
    }
    if (message.maxHp !== 0) {
      obj.maxHp = Math.round(message.maxHp);
    }
    if (message.fireResi !== 0) {
      obj.fireResi = Math.round(message.fireResi);
    }
    if (message.waterResi !== 0) {
      obj.waterResi = Math.round(message.waterResi);
    }
    if (message.electResi !== 0) {
      obj.electResi = Math.round(message.electResi);
    }
    if (message.windResi !== 0) {
      obj.windResi = Math.round(message.windResi);
    }
    if (message.darkResi !== 0) {
      obj.darkResi = Math.round(message.darkResi);
    }
    if (message.lightResi !== 0) {
      obj.lightResi = Math.round(message.lightResi);
    }
    if (message.followSkills !== "") {
      obj.followSkills = message.followSkills;
    }
    if (message.changeSkills !== "") {
      obj.changeSkills = message.changeSkills;
    }
    if (message.isFight !== false) {
      obj.isFight = message.isFight;
    }
    if (message.isPractice !== false) {
      obj.isPractice = message.isPractice;
    }
    if (message.isBind !== false) {
      obj.isBind = message.isBind;
    }
    if (message.totalGp !== "") {
      obj.totalGp = message.totalGp;
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.isDel !== false) {
      obj.isDel = message.isDel;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.isGuard !== false) {
      obj.isGuard = message.isGuard;
    }
    if (message.chaSkillIndexs !== "") {
      obj.chaSkillIndexs = message.chaSkillIndexs;
    }
    if (message.fastKey !== "") {
      obj.fastKey = message.fastKey;
    }
    if (message.initQuality !== 0) {
      obj.initQuality = Math.round(message.initQuality);
    }
    if (message.isLocked !== false) {
      obj.isLocked = message.isLocked;
    }
    if (message.bagAttack !== 0) {
      obj.bagAttack = Math.round(message.bagAttack);
    }
    if (message.bagDefence !== 0) {
      obj.bagDefence = Math.round(message.bagDefence);
    }
    if (message.bagMagicattack !== 0) {
      obj.bagMagicattack = Math.round(message.bagMagicattack);
    }
    if (message.bagMagicdefence !== 0) {
      obj.bagMagicdefence = Math.round(message.bagMagicdefence);
    }
    if (message.bagLiving !== 0) {
      obj.bagLiving = Math.round(message.bagLiving);
    }
    if (message.remotePetSkillIndexs !== "") {
      obj.remotePetSkillIndexs = message.remotePetSkillIndexs;
    }
    if (message.remoteHp !== 0) {
      obj.remoteHp = Math.round(message.remoteHp);
    }
    if (message.isRemote !== false) {
      obj.isRemote = message.isRemote;
    }
    if (message.remoteDie !== false) {
      obj.remoteDie = message.remoteDie;
    }
    if (message.skillIndex !== 0) {
      obj.skillIndex = Math.round(message.skillIndex);
    }
    if (message.isActiveSecond !== false) {
      obj.isActiveSecond = message.isActiveSecond;
    }
    if (message.totalQualityGp !== 0) {
      obj.totalQualityGp = Math.round(message.totalQualityGp);
    }
    if (message.atkpotential !== 0) {
      obj.atkpotential = Math.round(message.atkpotential);
    }
    if (message.matpotential !== 0) {
      obj.matpotential = Math.round(message.matpotential);
    }
    if (message.defpotential !== 0) {
      obj.defpotential = Math.round(message.defpotential);
    }
    if (message.mdfpotential !== 0) {
      obj.mdfpotential = Math.round(message.mdfpotential);
    }
    if (message.hppotential !== 0) {
      obj.hppotential = Math.round(message.hppotential);
    }
    if (message.atkpotentialAtr !== 0) {
      obj.atkpotentialAtr = Math.round(message.atkpotentialAtr);
    }
    if (message.matpotentialAtr !== 0) {
      obj.matpotentialAtr = Math.round(message.matpotentialAtr);
    }
    if (message.defpotentialAtr !== 0) {
      obj.defpotentialAtr = Math.round(message.defpotentialAtr);
    }
    if (message.mdfpotentialAtr !== 0) {
      obj.mdfpotentialAtr = Math.round(message.mdfpotentialAtr);
    }
    if (message.hppotentialAtr !== 0) {
      obj.hppotentialAtr = Math.round(message.hppotentialAtr);
    }
    if (message.atkbeneAtr !== 0) {
      obj.atkbeneAtr = Math.round(message.atkbeneAtr);
    }
    if (message.matbeneAtr !== 0) {
      obj.matbeneAtr = Math.round(message.matbeneAtr);
    }
    if (message.defbeneAtr !== 0) {
      obj.defbeneAtr = Math.round(message.defbeneAtr);
    }
    if (message.mdfbeneAtr !== 0) {
      obj.mdfbeneAtr = Math.round(message.mdfbeneAtr);
    }
    if (message.hpbeneAtr !== 0) {
      obj.hpbeneAtr = Math.round(message.hpbeneAtr);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PetInfoMsg>, I>>(base?: I): PetInfoMsg {
    return PetInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PetInfoMsg>, I>>(object: I): PetInfoMsg {
    const message = createBasePetInfoMsg();
    message.petId = object.petId ?? 0;
    message.templateId = object.templateId ?? 0;
    message.petName = object.petName ?? "";
    message.curGp = object.curGp ?? 0;
    message.curGrade = object.curGrade ?? 0;
    message.power = object.power ?? 0;
    message.intel = object.intel ?? 0;
    message.physi = object.physi ?? 0;
    message.armor = object.armor ?? 0;
    message.remainPoints = object.remainPoints ?? 0;
    message.addPowerApti = object.addPowerApti ?? 0;
    message.addIntelApti = object.addIntelApti ?? 0;
    message.addPhysiApti = object.addPhysiApti ?? 0;
    message.addArmorApti = object.addArmorApti ?? 0;
    message.powerApti = object.powerApti ?? 0;
    message.intelApti = object.intelApti ?? 0;
    message.physiApti = object.physiApti ?? 0;
    message.armorApti = object.armorApti ?? 0;
    message.curQualityGp = object.curQualityGp ?? 0;
    message.growthRate = object.growthRate ?? 0;
    message.maxHp = object.maxHp ?? 0;
    message.fireResi = object.fireResi ?? 0;
    message.waterResi = object.waterResi ?? 0;
    message.electResi = object.electResi ?? 0;
    message.windResi = object.windResi ?? 0;
    message.darkResi = object.darkResi ?? 0;
    message.lightResi = object.lightResi ?? 0;
    message.followSkills = object.followSkills ?? "";
    message.changeSkills = object.changeSkills ?? "";
    message.isFight = object.isFight ?? false;
    message.isPractice = object.isPractice ?? false;
    message.isBind = object.isBind ?? false;
    message.totalGp = object.totalGp ?? "";
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.isDel = object.isDel ?? false;
    message.quality = object.quality ?? 0;
    message.isGuard = object.isGuard ?? false;
    message.chaSkillIndexs = object.chaSkillIndexs ?? "";
    message.fastKey = object.fastKey ?? "";
    message.initQuality = object.initQuality ?? 0;
    message.isLocked = object.isLocked ?? false;
    message.bagAttack = object.bagAttack ?? 0;
    message.bagDefence = object.bagDefence ?? 0;
    message.bagMagicattack = object.bagMagicattack ?? 0;
    message.bagMagicdefence = object.bagMagicdefence ?? 0;
    message.bagLiving = object.bagLiving ?? 0;
    message.remotePetSkillIndexs = object.remotePetSkillIndexs ?? "";
    message.remoteHp = object.remoteHp ?? 0;
    message.isRemote = object.isRemote ?? false;
    message.remoteDie = object.remoteDie ?? false;
    message.skillIndex = object.skillIndex ?? 0;
    message.isActiveSecond = object.isActiveSecond ?? false;
    message.totalQualityGp = object.totalQualityGp ?? 0;
    message.atkpotential = object.atkpotential ?? 0;
    message.matpotential = object.matpotential ?? 0;
    message.defpotential = object.defpotential ?? 0;
    message.mdfpotential = object.mdfpotential ?? 0;
    message.hppotential = object.hppotential ?? 0;
    message.atkpotentialAtr = object.atkpotentialAtr ?? 0;
    message.matpotentialAtr = object.matpotentialAtr ?? 0;
    message.defpotentialAtr = object.defpotentialAtr ?? 0;
    message.mdfpotentialAtr = object.mdfpotentialAtr ?? 0;
    message.hppotentialAtr = object.hppotentialAtr ?? 0;
    message.atkbeneAtr = object.atkbeneAtr ?? 0;
    message.matbeneAtr = object.matbeneAtr ?? 0;
    message.defbeneAtr = object.defbeneAtr ?? 0;
    message.mdfbeneAtr = object.mdfbeneAtr ?? 0;
    message.hpbeneAtr = object.hpbeneAtr ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
