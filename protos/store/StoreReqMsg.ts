// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: store/StoreReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.store";

export interface StoreReqMsg {
  holePos: number;
  operate: boolean;
  bagType: number;
  bagPos: number;
  mountPos: number;
  composeId: number;
  composeNum: number;
  autoBuy: boolean;
  srcItemid: number;
  desItemid: number;
  count: number;
  payType: number;
}

function createBaseStoreReqMsg(): StoreReqMsg {
  return {
    holePos: 0,
    operate: false,
    bagType: 0,
    bagPos: 0,
    mountPos: 0,
    composeId: 0,
    composeNum: 0,
    autoBuy: false,
    srcItemid: 0,
    desItemid: 0,
    count: 0,
    payType: 0,
  };
}

export const StoreReqMsg: MessageFns<StoreReqMsg> = {
  encode(message: StoreReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.holePos !== 0) {
      writer.uint32(8).int32(message.holePos);
    }
    if (message.operate !== false) {
      writer.uint32(16).bool(message.operate);
    }
    if (message.bagType !== 0) {
      writer.uint32(24).int32(message.bagType);
    }
    if (message.bagPos !== 0) {
      writer.uint32(32).int32(message.bagPos);
    }
    if (message.mountPos !== 0) {
      writer.uint32(40).int32(message.mountPos);
    }
    if (message.composeId !== 0) {
      writer.uint32(48).int32(message.composeId);
    }
    if (message.composeNum !== 0) {
      writer.uint32(56).int32(message.composeNum);
    }
    if (message.autoBuy !== false) {
      writer.uint32(64).bool(message.autoBuy);
    }
    if (message.srcItemid !== 0) {
      writer.uint32(72).int32(message.srcItemid);
    }
    if (message.desItemid !== 0) {
      writer.uint32(80).int32(message.desItemid);
    }
    if (message.count !== 0) {
      writer.uint32(88).int32(message.count);
    }
    if (message.payType !== 0) {
      writer.uint32(96).int32(message.payType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoreReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoreReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.holePos = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operate = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bagType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bagPos = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.mountPos = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.composeId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.composeNum = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.autoBuy = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.srcItemid = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.desItemid = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoreReqMsg {
    return {
      holePos: isSet(object.holePos) ? globalThis.Number(object.holePos) : 0,
      operate: isSet(object.operate) ? globalThis.Boolean(object.operate) : false,
      bagType: isSet(object.bagType) ? globalThis.Number(object.bagType) : 0,
      bagPos: isSet(object.bagPos) ? globalThis.Number(object.bagPos) : 0,
      mountPos: isSet(object.mountPos) ? globalThis.Number(object.mountPos) : 0,
      composeId: isSet(object.composeId) ? globalThis.Number(object.composeId) : 0,
      composeNum: isSet(object.composeNum) ? globalThis.Number(object.composeNum) : 0,
      autoBuy: isSet(object.autoBuy) ? globalThis.Boolean(object.autoBuy) : false,
      srcItemid: isSet(object.srcItemid) ? globalThis.Number(object.srcItemid) : 0,
      desItemid: isSet(object.desItemid) ? globalThis.Number(object.desItemid) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
    };
  },

  toJSON(message: StoreReqMsg): unknown {
    const obj: any = {};
    if (message.holePos !== 0) {
      obj.holePos = Math.round(message.holePos);
    }
    if (message.operate !== false) {
      obj.operate = message.operate;
    }
    if (message.bagType !== 0) {
      obj.bagType = Math.round(message.bagType);
    }
    if (message.bagPos !== 0) {
      obj.bagPos = Math.round(message.bagPos);
    }
    if (message.mountPos !== 0) {
      obj.mountPos = Math.round(message.mountPos);
    }
    if (message.composeId !== 0) {
      obj.composeId = Math.round(message.composeId);
    }
    if (message.composeNum !== 0) {
      obj.composeNum = Math.round(message.composeNum);
    }
    if (message.autoBuy !== false) {
      obj.autoBuy = message.autoBuy;
    }
    if (message.srcItemid !== 0) {
      obj.srcItemid = Math.round(message.srcItemid);
    }
    if (message.desItemid !== 0) {
      obj.desItemid = Math.round(message.desItemid);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StoreReqMsg>, I>>(base?: I): StoreReqMsg {
    return StoreReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StoreReqMsg>, I>>(object: I): StoreReqMsg {
    const message = createBaseStoreReqMsg();
    message.holePos = object.holePos ?? 0;
    message.operate = object.operate ?? false;
    message.bagType = object.bagType ?? 0;
    message.bagPos = object.bagPos ?? 0;
    message.mountPos = object.mountPos ?? 0;
    message.composeId = object.composeId ?? 0;
    message.composeNum = object.composeNum ?? 0;
    message.autoBuy = object.autoBuy ?? false;
    message.srcItemid = object.srcItemid ?? 0;
    message.desItemid = object.desItemid ?? 0;
    message.count = object.count ?? 0;
    message.payType = object.payType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
