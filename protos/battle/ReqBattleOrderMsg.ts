// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/ReqBattleOrderMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface ReqBattleOrderMsg {
  defenceUserId: number;
  defenceServerName: string;
  side: number;
  nodeId: number;
  campaignUid: string;
  campaignId: number;
  property1: number;
  property2: string;
}

function createBaseReqBattleOrderMsg(): ReqBattleOrderMsg {
  return {
    defenceUserId: 0,
    defenceServerName: "",
    side: 0,
    nodeId: 0,
    campaignUid: "",
    campaignId: 0,
    property1: 0,
    property2: "",
  };
}

export const ReqBattleOrderMsg: MessageFns<ReqBattleOrderMsg> = {
  encode(message: ReqBattleOrderMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defenceUserId !== 0) {
      writer.uint32(8).int32(message.defenceUserId);
    }
    if (message.defenceServerName !== "") {
      writer.uint32(18).string(message.defenceServerName);
    }
    if (message.side !== 0) {
      writer.uint32(24).int32(message.side);
    }
    if (message.nodeId !== 0) {
      writer.uint32(32).int32(message.nodeId);
    }
    if (message.campaignUid !== "") {
      writer.uint32(42).string(message.campaignUid);
    }
    if (message.campaignId !== 0) {
      writer.uint32(48).int32(message.campaignId);
    }
    if (message.property1 !== 0) {
      writer.uint32(56).int32(message.property1);
    }
    if (message.property2 !== "") {
      writer.uint32(66).string(message.property2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqBattleOrderMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqBattleOrderMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.defenceUserId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defenceServerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.side = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignUid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.property1 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.property2 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqBattleOrderMsg {
    return {
      defenceUserId: isSet(object.defenceUserId) ? globalThis.Number(object.defenceUserId) : 0,
      defenceServerName: isSet(object.defenceServerName) ? globalThis.String(object.defenceServerName) : "",
      side: isSet(object.side) ? globalThis.Number(object.side) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      campaignUid: isSet(object.campaignUid) ? globalThis.String(object.campaignUid) : "",
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      property1: isSet(object.property1) ? globalThis.Number(object.property1) : 0,
      property2: isSet(object.property2) ? globalThis.String(object.property2) : "",
    };
  },

  toJSON(message: ReqBattleOrderMsg): unknown {
    const obj: any = {};
    if (message.defenceUserId !== 0) {
      obj.defenceUserId = Math.round(message.defenceUserId);
    }
    if (message.defenceServerName !== "") {
      obj.defenceServerName = message.defenceServerName;
    }
    if (message.side !== 0) {
      obj.side = Math.round(message.side);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.campaignUid !== "") {
      obj.campaignUid = message.campaignUid;
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.property1 !== 0) {
      obj.property1 = Math.round(message.property1);
    }
    if (message.property2 !== "") {
      obj.property2 = message.property2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqBattleOrderMsg>, I>>(base?: I): ReqBattleOrderMsg {
    return ReqBattleOrderMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqBattleOrderMsg>, I>>(object: I): ReqBattleOrderMsg {
    const message = createBaseReqBattleOrderMsg();
    message.defenceUserId = object.defenceUserId ?? 0;
    message.defenceServerName = object.defenceServerName ?? "";
    message.side = object.side ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.campaignUid = object.campaignUid ?? "";
    message.campaignId = object.campaignId ?? 0;
    message.property1 = object.property1 ?? 0;
    message.property2 = object.property2 ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
