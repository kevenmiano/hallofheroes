// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/DetailReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface DetailReqMsg {
  userId: number;
  serverName: string;
  otherId: number;
  otherName: string;
  itemInfo: boolean;
  armyInfo: boolean;
  heroInfo: boolean;
  pawnInfo: boolean;
}

function createBaseDetailReqMsg(): DetailReqMsg {
  return {
    userId: 0,
    serverName: "",
    otherId: 0,
    otherName: "",
    itemInfo: false,
    armyInfo: false,
    heroInfo: false,
    pawnInfo: false,
  };
}

export const DetailReqMsg: MessageFns<DetailReqMsg> = {
  encode(message: DetailReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.serverName !== "") {
      writer.uint32(18).string(message.serverName);
    }
    if (message.otherId !== 0) {
      writer.uint32(24).int32(message.otherId);
    }
    if (message.otherName !== "") {
      writer.uint32(34).string(message.otherName);
    }
    if (message.itemInfo !== false) {
      writer.uint32(40).bool(message.itemInfo);
    }
    if (message.armyInfo !== false) {
      writer.uint32(48).bool(message.armyInfo);
    }
    if (message.heroInfo !== false) {
      writer.uint32(56).bool(message.heroInfo);
    }
    if (message.pawnInfo !== false) {
      writer.uint32(64).bool(message.pawnInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.otherId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.otherName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.itemInfo = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.armyInfo = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.heroInfo = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.pawnInfo = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailReqMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      otherId: isSet(object.otherId) ? globalThis.Number(object.otherId) : 0,
      otherName: isSet(object.otherName) ? globalThis.String(object.otherName) : "",
      itemInfo: isSet(object.itemInfo) ? globalThis.Boolean(object.itemInfo) : false,
      armyInfo: isSet(object.armyInfo) ? globalThis.Boolean(object.armyInfo) : false,
      heroInfo: isSet(object.heroInfo) ? globalThis.Boolean(object.heroInfo) : false,
      pawnInfo: isSet(object.pawnInfo) ? globalThis.Boolean(object.pawnInfo) : false,
    };
  },

  toJSON(message: DetailReqMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.otherId !== 0) {
      obj.otherId = Math.round(message.otherId);
    }
    if (message.otherName !== "") {
      obj.otherName = message.otherName;
    }
    if (message.itemInfo !== false) {
      obj.itemInfo = message.itemInfo;
    }
    if (message.armyInfo !== false) {
      obj.armyInfo = message.armyInfo;
    }
    if (message.heroInfo !== false) {
      obj.heroInfo = message.heroInfo;
    }
    if (message.pawnInfo !== false) {
      obj.pawnInfo = message.pawnInfo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailReqMsg>, I>>(base?: I): DetailReqMsg {
    return DetailReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailReqMsg>, I>>(object: I): DetailReqMsg {
    const message = createBaseDetailReqMsg();
    message.userId = object.userId ?? 0;
    message.serverName = object.serverName ?? "";
    message.otherId = object.otherId ?? 0;
    message.otherName = object.otherName ?? "";
    message.itemInfo = object.itemInfo ?? false;
    message.armyInfo = object.armyInfo ?? false;
    message.heroInfo = object.heroInfo ?? false;
    message.pawnInfo = object.pawnInfo ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
