// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/SlotActiveMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface SlotActiveMsg {
  open: boolean;
  op: number;
  status: number;
  slot: string;
  type: number;
  rewarditemtemplateid: number;
  findcost: number;
}

function createBaseSlotActiveMsg(): SlotActiveMsg {
  return { open: false, op: 0, status: 0, slot: "", type: 0, rewarditemtemplateid: 0, findcost: 0 };
}

export const SlotActiveMsg: MessageFns<SlotActiveMsg> = {
  encode(message: SlotActiveMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.open !== false) {
      writer.uint32(8).bool(message.open);
    }
    if (message.op !== 0) {
      writer.uint32(16).int32(message.op);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.slot !== "") {
      writer.uint32(34).string(message.slot);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.rewarditemtemplateid !== 0) {
      writer.uint32(48).int32(message.rewarditemtemplateid);
    }
    if (message.findcost !== 0) {
      writer.uint32(56).int32(message.findcost);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlotActiveMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlotActiveMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.open = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slot = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rewarditemtemplateid = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.findcost = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlotActiveMsg {
    return {
      open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      slot: isSet(object.slot) ? globalThis.String(object.slot) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      rewarditemtemplateid: isSet(object.rewarditemtemplateid) ? globalThis.Number(object.rewarditemtemplateid) : 0,
      findcost: isSet(object.findcost) ? globalThis.Number(object.findcost) : 0,
    };
  },

  toJSON(message: SlotActiveMsg): unknown {
    const obj: any = {};
    if (message.open !== false) {
      obj.open = message.open;
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.slot !== "") {
      obj.slot = message.slot;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.rewarditemtemplateid !== 0) {
      obj.rewarditemtemplateid = Math.round(message.rewarditemtemplateid);
    }
    if (message.findcost !== 0) {
      obj.findcost = Math.round(message.findcost);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlotActiveMsg>, I>>(base?: I): SlotActiveMsg {
    return SlotActiveMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlotActiveMsg>, I>>(object: I): SlotActiveMsg {
    const message = createBaseSlotActiveMsg();
    message.open = object.open ?? false;
    message.op = object.op ?? 0;
    message.status = object.status ?? 0;
    message.slot = object.slot ?? "";
    message.type = object.type ?? 0;
    message.rewarditemtemplateid = object.rewarditemtemplateid ?? 0;
    message.findcost = object.findcost ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
