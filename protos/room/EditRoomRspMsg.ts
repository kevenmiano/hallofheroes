// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: room/EditRoomRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.room";

export interface EditRoomRspMsg {
  roomId: number;
  startCampaignId: number;
  masterId: number;
  count: number;
  capacity: number;
  passWord: string;
  roomName: string;
}

function createBaseEditRoomRspMsg(): EditRoomRspMsg {
  return { roomId: 0, startCampaignId: 0, masterId: 0, count: 0, capacity: 0, passWord: "", roomName: "" };
}

export const EditRoomRspMsg: MessageFns<EditRoomRspMsg> = {
  encode(message: EditRoomRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== 0) {
      writer.uint32(8).int32(message.roomId);
    }
    if (message.startCampaignId !== 0) {
      writer.uint32(16).int32(message.startCampaignId);
    }
    if (message.masterId !== 0) {
      writer.uint32(24).int32(message.masterId);
    }
    if (message.count !== 0) {
      writer.uint32(32).int32(message.count);
    }
    if (message.capacity !== 0) {
      writer.uint32(40).int32(message.capacity);
    }
    if (message.passWord !== "") {
      writer.uint32(50).string(message.passWord);
    }
    if (message.roomName !== "") {
      writer.uint32(58).string(message.roomName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditRoomRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditRoomRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startCampaignId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.masterId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.capacity = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.passWord = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditRoomRspMsg {
    return {
      roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 0,
      startCampaignId: isSet(object.startCampaignId) ? globalThis.Number(object.startCampaignId) : 0,
      masterId: isSet(object.masterId) ? globalThis.Number(object.masterId) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      capacity: isSet(object.capacity) ? globalThis.Number(object.capacity) : 0,
      passWord: isSet(object.passWord) ? globalThis.String(object.passWord) : "",
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
    };
  },

  toJSON(message: EditRoomRspMsg): unknown {
    const obj: any = {};
    if (message.roomId !== 0) {
      obj.roomId = Math.round(message.roomId);
    }
    if (message.startCampaignId !== 0) {
      obj.startCampaignId = Math.round(message.startCampaignId);
    }
    if (message.masterId !== 0) {
      obj.masterId = Math.round(message.masterId);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.capacity !== 0) {
      obj.capacity = Math.round(message.capacity);
    }
    if (message.passWord !== "") {
      obj.passWord = message.passWord;
    }
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditRoomRspMsg>, I>>(base?: I): EditRoomRspMsg {
    return EditRoomRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditRoomRspMsg>, I>>(object: I): EditRoomRspMsg {
    const message = createBaseEditRoomRspMsg();
    message.roomId = object.roomId ?? 0;
    message.startCampaignId = object.startCampaignId ?? 0;
    message.masterId = object.masterId ?? 0;
    message.count = object.count ?? 0;
    message.capacity = object.capacity ?? 0;
    message.passWord = object.passWord ?? "";
    message.roomName = object.roomName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
