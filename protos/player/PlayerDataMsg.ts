// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/PlayerDataMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface PlayerDataMsg {
  user: boolean;
  castle: boolean;
  army: boolean;
  quest: boolean;
  build: boolean;
  tree: boolean;
  aas: boolean;
  smith: boolean;
  bag: boolean;
  leed: boolean;
  star: boolean;
  friend: boolean;
  effect: boolean;
  sys: boolean;
  offline: boolean;
  reward: boolean;
  tower: boolean;
  shop: boolean;
  challReward: boolean;
  snsReq: boolean;
  active: boolean;
  switches: boolean;
  sweep: boolean;
  questionnarie: boolean;
  kingContract: boolean;
  rebateCharge: boolean;
  rebateConsum: boolean;
  sumActive: boolean;
  crossScoreReward: boolean;
  appell: boolean;
  bottle: boolean;
  petChallengeReward: boolean;
  powcardInfo: boolean;
  christmas: boolean;
}

function createBasePlayerDataMsg(): PlayerDataMsg {
  return {
    user: false,
    castle: false,
    army: false,
    quest: false,
    build: false,
    tree: false,
    aas: false,
    smith: false,
    bag: false,
    leed: false,
    star: false,
    friend: false,
    effect: false,
    sys: false,
    offline: false,
    reward: false,
    tower: false,
    shop: false,
    challReward: false,
    snsReq: false,
    active: false,
    switches: false,
    sweep: false,
    questionnarie: false,
    kingContract: false,
    rebateCharge: false,
    rebateConsum: false,
    sumActive: false,
    crossScoreReward: false,
    appell: false,
    bottle: false,
    petChallengeReward: false,
    powcardInfo: false,
    christmas: false,
  };
}

export const PlayerDataMsg: MessageFns<PlayerDataMsg> = {
  encode(message: PlayerDataMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== false) {
      writer.uint32(8).bool(message.user);
    }
    if (message.castle !== false) {
      writer.uint32(16).bool(message.castle);
    }
    if (message.army !== false) {
      writer.uint32(24).bool(message.army);
    }
    if (message.quest !== false) {
      writer.uint32(32).bool(message.quest);
    }
    if (message.build !== false) {
      writer.uint32(40).bool(message.build);
    }
    if (message.tree !== false) {
      writer.uint32(48).bool(message.tree);
    }
    if (message.aas !== false) {
      writer.uint32(56).bool(message.aas);
    }
    if (message.smith !== false) {
      writer.uint32(64).bool(message.smith);
    }
    if (message.bag !== false) {
      writer.uint32(72).bool(message.bag);
    }
    if (message.leed !== false) {
      writer.uint32(80).bool(message.leed);
    }
    if (message.star !== false) {
      writer.uint32(88).bool(message.star);
    }
    if (message.friend !== false) {
      writer.uint32(96).bool(message.friend);
    }
    if (message.effect !== false) {
      writer.uint32(104).bool(message.effect);
    }
    if (message.sys !== false) {
      writer.uint32(112).bool(message.sys);
    }
    if (message.offline !== false) {
      writer.uint32(120).bool(message.offline);
    }
    if (message.reward !== false) {
      writer.uint32(128).bool(message.reward);
    }
    if (message.tower !== false) {
      writer.uint32(136).bool(message.tower);
    }
    if (message.shop !== false) {
      writer.uint32(144).bool(message.shop);
    }
    if (message.challReward !== false) {
      writer.uint32(152).bool(message.challReward);
    }
    if (message.snsReq !== false) {
      writer.uint32(160).bool(message.snsReq);
    }
    if (message.active !== false) {
      writer.uint32(168).bool(message.active);
    }
    if (message.switches !== false) {
      writer.uint32(176).bool(message.switches);
    }
    if (message.sweep !== false) {
      writer.uint32(184).bool(message.sweep);
    }
    if (message.questionnarie !== false) {
      writer.uint32(192).bool(message.questionnarie);
    }
    if (message.kingContract !== false) {
      writer.uint32(200).bool(message.kingContract);
    }
    if (message.rebateCharge !== false) {
      writer.uint32(208).bool(message.rebateCharge);
    }
    if (message.rebateConsum !== false) {
      writer.uint32(216).bool(message.rebateConsum);
    }
    if (message.sumActive !== false) {
      writer.uint32(224).bool(message.sumActive);
    }
    if (message.crossScoreReward !== false) {
      writer.uint32(232).bool(message.crossScoreReward);
    }
    if (message.appell !== false) {
      writer.uint32(240).bool(message.appell);
    }
    if (message.bottle !== false) {
      writer.uint32(248).bool(message.bottle);
    }
    if (message.petChallengeReward !== false) {
      writer.uint32(256).bool(message.petChallengeReward);
    }
    if (message.powcardInfo !== false) {
      writer.uint32(264).bool(message.powcardInfo);
    }
    if (message.christmas !== false) {
      writer.uint32(272).bool(message.christmas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerDataMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerDataMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.user = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.castle = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.army = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quest = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.build = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.tree = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.aas = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.smith = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.bag = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.leed = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.star = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.friend = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.effect = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.sys = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.offline = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.reward = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.tower = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.shop = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.challReward = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.snsReq = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.switches = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.sweep = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.questionnarie = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.kingContract = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.rebateCharge = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.rebateConsum = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.sumActive = reader.bool();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.crossScoreReward = reader.bool();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.appell = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.bottle = reader.bool();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.petChallengeReward = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.powcardInfo = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.christmas = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerDataMsg {
    return {
      user: isSet(object.user) ? globalThis.Boolean(object.user) : false,
      castle: isSet(object.castle) ? globalThis.Boolean(object.castle) : false,
      army: isSet(object.army) ? globalThis.Boolean(object.army) : false,
      quest: isSet(object.quest) ? globalThis.Boolean(object.quest) : false,
      build: isSet(object.build) ? globalThis.Boolean(object.build) : false,
      tree: isSet(object.tree) ? globalThis.Boolean(object.tree) : false,
      aas: isSet(object.aas) ? globalThis.Boolean(object.aas) : false,
      smith: isSet(object.smith) ? globalThis.Boolean(object.smith) : false,
      bag: isSet(object.bag) ? globalThis.Boolean(object.bag) : false,
      leed: isSet(object.leed) ? globalThis.Boolean(object.leed) : false,
      star: isSet(object.star) ? globalThis.Boolean(object.star) : false,
      friend: isSet(object.friend) ? globalThis.Boolean(object.friend) : false,
      effect: isSet(object.effect) ? globalThis.Boolean(object.effect) : false,
      sys: isSet(object.sys) ? globalThis.Boolean(object.sys) : false,
      offline: isSet(object.offline) ? globalThis.Boolean(object.offline) : false,
      reward: isSet(object.reward) ? globalThis.Boolean(object.reward) : false,
      tower: isSet(object.tower) ? globalThis.Boolean(object.tower) : false,
      shop: isSet(object.shop) ? globalThis.Boolean(object.shop) : false,
      challReward: isSet(object.challReward) ? globalThis.Boolean(object.challReward) : false,
      snsReq: isSet(object.snsReq) ? globalThis.Boolean(object.snsReq) : false,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      switches: isSet(object.switches) ? globalThis.Boolean(object.switches) : false,
      sweep: isSet(object.sweep) ? globalThis.Boolean(object.sweep) : false,
      questionnarie: isSet(object.questionnarie) ? globalThis.Boolean(object.questionnarie) : false,
      kingContract: isSet(object.kingContract) ? globalThis.Boolean(object.kingContract) : false,
      rebateCharge: isSet(object.rebateCharge) ? globalThis.Boolean(object.rebateCharge) : false,
      rebateConsum: isSet(object.rebateConsum) ? globalThis.Boolean(object.rebateConsum) : false,
      sumActive: isSet(object.sumActive) ? globalThis.Boolean(object.sumActive) : false,
      crossScoreReward: isSet(object.crossScoreReward) ? globalThis.Boolean(object.crossScoreReward) : false,
      appell: isSet(object.appell) ? globalThis.Boolean(object.appell) : false,
      bottle: isSet(object.bottle) ? globalThis.Boolean(object.bottle) : false,
      petChallengeReward: isSet(object.petChallengeReward) ? globalThis.Boolean(object.petChallengeReward) : false,
      powcardInfo: isSet(object.powcardInfo) ? globalThis.Boolean(object.powcardInfo) : false,
      christmas: isSet(object.christmas) ? globalThis.Boolean(object.christmas) : false,
    };
  },

  toJSON(message: PlayerDataMsg): unknown {
    const obj: any = {};
    if (message.user !== false) {
      obj.user = message.user;
    }
    if (message.castle !== false) {
      obj.castle = message.castle;
    }
    if (message.army !== false) {
      obj.army = message.army;
    }
    if (message.quest !== false) {
      obj.quest = message.quest;
    }
    if (message.build !== false) {
      obj.build = message.build;
    }
    if (message.tree !== false) {
      obj.tree = message.tree;
    }
    if (message.aas !== false) {
      obj.aas = message.aas;
    }
    if (message.smith !== false) {
      obj.smith = message.smith;
    }
    if (message.bag !== false) {
      obj.bag = message.bag;
    }
    if (message.leed !== false) {
      obj.leed = message.leed;
    }
    if (message.star !== false) {
      obj.star = message.star;
    }
    if (message.friend !== false) {
      obj.friend = message.friend;
    }
    if (message.effect !== false) {
      obj.effect = message.effect;
    }
    if (message.sys !== false) {
      obj.sys = message.sys;
    }
    if (message.offline !== false) {
      obj.offline = message.offline;
    }
    if (message.reward !== false) {
      obj.reward = message.reward;
    }
    if (message.tower !== false) {
      obj.tower = message.tower;
    }
    if (message.shop !== false) {
      obj.shop = message.shop;
    }
    if (message.challReward !== false) {
      obj.challReward = message.challReward;
    }
    if (message.snsReq !== false) {
      obj.snsReq = message.snsReq;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.switches !== false) {
      obj.switches = message.switches;
    }
    if (message.sweep !== false) {
      obj.sweep = message.sweep;
    }
    if (message.questionnarie !== false) {
      obj.questionnarie = message.questionnarie;
    }
    if (message.kingContract !== false) {
      obj.kingContract = message.kingContract;
    }
    if (message.rebateCharge !== false) {
      obj.rebateCharge = message.rebateCharge;
    }
    if (message.rebateConsum !== false) {
      obj.rebateConsum = message.rebateConsum;
    }
    if (message.sumActive !== false) {
      obj.sumActive = message.sumActive;
    }
    if (message.crossScoreReward !== false) {
      obj.crossScoreReward = message.crossScoreReward;
    }
    if (message.appell !== false) {
      obj.appell = message.appell;
    }
    if (message.bottle !== false) {
      obj.bottle = message.bottle;
    }
    if (message.petChallengeReward !== false) {
      obj.petChallengeReward = message.petChallengeReward;
    }
    if (message.powcardInfo !== false) {
      obj.powcardInfo = message.powcardInfo;
    }
    if (message.christmas !== false) {
      obj.christmas = message.christmas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerDataMsg>, I>>(base?: I): PlayerDataMsg {
    return PlayerDataMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerDataMsg>, I>>(object: I): PlayerDataMsg {
    const message = createBasePlayerDataMsg();
    message.user = object.user ?? false;
    message.castle = object.castle ?? false;
    message.army = object.army ?? false;
    message.quest = object.quest ?? false;
    message.build = object.build ?? false;
    message.tree = object.tree ?? false;
    message.aas = object.aas ?? false;
    message.smith = object.smith ?? false;
    message.bag = object.bag ?? false;
    message.leed = object.leed ?? false;
    message.star = object.star ?? false;
    message.friend = object.friend ?? false;
    message.effect = object.effect ?? false;
    message.sys = object.sys ?? false;
    message.offline = object.offline ?? false;
    message.reward = object.reward ?? false;
    message.tower = object.tower ?? false;
    message.shop = object.shop ?? false;
    message.challReward = object.challReward ?? false;
    message.snsReq = object.snsReq ?? false;
    message.active = object.active ?? false;
    message.switches = object.switches ?? false;
    message.sweep = object.sweep ?? false;
    message.questionnarie = object.questionnarie ?? false;
    message.kingContract = object.kingContract ?? false;
    message.rebateCharge = object.rebateCharge ?? false;
    message.rebateConsum = object.rebateConsum ?? false;
    message.sumActive = object.sumActive ?? false;
    message.crossScoreReward = object.crossScoreReward ?? false;
    message.appell = object.appell ?? false;
    message.bottle = object.bottle ?? false;
    message.petChallengeReward = object.petChallengeReward ?? false;
    message.powcardInfo = object.powcardInfo ?? false;
    message.christmas = object.christmas ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
