// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: remotepet/FriendPetMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.remotepet";

export interface FriendPetMsg {
  friendId: number;
  petId: number;
  petFight: number;
  petQuality: number;
  petType: number;
  petName: string;
  friendName: string;
  petTempId: number;
}

function createBaseFriendPetMsg(): FriendPetMsg {
  return { friendId: 0, petId: 0, petFight: 0, petQuality: 0, petType: 0, petName: "", friendName: "", petTempId: 0 };
}

export const FriendPetMsg: MessageFns<FriendPetMsg> = {
  encode(message: FriendPetMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.friendId !== 0) {
      writer.uint32(8).int32(message.friendId);
    }
    if (message.petId !== 0) {
      writer.uint32(16).int32(message.petId);
    }
    if (message.petFight !== 0) {
      writer.uint32(24).int32(message.petFight);
    }
    if (message.petQuality !== 0) {
      writer.uint32(32).int32(message.petQuality);
    }
    if (message.petType !== 0) {
      writer.uint32(40).int32(message.petType);
    }
    if (message.petName !== "") {
      writer.uint32(50).string(message.petName);
    }
    if (message.friendName !== "") {
      writer.uint32(58).string(message.friendName);
    }
    if (message.petTempId !== 0) {
      writer.uint32(64).int32(message.petTempId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendPetMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendPetMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.friendId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.petId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.petFight = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.petQuality = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.petType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.friendName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.petTempId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendPetMsg {
    return {
      friendId: isSet(object.friendId) ? globalThis.Number(object.friendId) : 0,
      petId: isSet(object.petId) ? globalThis.Number(object.petId) : 0,
      petFight: isSet(object.petFight) ? globalThis.Number(object.petFight) : 0,
      petQuality: isSet(object.petQuality) ? globalThis.Number(object.petQuality) : 0,
      petType: isSet(object.petType) ? globalThis.Number(object.petType) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      friendName: isSet(object.friendName) ? globalThis.String(object.friendName) : "",
      petTempId: isSet(object.petTempId) ? globalThis.Number(object.petTempId) : 0,
    };
  },

  toJSON(message: FriendPetMsg): unknown {
    const obj: any = {};
    if (message.friendId !== 0) {
      obj.friendId = Math.round(message.friendId);
    }
    if (message.petId !== 0) {
      obj.petId = Math.round(message.petId);
    }
    if (message.petFight !== 0) {
      obj.petFight = Math.round(message.petFight);
    }
    if (message.petQuality !== 0) {
      obj.petQuality = Math.round(message.petQuality);
    }
    if (message.petType !== 0) {
      obj.petType = Math.round(message.petType);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.friendName !== "") {
      obj.friendName = message.friendName;
    }
    if (message.petTempId !== 0) {
      obj.petTempId = Math.round(message.petTempId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendPetMsg>, I>>(base?: I): FriendPetMsg {
    return FriendPetMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendPetMsg>, I>>(object: I): FriendPetMsg {
    const message = createBaseFriendPetMsg();
    message.friendId = object.friendId ?? 0;
    message.petId = object.petId ?? 0;
    message.petFight = object.petFight ?? 0;
    message.petQuality = object.petQuality ?? 0;
    message.petType = object.petType ?? 0;
    message.petName = object.petName ?? "";
    message.friendName = object.friendName ?? "";
    message.petTempId = object.petTempId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
