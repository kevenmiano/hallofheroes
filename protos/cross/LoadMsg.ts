// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cross/LoadMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cross";

export interface LoadMsg {
  serverId: number;
  serverName: string;
  load: number;
  address: string;
  port: number;
  userServerName: string;
  type: number;
  connTimes: number;
  crossActionMsg: string;
  index: number;
}

function createBaseLoadMsg(): LoadMsg {
  return {
    serverId: 0,
    serverName: "",
    load: 0,
    address: "",
    port: 0,
    userServerName: "",
    type: 0,
    connTimes: 0,
    crossActionMsg: "",
    index: 0,
  };
}

export const LoadMsg: MessageFns<LoadMsg> = {
  encode(message: LoadMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverId !== 0) {
      writer.uint32(8).int32(message.serverId);
    }
    if (message.serverName !== "") {
      writer.uint32(18).string(message.serverName);
    }
    if (message.load !== 0) {
      writer.uint32(24).int32(message.load);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    if (message.port !== 0) {
      writer.uint32(40).int32(message.port);
    }
    if (message.userServerName !== "") {
      writer.uint32(50).string(message.userServerName);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.connTimes !== 0) {
      writer.uint32(64).int32(message.connTimes);
    }
    if (message.crossActionMsg !== "") {
      writer.uint32(74).string(message.crossActionMsg);
    }
    if (message.index !== 0) {
      writer.uint32(80).int32(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serverId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.load = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.port = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userServerName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.connTimes = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.crossActionMsg = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadMsg {
    return {
      serverId: isSet(object.serverId) ? globalThis.Number(object.serverId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      load: isSet(object.load) ? globalThis.Number(object.load) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      userServerName: isSet(object.userServerName) ? globalThis.String(object.userServerName) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      connTimes: isSet(object.connTimes) ? globalThis.Number(object.connTimes) : 0,
      crossActionMsg: isSet(object.crossActionMsg) ? globalThis.String(object.crossActionMsg) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: LoadMsg): unknown {
    const obj: any = {};
    if (message.serverId !== 0) {
      obj.serverId = Math.round(message.serverId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.load !== 0) {
      obj.load = Math.round(message.load);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.userServerName !== "") {
      obj.userServerName = message.userServerName;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.connTimes !== 0) {
      obj.connTimes = Math.round(message.connTimes);
    }
    if (message.crossActionMsg !== "") {
      obj.crossActionMsg = message.crossActionMsg;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadMsg>, I>>(base?: I): LoadMsg {
    return LoadMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadMsg>, I>>(object: I): LoadMsg {
    const message = createBaseLoadMsg();
    message.serverId = object.serverId ?? 0;
    message.serverName = object.serverName ?? "";
    message.load = object.load ?? 0;
    message.address = object.address ?? "";
    message.port = object.port ?? 0;
    message.userServerName = object.userServerName ?? "";
    message.type = object.type ?? 0;
    message.connTimes = object.connTimes ?? 0;
    message.crossActionMsg = object.crossActionMsg ?? "";
    message.index = object.index ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
