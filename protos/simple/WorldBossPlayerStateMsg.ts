// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/WorldBossPlayerStateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface WorldBossPlayerStateMsg {
  armyId: number;
  state: number;
  leftTime: number;
  serverName: string;
}

function createBaseWorldBossPlayerStateMsg(): WorldBossPlayerStateMsg {
  return { armyId: 0, state: 0, leftTime: 0, serverName: "" };
}

export const WorldBossPlayerStateMsg: MessageFns<WorldBossPlayerStateMsg> = {
  encode(message: WorldBossPlayerStateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.armyId !== 0) {
      writer.uint32(8).int32(message.armyId);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.leftTime !== 0) {
      writer.uint32(24).int32(message.leftTime);
    }
    if (message.serverName !== "") {
      writer.uint32(34).string(message.serverName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorldBossPlayerStateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorldBossPlayerStateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorldBossPlayerStateMsg {
    return {
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
    };
  },

  toJSON(message: WorldBossPlayerStateMsg): unknown {
    const obj: any = {};
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorldBossPlayerStateMsg>, I>>(base?: I): WorldBossPlayerStateMsg {
    return WorldBossPlayerStateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorldBossPlayerStateMsg>, I>>(object: I): WorldBossPlayerStateMsg {
    const message = createBaseWorldBossPlayerStateMsg();
    message.armyId = object.armyId ?? 0;
    message.state = object.state ?? 0;
    message.leftTime = object.leftTime ?? 0;
    message.serverName = object.serverName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
