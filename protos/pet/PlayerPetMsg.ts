// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: pet/PlayerPetMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.pet";

export interface PlayerPetMsg {
  userId: number;
  petInfo: number[];
  nickName: string;
  order: number;
  chaPos: string;
  score: number;
  petCount: number;
  op: number;
  fightIndex: string;
}

function createBasePlayerPetMsg(): PlayerPetMsg {
  return { userId: 0, petInfo: [], nickName: "", order: 0, chaPos: "", score: 0, petCount: 0, op: 0, fightIndex: "" };
}

export const PlayerPetMsg: MessageFns<PlayerPetMsg> = {
  encode(message: PlayerPetMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    writer.uint32(18).fork();
    for (const v of message.petInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.order !== 0) {
      writer.uint32(32).int32(message.order);
    }
    if (message.chaPos !== "") {
      writer.uint32(42).string(message.chaPos);
    }
    if (message.score !== 0) {
      writer.uint32(48).int32(message.score);
    }
    if (message.petCount !== 0) {
      writer.uint32(56).int32(message.petCount);
    }
    if (message.op !== 0) {
      writer.uint32(64).int32(message.op);
    }
    if (message.fightIndex !== "") {
      writer.uint32(74).string(message.fightIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerPetMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerPetMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.petInfo.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.petInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chaPos = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.petCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fightIndex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerPetMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      petInfo: globalThis.Array.isArray(object?.petInfo) ? object.petInfo.map((e: any) => globalThis.Number(e)) : [],
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      chaPos: isSet(object.chaPos) ? globalThis.String(object.chaPos) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      petCount: isSet(object.petCount) ? globalThis.Number(object.petCount) : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      fightIndex: isSet(object.fightIndex) ? globalThis.String(object.fightIndex) : "",
    };
  },

  toJSON(message: PlayerPetMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.petInfo?.length) {
      obj.petInfo = message.petInfo.map((e) => Math.round(e));
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.chaPos !== "") {
      obj.chaPos = message.chaPos;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.petCount !== 0) {
      obj.petCount = Math.round(message.petCount);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.fightIndex !== "") {
      obj.fightIndex = message.fightIndex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerPetMsg>, I>>(base?: I): PlayerPetMsg {
    return PlayerPetMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerPetMsg>, I>>(object: I): PlayerPetMsg {
    const message = createBasePlayerPetMsg();
    message.userId = object.userId ?? 0;
    message.petInfo = object.petInfo?.map((e) => e) || [];
    message.nickName = object.nickName ?? "";
    message.order = object.order ?? 0;
    message.chaPos = object.chaPos ?? "";
    message.score = object.score ?? 0;
    message.petCount = object.petCount ?? 0;
    message.op = object.op ?? 0;
    message.fightIndex = object.fightIndex ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
