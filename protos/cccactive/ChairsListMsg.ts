// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ChairsListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ChairsListMsg {
  op: number;
  totalChairsCount: number;
  reward: number[];
  charge: number[];
  userId: number;
  luckyNickName: number[];
  currentChairs: number;
  rewardCounts: number;
  rewardNeedChairs: number;
  chairsNeedPoints: number;
  openTime: string;
  stopTime: string;
  chairsNum: string;
  luckyItems: number[];
  comfortItems: number[];
  leftPoint: number;
  isLucky: boolean;
}

function createBaseChairsListMsg(): ChairsListMsg {
  return {
    op: 0,
    totalChairsCount: 0,
    reward: [],
    charge: [],
    userId: 0,
    luckyNickName: [],
    currentChairs: 0,
    rewardCounts: 0,
    rewardNeedChairs: 0,
    chairsNeedPoints: 0,
    openTime: "",
    stopTime: "",
    chairsNum: "",
    luckyItems: [],
    comfortItems: [],
    leftPoint: 0,
    isLucky: false,
  };
}

export const ChairsListMsg: MessageFns<ChairsListMsg> = {
  encode(message: ChairsListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.totalChairsCount !== 0) {
      writer.uint32(16).int32(message.totalChairsCount);
    }
    writer.uint32(26).fork();
    for (const v of message.reward) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.charge) {
      writer.int32(v);
    }
    writer.join();
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    writer.uint32(50).fork();
    for (const v of message.luckyNickName) {
      writer.int32(v);
    }
    writer.join();
    if (message.currentChairs !== 0) {
      writer.uint32(56).int32(message.currentChairs);
    }
    if (message.rewardCounts !== 0) {
      writer.uint32(64).int32(message.rewardCounts);
    }
    if (message.rewardNeedChairs !== 0) {
      writer.uint32(72).int32(message.rewardNeedChairs);
    }
    if (message.chairsNeedPoints !== 0) {
      writer.uint32(80).int32(message.chairsNeedPoints);
    }
    if (message.openTime !== "") {
      writer.uint32(90).string(message.openTime);
    }
    if (message.stopTime !== "") {
      writer.uint32(98).string(message.stopTime);
    }
    if (message.chairsNum !== "") {
      writer.uint32(106).string(message.chairsNum);
    }
    writer.uint32(114).fork();
    for (const v of message.luckyItems) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(122).fork();
    for (const v of message.comfortItems) {
      writer.int32(v);
    }
    writer.join();
    if (message.leftPoint !== 0) {
      writer.uint32(128).int32(message.leftPoint);
    }
    if (message.isLucky !== false) {
      writer.uint32(136).bool(message.isLucky);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChairsListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChairsListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalChairsCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.reward.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.reward.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.charge.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.charge.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.luckyNickName.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.luckyNickName.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.currentChairs = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.rewardCounts = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.rewardNeedChairs = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.chairsNeedPoints = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.openTime = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.stopTime = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.chairsNum = reader.string();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.luckyItems.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.luckyItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag === 120) {
            message.comfortItems.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.comfortItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.leftPoint = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.isLucky = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChairsListMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      totalChairsCount: isSet(object.totalChairsCount) ? globalThis.Number(object.totalChairsCount) : 0,
      reward: globalThis.Array.isArray(object?.reward) ? object.reward.map((e: any) => globalThis.Number(e)) : [],
      charge: globalThis.Array.isArray(object?.charge) ? object.charge.map((e: any) => globalThis.Number(e)) : [],
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      luckyNickName: globalThis.Array.isArray(object?.luckyNickName)
        ? object.luckyNickName.map((e: any) => globalThis.Number(e))
        : [],
      currentChairs: isSet(object.currentChairs) ? globalThis.Number(object.currentChairs) : 0,
      rewardCounts: isSet(object.rewardCounts) ? globalThis.Number(object.rewardCounts) : 0,
      rewardNeedChairs: isSet(object.rewardNeedChairs) ? globalThis.Number(object.rewardNeedChairs) : 0,
      chairsNeedPoints: isSet(object.chairsNeedPoints) ? globalThis.Number(object.chairsNeedPoints) : 0,
      openTime: isSet(object.openTime) ? globalThis.String(object.openTime) : "",
      stopTime: isSet(object.stopTime) ? globalThis.String(object.stopTime) : "",
      chairsNum: isSet(object.chairsNum) ? globalThis.String(object.chairsNum) : "",
      luckyItems: globalThis.Array.isArray(object?.luckyItems)
        ? object.luckyItems.map((e: any) => globalThis.Number(e))
        : [],
      comfortItems: globalThis.Array.isArray(object?.comfortItems)
        ? object.comfortItems.map((e: any) => globalThis.Number(e))
        : [],
      leftPoint: isSet(object.leftPoint) ? globalThis.Number(object.leftPoint) : 0,
      isLucky: isSet(object.isLucky) ? globalThis.Boolean(object.isLucky) : false,
    };
  },

  toJSON(message: ChairsListMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.totalChairsCount !== 0) {
      obj.totalChairsCount = Math.round(message.totalChairsCount);
    }
    if (message.reward?.length) {
      obj.reward = message.reward.map((e) => Math.round(e));
    }
    if (message.charge?.length) {
      obj.charge = message.charge.map((e) => Math.round(e));
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.luckyNickName?.length) {
      obj.luckyNickName = message.luckyNickName.map((e) => Math.round(e));
    }
    if (message.currentChairs !== 0) {
      obj.currentChairs = Math.round(message.currentChairs);
    }
    if (message.rewardCounts !== 0) {
      obj.rewardCounts = Math.round(message.rewardCounts);
    }
    if (message.rewardNeedChairs !== 0) {
      obj.rewardNeedChairs = Math.round(message.rewardNeedChairs);
    }
    if (message.chairsNeedPoints !== 0) {
      obj.chairsNeedPoints = Math.round(message.chairsNeedPoints);
    }
    if (message.openTime !== "") {
      obj.openTime = message.openTime;
    }
    if (message.stopTime !== "") {
      obj.stopTime = message.stopTime;
    }
    if (message.chairsNum !== "") {
      obj.chairsNum = message.chairsNum;
    }
    if (message.luckyItems?.length) {
      obj.luckyItems = message.luckyItems.map((e) => Math.round(e));
    }
    if (message.comfortItems?.length) {
      obj.comfortItems = message.comfortItems.map((e) => Math.round(e));
    }
    if (message.leftPoint !== 0) {
      obj.leftPoint = Math.round(message.leftPoint);
    }
    if (message.isLucky !== false) {
      obj.isLucky = message.isLucky;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChairsListMsg>, I>>(base?: I): ChairsListMsg {
    return ChairsListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChairsListMsg>, I>>(object: I): ChairsListMsg {
    const message = createBaseChairsListMsg();
    message.op = object.op ?? 0;
    message.totalChairsCount = object.totalChairsCount ?? 0;
    message.reward = object.reward?.map((e) => e) || [];
    message.charge = object.charge?.map((e) => e) || [];
    message.userId = object.userId ?? 0;
    message.luckyNickName = object.luckyNickName?.map((e) => e) || [];
    message.currentChairs = object.currentChairs ?? 0;
    message.rewardCounts = object.rewardCounts ?? 0;
    message.rewardNeedChairs = object.rewardNeedChairs ?? 0;
    message.chairsNeedPoints = object.chairsNeedPoints ?? 0;
    message.openTime = object.openTime ?? "";
    message.stopTime = object.stopTime ?? "";
    message.chairsNum = object.chairsNum ?? "";
    message.luckyItems = object.luckyItems?.map((e) => e) || [];
    message.comfortItems = object.comfortItems?.map((e) => e) || [];
    message.leftPoint = object.leftPoint ?? 0;
    message.isLucky = object.isLucky ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
