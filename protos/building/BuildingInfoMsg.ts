// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: building/BuildingInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.building";

export interface BuildingInfoMsg {
  userId: number;
  buildingId: number;
  castleId: number;
  createdDate: string;
  isExist: boolean;
  templateId: number;
  sonType: number;
  propterty1: number;
  propterty2: number;
  levyNum: number;
}

function createBaseBuildingInfoMsg(): BuildingInfoMsg {
  return {
    userId: 0,
    buildingId: 0,
    castleId: 0,
    createdDate: "",
    isExist: false,
    templateId: 0,
    sonType: 0,
    propterty1: 0,
    propterty2: 0,
    levyNum: 0,
  };
}

export const BuildingInfoMsg: MessageFns<BuildingInfoMsg> = {
  encode(message: BuildingInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.buildingId !== 0) {
      writer.uint32(16).int32(message.buildingId);
    }
    if (message.castleId !== 0) {
      writer.uint32(24).int32(message.castleId);
    }
    if (message.createdDate !== "") {
      writer.uint32(34).string(message.createdDate);
    }
    if (message.isExist !== false) {
      writer.uint32(40).bool(message.isExist);
    }
    if (message.templateId !== 0) {
      writer.uint32(48).int32(message.templateId);
    }
    if (message.sonType !== 0) {
      writer.uint32(56).int32(message.sonType);
    }
    if (message.propterty1 !== 0) {
      writer.uint32(64).int32(message.propterty1);
    }
    if (message.propterty2 !== 0) {
      writer.uint32(72).int32(message.propterty2);
    }
    if (message.levyNum !== 0) {
      writer.uint32(80).int32(message.levyNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildingInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildingInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.buildingId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.castleId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sonType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.propterty1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.propterty2 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.levyNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildingInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      buildingId: isSet(object.buildingId) ? globalThis.Number(object.buildingId) : 0,
      castleId: isSet(object.castleId) ? globalThis.Number(object.castleId) : 0,
      createdDate: isSet(object.createdDate) ? globalThis.String(object.createdDate) : "",
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      sonType: isSet(object.sonType) ? globalThis.Number(object.sonType) : 0,
      propterty1: isSet(object.propterty1) ? globalThis.Number(object.propterty1) : 0,
      propterty2: isSet(object.propterty2) ? globalThis.Number(object.propterty2) : 0,
      levyNum: isSet(object.levyNum) ? globalThis.Number(object.levyNum) : 0,
    };
  },

  toJSON(message: BuildingInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.buildingId !== 0) {
      obj.buildingId = Math.round(message.buildingId);
    }
    if (message.castleId !== 0) {
      obj.castleId = Math.round(message.castleId);
    }
    if (message.createdDate !== "") {
      obj.createdDate = message.createdDate;
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.sonType !== 0) {
      obj.sonType = Math.round(message.sonType);
    }
    if (message.propterty1 !== 0) {
      obj.propterty1 = Math.round(message.propterty1);
    }
    if (message.propterty2 !== 0) {
      obj.propterty2 = Math.round(message.propterty2);
    }
    if (message.levyNum !== 0) {
      obj.levyNum = Math.round(message.levyNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildingInfoMsg>, I>>(base?: I): BuildingInfoMsg {
    return BuildingInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildingInfoMsg>, I>>(object: I): BuildingInfoMsg {
    const message = createBaseBuildingInfoMsg();
    message.userId = object.userId ?? 0;
    message.buildingId = object.buildingId ?? 0;
    message.castleId = object.castleId ?? 0;
    message.createdDate = object.createdDate ?? "";
    message.isExist = object.isExist ?? false;
    message.templateId = object.templateId ?? 0;
    message.sonType = object.sonType ?? 0;
    message.propterty1 = object.propterty1 ?? 0;
    message.propterty2 = object.propterty2 ?? 0;
    message.levyNum = object.levyNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
