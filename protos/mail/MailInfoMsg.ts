// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: mail/MailInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.mail";

export interface MailInfoMsg {
  id: number;
  mailType: number;
  sendId: number;
  sendNickName: string;
  receiveId: number;
  receiveNickName: string;
  sendDate: string;
  readDate: string;
  title: string;
  contents: string;
  removeDate: string;
  validityDate: number;
  annex1: number;
  annex1Name: number;
  annex1Count: number;
  isAnnex1: boolean;
  annex2: number;
  annex2Name: number;
  annex2Count: number;
  isAnnex2: boolean;
  annex3: number;
  annex3Name: number;
  annex3Count: number;
  isAnnex3: boolean;
  annex4: number;
  annex4Name: number;
  annex4Count: number;
  isAnnex4: boolean;
  annex5: number;
  annex5Name: number;
  annex5Count: number;
  isAnnex5: boolean;
  isExist: boolean;
  sendType: number;
  sendPlayerGrades: number;
  params: string;
  annex1Grade: number;
  annex2Grade: number;
  annex3Grade: number;
  annex4Grade: number;
  annex5Grade: number;
}

function createBaseMailInfoMsg(): MailInfoMsg {
  return {
    id: 0,
    mailType: 0,
    sendId: 0,
    sendNickName: "",
    receiveId: 0,
    receiveNickName: "",
    sendDate: "",
    readDate: "",
    title: "",
    contents: "",
    removeDate: "",
    validityDate: 0,
    annex1: 0,
    annex1Name: 0,
    annex1Count: 0,
    isAnnex1: false,
    annex2: 0,
    annex2Name: 0,
    annex2Count: 0,
    isAnnex2: false,
    annex3: 0,
    annex3Name: 0,
    annex3Count: 0,
    isAnnex3: false,
    annex4: 0,
    annex4Name: 0,
    annex4Count: 0,
    isAnnex4: false,
    annex5: 0,
    annex5Name: 0,
    annex5Count: 0,
    isAnnex5: false,
    isExist: false,
    sendType: 0,
    sendPlayerGrades: 0,
    params: "",
    annex1Grade: 0,
    annex2Grade: 0,
    annex3Grade: 0,
    annex4Grade: 0,
    annex5Grade: 0,
  };
}

export const MailInfoMsg: MessageFns<MailInfoMsg> = {
  encode(message: MailInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.mailType !== 0) {
      writer.uint32(16).int32(message.mailType);
    }
    if (message.sendId !== 0) {
      writer.uint32(24).int32(message.sendId);
    }
    if (message.sendNickName !== "") {
      writer.uint32(34).string(message.sendNickName);
    }
    if (message.receiveId !== 0) {
      writer.uint32(40).int32(message.receiveId);
    }
    if (message.receiveNickName !== "") {
      writer.uint32(50).string(message.receiveNickName);
    }
    if (message.sendDate !== "") {
      writer.uint32(58).string(message.sendDate);
    }
    if (message.readDate !== "") {
      writer.uint32(66).string(message.readDate);
    }
    if (message.title !== "") {
      writer.uint32(74).string(message.title);
    }
    if (message.contents !== "") {
      writer.uint32(82).string(message.contents);
    }
    if (message.removeDate !== "") {
      writer.uint32(90).string(message.removeDate);
    }
    if (message.validityDate !== 0) {
      writer.uint32(96).int32(message.validityDate);
    }
    if (message.annex1 !== 0) {
      writer.uint32(104).int32(message.annex1);
    }
    if (message.annex1Name !== 0) {
      writer.uint32(112).int32(message.annex1Name);
    }
    if (message.annex1Count !== 0) {
      writer.uint32(120).int32(message.annex1Count);
    }
    if (message.isAnnex1 !== false) {
      writer.uint32(128).bool(message.isAnnex1);
    }
    if (message.annex2 !== 0) {
      writer.uint32(136).int32(message.annex2);
    }
    if (message.annex2Name !== 0) {
      writer.uint32(144).int32(message.annex2Name);
    }
    if (message.annex2Count !== 0) {
      writer.uint32(152).int32(message.annex2Count);
    }
    if (message.isAnnex2 !== false) {
      writer.uint32(160).bool(message.isAnnex2);
    }
    if (message.annex3 !== 0) {
      writer.uint32(168).int32(message.annex3);
    }
    if (message.annex3Name !== 0) {
      writer.uint32(176).int32(message.annex3Name);
    }
    if (message.annex3Count !== 0) {
      writer.uint32(184).int32(message.annex3Count);
    }
    if (message.isAnnex3 !== false) {
      writer.uint32(192).bool(message.isAnnex3);
    }
    if (message.annex4 !== 0) {
      writer.uint32(200).int32(message.annex4);
    }
    if (message.annex4Name !== 0) {
      writer.uint32(208).int32(message.annex4Name);
    }
    if (message.annex4Count !== 0) {
      writer.uint32(216).int32(message.annex4Count);
    }
    if (message.isAnnex4 !== false) {
      writer.uint32(224).bool(message.isAnnex4);
    }
    if (message.annex5 !== 0) {
      writer.uint32(232).int32(message.annex5);
    }
    if (message.annex5Name !== 0) {
      writer.uint32(240).int32(message.annex5Name);
    }
    if (message.annex5Count !== 0) {
      writer.uint32(248).int32(message.annex5Count);
    }
    if (message.isAnnex5 !== false) {
      writer.uint32(256).bool(message.isAnnex5);
    }
    if (message.isExist !== false) {
      writer.uint32(264).bool(message.isExist);
    }
    if (message.sendType !== 0) {
      writer.uint32(272).int32(message.sendType);
    }
    if (message.sendPlayerGrades !== 0) {
      writer.uint32(280).int32(message.sendPlayerGrades);
    }
    if (message.params !== "") {
      writer.uint32(290).string(message.params);
    }
    if (message.annex1Grade !== 0) {
      writer.uint32(296).int32(message.annex1Grade);
    }
    if (message.annex2Grade !== 0) {
      writer.uint32(304).int32(message.annex2Grade);
    }
    if (message.annex3Grade !== 0) {
      writer.uint32(312).int32(message.annex3Grade);
    }
    if (message.annex4Grade !== 0) {
      writer.uint32(320).int32(message.annex4Grade);
    }
    if (message.annex5Grade !== 0) {
      writer.uint32(328).int32(message.annex5Grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MailInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMailInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mailType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sendId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sendNickName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.receiveId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.receiveNickName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sendDate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.readDate = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.contents = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.removeDate = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.validityDate = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.annex1 = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.annex1Name = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.annex1Count = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.isAnnex1 = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.annex2 = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.annex2Name = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.annex2Count = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.isAnnex2 = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.annex3 = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.annex3Name = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.annex3Count = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.isAnnex3 = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.annex4 = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.annex4Name = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.annex4Count = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.isAnnex4 = reader.bool();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.annex5 = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.annex5Name = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.annex5Count = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.isAnnex5 = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.sendType = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.sendPlayerGrades = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.params = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.annex1Grade = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.annex2Grade = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.annex3Grade = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.annex4Grade = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.annex5Grade = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MailInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      mailType: isSet(object.mailType) ? globalThis.Number(object.mailType) : 0,
      sendId: isSet(object.sendId) ? globalThis.Number(object.sendId) : 0,
      sendNickName: isSet(object.sendNickName) ? globalThis.String(object.sendNickName) : "",
      receiveId: isSet(object.receiveId) ? globalThis.Number(object.receiveId) : 0,
      receiveNickName: isSet(object.receiveNickName) ? globalThis.String(object.receiveNickName) : "",
      sendDate: isSet(object.sendDate) ? globalThis.String(object.sendDate) : "",
      readDate: isSet(object.readDate) ? globalThis.String(object.readDate) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      contents: isSet(object.contents) ? globalThis.String(object.contents) : "",
      removeDate: isSet(object.removeDate) ? globalThis.String(object.removeDate) : "",
      validityDate: isSet(object.validityDate) ? globalThis.Number(object.validityDate) : 0,
      annex1: isSet(object.annex1) ? globalThis.Number(object.annex1) : 0,
      annex1Name: isSet(object.annex1Name) ? globalThis.Number(object.annex1Name) : 0,
      annex1Count: isSet(object.annex1Count) ? globalThis.Number(object.annex1Count) : 0,
      isAnnex1: isSet(object.isAnnex1) ? globalThis.Boolean(object.isAnnex1) : false,
      annex2: isSet(object.annex2) ? globalThis.Number(object.annex2) : 0,
      annex2Name: isSet(object.annex2Name) ? globalThis.Number(object.annex2Name) : 0,
      annex2Count: isSet(object.annex2Count) ? globalThis.Number(object.annex2Count) : 0,
      isAnnex2: isSet(object.isAnnex2) ? globalThis.Boolean(object.isAnnex2) : false,
      annex3: isSet(object.annex3) ? globalThis.Number(object.annex3) : 0,
      annex3Name: isSet(object.annex3Name) ? globalThis.Number(object.annex3Name) : 0,
      annex3Count: isSet(object.annex3Count) ? globalThis.Number(object.annex3Count) : 0,
      isAnnex3: isSet(object.isAnnex3) ? globalThis.Boolean(object.isAnnex3) : false,
      annex4: isSet(object.annex4) ? globalThis.Number(object.annex4) : 0,
      annex4Name: isSet(object.annex4Name) ? globalThis.Number(object.annex4Name) : 0,
      annex4Count: isSet(object.annex4Count) ? globalThis.Number(object.annex4Count) : 0,
      isAnnex4: isSet(object.isAnnex4) ? globalThis.Boolean(object.isAnnex4) : false,
      annex5: isSet(object.annex5) ? globalThis.Number(object.annex5) : 0,
      annex5Name: isSet(object.annex5Name) ? globalThis.Number(object.annex5Name) : 0,
      annex5Count: isSet(object.annex5Count) ? globalThis.Number(object.annex5Count) : 0,
      isAnnex5: isSet(object.isAnnex5) ? globalThis.Boolean(object.isAnnex5) : false,
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      sendType: isSet(object.sendType) ? globalThis.Number(object.sendType) : 0,
      sendPlayerGrades: isSet(object.sendPlayerGrades) ? globalThis.Number(object.sendPlayerGrades) : 0,
      params: isSet(object.params) ? globalThis.String(object.params) : "",
      annex1Grade: isSet(object.annex1Grade) ? globalThis.Number(object.annex1Grade) : 0,
      annex2Grade: isSet(object.annex2Grade) ? globalThis.Number(object.annex2Grade) : 0,
      annex3Grade: isSet(object.annex3Grade) ? globalThis.Number(object.annex3Grade) : 0,
      annex4Grade: isSet(object.annex4Grade) ? globalThis.Number(object.annex4Grade) : 0,
      annex5Grade: isSet(object.annex5Grade) ? globalThis.Number(object.annex5Grade) : 0,
    };
  },

  toJSON(message: MailInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.mailType !== 0) {
      obj.mailType = Math.round(message.mailType);
    }
    if (message.sendId !== 0) {
      obj.sendId = Math.round(message.sendId);
    }
    if (message.sendNickName !== "") {
      obj.sendNickName = message.sendNickName;
    }
    if (message.receiveId !== 0) {
      obj.receiveId = Math.round(message.receiveId);
    }
    if (message.receiveNickName !== "") {
      obj.receiveNickName = message.receiveNickName;
    }
    if (message.sendDate !== "") {
      obj.sendDate = message.sendDate;
    }
    if (message.readDate !== "") {
      obj.readDate = message.readDate;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.contents !== "") {
      obj.contents = message.contents;
    }
    if (message.removeDate !== "") {
      obj.removeDate = message.removeDate;
    }
    if (message.validityDate !== 0) {
      obj.validityDate = Math.round(message.validityDate);
    }
    if (message.annex1 !== 0) {
      obj.annex1 = Math.round(message.annex1);
    }
    if (message.annex1Name !== 0) {
      obj.annex1Name = Math.round(message.annex1Name);
    }
    if (message.annex1Count !== 0) {
      obj.annex1Count = Math.round(message.annex1Count);
    }
    if (message.isAnnex1 !== false) {
      obj.isAnnex1 = message.isAnnex1;
    }
    if (message.annex2 !== 0) {
      obj.annex2 = Math.round(message.annex2);
    }
    if (message.annex2Name !== 0) {
      obj.annex2Name = Math.round(message.annex2Name);
    }
    if (message.annex2Count !== 0) {
      obj.annex2Count = Math.round(message.annex2Count);
    }
    if (message.isAnnex2 !== false) {
      obj.isAnnex2 = message.isAnnex2;
    }
    if (message.annex3 !== 0) {
      obj.annex3 = Math.round(message.annex3);
    }
    if (message.annex3Name !== 0) {
      obj.annex3Name = Math.round(message.annex3Name);
    }
    if (message.annex3Count !== 0) {
      obj.annex3Count = Math.round(message.annex3Count);
    }
    if (message.isAnnex3 !== false) {
      obj.isAnnex3 = message.isAnnex3;
    }
    if (message.annex4 !== 0) {
      obj.annex4 = Math.round(message.annex4);
    }
    if (message.annex4Name !== 0) {
      obj.annex4Name = Math.round(message.annex4Name);
    }
    if (message.annex4Count !== 0) {
      obj.annex4Count = Math.round(message.annex4Count);
    }
    if (message.isAnnex4 !== false) {
      obj.isAnnex4 = message.isAnnex4;
    }
    if (message.annex5 !== 0) {
      obj.annex5 = Math.round(message.annex5);
    }
    if (message.annex5Name !== 0) {
      obj.annex5Name = Math.round(message.annex5Name);
    }
    if (message.annex5Count !== 0) {
      obj.annex5Count = Math.round(message.annex5Count);
    }
    if (message.isAnnex5 !== false) {
      obj.isAnnex5 = message.isAnnex5;
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.sendType !== 0) {
      obj.sendType = Math.round(message.sendType);
    }
    if (message.sendPlayerGrades !== 0) {
      obj.sendPlayerGrades = Math.round(message.sendPlayerGrades);
    }
    if (message.params !== "") {
      obj.params = message.params;
    }
    if (message.annex1Grade !== 0) {
      obj.annex1Grade = Math.round(message.annex1Grade);
    }
    if (message.annex2Grade !== 0) {
      obj.annex2Grade = Math.round(message.annex2Grade);
    }
    if (message.annex3Grade !== 0) {
      obj.annex3Grade = Math.round(message.annex3Grade);
    }
    if (message.annex4Grade !== 0) {
      obj.annex4Grade = Math.round(message.annex4Grade);
    }
    if (message.annex5Grade !== 0) {
      obj.annex5Grade = Math.round(message.annex5Grade);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MailInfoMsg>, I>>(base?: I): MailInfoMsg {
    return MailInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MailInfoMsg>, I>>(object: I): MailInfoMsg {
    const message = createBaseMailInfoMsg();
    message.id = object.id ?? 0;
    message.mailType = object.mailType ?? 0;
    message.sendId = object.sendId ?? 0;
    message.sendNickName = object.sendNickName ?? "";
    message.receiveId = object.receiveId ?? 0;
    message.receiveNickName = object.receiveNickName ?? "";
    message.sendDate = object.sendDate ?? "";
    message.readDate = object.readDate ?? "";
    message.title = object.title ?? "";
    message.contents = object.contents ?? "";
    message.removeDate = object.removeDate ?? "";
    message.validityDate = object.validityDate ?? 0;
    message.annex1 = object.annex1 ?? 0;
    message.annex1Name = object.annex1Name ?? 0;
    message.annex1Count = object.annex1Count ?? 0;
    message.isAnnex1 = object.isAnnex1 ?? false;
    message.annex2 = object.annex2 ?? 0;
    message.annex2Name = object.annex2Name ?? 0;
    message.annex2Count = object.annex2Count ?? 0;
    message.isAnnex2 = object.isAnnex2 ?? false;
    message.annex3 = object.annex3 ?? 0;
    message.annex3Name = object.annex3Name ?? 0;
    message.annex3Count = object.annex3Count ?? 0;
    message.isAnnex3 = object.isAnnex3 ?? false;
    message.annex4 = object.annex4 ?? 0;
    message.annex4Name = object.annex4Name ?? 0;
    message.annex4Count = object.annex4Count ?? 0;
    message.isAnnex4 = object.isAnnex4 ?? false;
    message.annex5 = object.annex5 ?? 0;
    message.annex5Name = object.annex5Name ?? 0;
    message.annex5Count = object.annex5Count ?? 0;
    message.isAnnex5 = object.isAnnex5 ?? false;
    message.isExist = object.isExist ?? false;
    message.sendType = object.sendType ?? 0;
    message.sendPlayerGrades = object.sendPlayerGrades ?? 0;
    message.params = object.params ?? "";
    message.annex1Grade = object.annex1Grade ?? 0;
    message.annex2Grade = object.annex2Grade ?? 0;
    message.annex3Grade = object.annex3Grade ?? 0;
    message.annex4Grade = object.annex4Grade ?? 0;
    message.annex5Grade = object.annex5Grade ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
