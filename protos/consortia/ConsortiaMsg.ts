// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaMsg {
  consortiaId: number;
  applyId: number;
  otherId: number;
  contributeGold: number;
  upgradeType: number;
  studySkill: number;
  positionId: number;
  blessSite: number;
  blessTempId: number;
  blessCount: number;
  placard: string;
  description: string;
  consortiaName: string;
  result: boolean;
  blessLeftTime: number;
  returnItem: boolean;
  isPay: boolean;
  groupPlacard: string;
  payType: number;
}

function createBaseConsortiaMsg(): ConsortiaMsg {
  return {
    consortiaId: 0,
    applyId: 0,
    otherId: 0,
    contributeGold: 0,
    upgradeType: 0,
    studySkill: 0,
    positionId: 0,
    blessSite: 0,
    blessTempId: 0,
    blessCount: 0,
    placard: "",
    description: "",
    consortiaName: "",
    result: false,
    blessLeftTime: 0,
    returnItem: false,
    isPay: false,
    groupPlacard: "",
    payType: 0,
  };
}

export const ConsortiaMsg: MessageFns<ConsortiaMsg> = {
  encode(message: ConsortiaMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.applyId !== 0) {
      writer.uint32(16).int32(message.applyId);
    }
    if (message.otherId !== 0) {
      writer.uint32(24).int32(message.otherId);
    }
    if (message.contributeGold !== 0) {
      writer.uint32(32).int32(message.contributeGold);
    }
    if (message.upgradeType !== 0) {
      writer.uint32(40).int32(message.upgradeType);
    }
    if (message.studySkill !== 0) {
      writer.uint32(48).int32(message.studySkill);
    }
    if (message.positionId !== 0) {
      writer.uint32(56).int32(message.positionId);
    }
    if (message.blessSite !== 0) {
      writer.uint32(64).int32(message.blessSite);
    }
    if (message.blessTempId !== 0) {
      writer.uint32(72).int32(message.blessTempId);
    }
    if (message.blessCount !== 0) {
      writer.uint32(80).int32(message.blessCount);
    }
    if (message.placard !== "") {
      writer.uint32(90).string(message.placard);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    if (message.consortiaName !== "") {
      writer.uint32(106).string(message.consortiaName);
    }
    if (message.result !== false) {
      writer.uint32(112).bool(message.result);
    }
    if (message.blessLeftTime !== 0) {
      writer.uint32(120).int32(message.blessLeftTime);
    }
    if (message.returnItem !== false) {
      writer.uint32(128).bool(message.returnItem);
    }
    if (message.isPay !== false) {
      writer.uint32(136).bool(message.isPay);
    }
    if (message.groupPlacard !== "") {
      writer.uint32(146).string(message.groupPlacard);
    }
    if (message.payType !== 0) {
      writer.uint32(152).int32(message.payType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.applyId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.otherId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.contributeGold = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.upgradeType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.studySkill = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.positionId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.blessSite = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.blessTempId = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.blessCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.placard = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.blessLeftTime = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.returnItem = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.isPay = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.groupPlacard = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      applyId: isSet(object.applyId) ? globalThis.Number(object.applyId) : 0,
      otherId: isSet(object.otherId) ? globalThis.Number(object.otherId) : 0,
      contributeGold: isSet(object.contributeGold) ? globalThis.Number(object.contributeGold) : 0,
      upgradeType: isSet(object.upgradeType) ? globalThis.Number(object.upgradeType) : 0,
      studySkill: isSet(object.studySkill) ? globalThis.Number(object.studySkill) : 0,
      positionId: isSet(object.positionId) ? globalThis.Number(object.positionId) : 0,
      blessSite: isSet(object.blessSite) ? globalThis.Number(object.blessSite) : 0,
      blessTempId: isSet(object.blessTempId) ? globalThis.Number(object.blessTempId) : 0,
      blessCount: isSet(object.blessCount) ? globalThis.Number(object.blessCount) : 0,
      placard: isSet(object.placard) ? globalThis.String(object.placard) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      blessLeftTime: isSet(object.blessLeftTime) ? globalThis.Number(object.blessLeftTime) : 0,
      returnItem: isSet(object.returnItem) ? globalThis.Boolean(object.returnItem) : false,
      isPay: isSet(object.isPay) ? globalThis.Boolean(object.isPay) : false,
      groupPlacard: isSet(object.groupPlacard) ? globalThis.String(object.groupPlacard) : "",
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
    };
  },

  toJSON(message: ConsortiaMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.applyId !== 0) {
      obj.applyId = Math.round(message.applyId);
    }
    if (message.otherId !== 0) {
      obj.otherId = Math.round(message.otherId);
    }
    if (message.contributeGold !== 0) {
      obj.contributeGold = Math.round(message.contributeGold);
    }
    if (message.upgradeType !== 0) {
      obj.upgradeType = Math.round(message.upgradeType);
    }
    if (message.studySkill !== 0) {
      obj.studySkill = Math.round(message.studySkill);
    }
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.blessSite !== 0) {
      obj.blessSite = Math.round(message.blessSite);
    }
    if (message.blessTempId !== 0) {
      obj.blessTempId = Math.round(message.blessTempId);
    }
    if (message.blessCount !== 0) {
      obj.blessCount = Math.round(message.blessCount);
    }
    if (message.placard !== "") {
      obj.placard = message.placard;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.blessLeftTime !== 0) {
      obj.blessLeftTime = Math.round(message.blessLeftTime);
    }
    if (message.returnItem !== false) {
      obj.returnItem = message.returnItem;
    }
    if (message.isPay !== false) {
      obj.isPay = message.isPay;
    }
    if (message.groupPlacard !== "") {
      obj.groupPlacard = message.groupPlacard;
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaMsg>, I>>(base?: I): ConsortiaMsg {
    return ConsortiaMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaMsg>, I>>(object: I): ConsortiaMsg {
    const message = createBaseConsortiaMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.applyId = object.applyId ?? 0;
    message.otherId = object.otherId ?? 0;
    message.contributeGold = object.contributeGold ?? 0;
    message.upgradeType = object.upgradeType ?? 0;
    message.studySkill = object.studySkill ?? 0;
    message.positionId = object.positionId ?? 0;
    message.blessSite = object.blessSite ?? 0;
    message.blessTempId = object.blessTempId ?? 0;
    message.blessCount = object.blessCount ?? 0;
    message.placard = object.placard ?? "";
    message.description = object.description ?? "";
    message.consortiaName = object.consortiaName ?? "";
    message.result = object.result ?? false;
    message.blessLeftTime = object.blessLeftTime ?? 0;
    message.returnItem = object.returnItem ?? false;
    message.isPay = object.isPay ?? false;
    message.groupPlacard = object.groupPlacard ?? "";
    message.payType = object.payType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
