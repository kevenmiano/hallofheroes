// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/AllTaskInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface AllTaskInfoMsg {
  score: number;
  finishNum: number;
  rewardStatus: string;
  oneTask: string;
  recoredInfo: number[];
  update: number;
}

function createBaseAllTaskInfoMsg(): AllTaskInfoMsg {
  return {
    score: 0,
    finishNum: 0,
    rewardStatus: "",
    oneTask: "",
    recoredInfo: [],
    update: 0,
  };
}

export const AllTaskInfoMsg: MessageFns<AllTaskInfoMsg> = {
  encode(
    message: AllTaskInfoMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.score !== 0) {
      writer.uint32(8).int32(message.score);
    }
    if (message.finishNum !== 0) {
      writer.uint32(16).int32(message.finishNum);
    }
    if (message.rewardStatus !== "") {
      writer.uint32(26).string(message.rewardStatus);
    }
    if (message.oneTask !== "") {
      writer.uint32(34).string(message.oneTask);
    }
    writer.uint32(42).fork();
    for (const v of message.recoredInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.update !== 0) {
      writer.uint32(48).int32(message.update);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllTaskInfoMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllTaskInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.finishNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardStatus = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oneTask = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.recoredInfo.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.recoredInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.update = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllTaskInfoMsg {
    return {
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      finishNum: isSet(object.finishNum)
        ? globalThis.Number(object.finishNum)
        : 0,
      rewardStatus: isSet(object.rewardStatus)
        ? globalThis.String(object.rewardStatus)
        : "",
      oneTask: isSet(object.oneTask) ? globalThis.String(object.oneTask) : "",
      recoredInfo: globalThis.Array.isArray(object?.recoredInfo)
        ? object.recoredInfo.map((e: any) => globalThis.Number(e))
        : [],
      update: isSet(object.update) ? globalThis.Number(object.update) : 0,
    };
  },

  toJSON(message: AllTaskInfoMsg): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.finishNum !== 0) {
      obj.finishNum = Math.round(message.finishNum);
    }
    if (message.rewardStatus !== "") {
      obj.rewardStatus = message.rewardStatus;
    }
    if (message.oneTask !== "") {
      obj.oneTask = message.oneTask;
    }
    if (message.recoredInfo?.length) {
      obj.recoredInfo = message.recoredInfo.map((e) => Math.round(e));
    }
    if (message.update !== 0) {
      obj.update = Math.round(message.update);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllTaskInfoMsg>, I>>(
    base?: I,
  ): AllTaskInfoMsg {
    return AllTaskInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllTaskInfoMsg>, I>>(
    object: I,
  ): AllTaskInfoMsg {
    const message = createBaseAllTaskInfoMsg();
    message.score = object.score ?? 0;
    message.finishNum = object.finishNum ?? 0;
    message.rewardStatus = object.rewardStatus ?? "";
    message.oneTask = object.oneTask ?? "";
    message.recoredInfo = object.recoredInfo?.map((e) => e) || [];
    message.update = object.update ?? 0;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
