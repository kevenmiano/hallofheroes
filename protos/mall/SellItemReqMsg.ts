// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: mall/SellItemReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.mall";

export interface SellItemReqMsg {
  itemId: number;
  itemPos: number;
  count: number;
  point: number;
  fixPoint: number;
  hour: number;
  sellType: number;
}

function createBaseSellItemReqMsg(): SellItemReqMsg {
  return { itemId: 0, itemPos: 0, count: 0, point: 0, fixPoint: 0, hour: 0, sellType: 0 };
}

export const SellItemReqMsg: MessageFns<SellItemReqMsg> = {
  encode(message: SellItemReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.itemId !== 0) {
      writer.uint32(8).int32(message.itemId);
    }
    if (message.itemPos !== 0) {
      writer.uint32(16).int32(message.itemPos);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    if (message.point !== 0) {
      writer.uint32(32).int32(message.point);
    }
    if (message.fixPoint !== 0) {
      writer.uint32(40).int32(message.fixPoint);
    }
    if (message.hour !== 0) {
      writer.uint32(48).int32(message.hour);
    }
    if (message.sellType !== 0) {
      writer.uint32(56).int32(message.sellType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SellItemReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSellItemReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.itemId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.itemPos = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fixPoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hour = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sellType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SellItemReqMsg {
    return {
      itemId: isSet(object.itemId) ? globalThis.Number(object.itemId) : 0,
      itemPos: isSet(object.itemPos) ? globalThis.Number(object.itemPos) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      fixPoint: isSet(object.fixPoint) ? globalThis.Number(object.fixPoint) : 0,
      hour: isSet(object.hour) ? globalThis.Number(object.hour) : 0,
      sellType: isSet(object.sellType) ? globalThis.Number(object.sellType) : 0,
    };
  },

  toJSON(message: SellItemReqMsg): unknown {
    const obj: any = {};
    if (message.itemId !== 0) {
      obj.itemId = Math.round(message.itemId);
    }
    if (message.itemPos !== 0) {
      obj.itemPos = Math.round(message.itemPos);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.fixPoint !== 0) {
      obj.fixPoint = Math.round(message.fixPoint);
    }
    if (message.hour !== 0) {
      obj.hour = Math.round(message.hour);
    }
    if (message.sellType !== 0) {
      obj.sellType = Math.round(message.sellType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SellItemReqMsg>, I>>(base?: I): SellItemReqMsg {
    return SellItemReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SellItemReqMsg>, I>>(object: I): SellItemReqMsg {
    const message = createBaseSellItemReqMsg();
    message.itemId = object.itemId ?? 0;
    message.itemPos = object.itemPos ?? 0;
    message.count = object.count ?? 0;
    message.point = object.point ?? 0;
    message.fixPoint = object.fixPoint ?? 0;
    message.hour = object.hour ?? 0;
    message.sellType = object.sellType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
