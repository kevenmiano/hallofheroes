// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: reward/RewardFreshRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.reward";

export interface RewardFreshRspMsg {
  templateId: number[];
  rewardLastdate: string;
  isIsValid: number[];
  qualitys: number[];
  rewardTimes: number;
  freeTimes: number;
  additionalReward: string;
}

function createBaseRewardFreshRspMsg(): RewardFreshRspMsg {
  return {
    templateId: [],
    rewardLastdate: "",
    isIsValid: [],
    qualitys: [],
    rewardTimes: 0,
    freeTimes: 0,
    additionalReward: "",
  };
}

export const RewardFreshRspMsg: MessageFns<RewardFreshRspMsg> = {
  encode(message: RewardFreshRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.templateId) {
      writer.int32(v);
    }
    writer.join();
    if (message.rewardLastdate !== "") {
      writer.uint32(18).string(message.rewardLastdate);
    }
    writer.uint32(26).fork();
    for (const v of message.isIsValid) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.qualitys) {
      writer.int32(v);
    }
    writer.join();
    if (message.rewardTimes !== 0) {
      writer.uint32(40).int32(message.rewardTimes);
    }
    if (message.freeTimes !== 0) {
      writer.uint32(48).int32(message.freeTimes);
    }
    if (message.additionalReward !== "") {
      writer.uint32(58).string(message.additionalReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardFreshRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardFreshRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.templateId.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.templateId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rewardLastdate = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.isIsValid.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.isIsValid.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.qualitys.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.qualitys.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rewardTimes = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.freeTimes = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.additionalReward = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardFreshRspMsg {
    return {
      templateId: globalThis.Array.isArray(object?.templateId)
        ? object.templateId.map((e: any) => globalThis.Number(e))
        : [],
      rewardLastdate: isSet(object.rewardLastdate) ? globalThis.String(object.rewardLastdate) : "",
      isIsValid: globalThis.Array.isArray(object?.isIsValid)
        ? object.isIsValid.map((e: any) => globalThis.Number(e))
        : [],
      qualitys: globalThis.Array.isArray(object?.qualitys) ? object.qualitys.map((e: any) => globalThis.Number(e)) : [],
      rewardTimes: isSet(object.rewardTimes) ? globalThis.Number(object.rewardTimes) : 0,
      freeTimes: isSet(object.freeTimes) ? globalThis.Number(object.freeTimes) : 0,
      additionalReward: isSet(object.additionalReward) ? globalThis.String(object.additionalReward) : "",
    };
  },

  toJSON(message: RewardFreshRspMsg): unknown {
    const obj: any = {};
    if (message.templateId?.length) {
      obj.templateId = message.templateId.map((e) => Math.round(e));
    }
    if (message.rewardLastdate !== "") {
      obj.rewardLastdate = message.rewardLastdate;
    }
    if (message.isIsValid?.length) {
      obj.isIsValid = message.isIsValid.map((e) => Math.round(e));
    }
    if (message.qualitys?.length) {
      obj.qualitys = message.qualitys.map((e) => Math.round(e));
    }
    if (message.rewardTimes !== 0) {
      obj.rewardTimes = Math.round(message.rewardTimes);
    }
    if (message.freeTimes !== 0) {
      obj.freeTimes = Math.round(message.freeTimes);
    }
    if (message.additionalReward !== "") {
      obj.additionalReward = message.additionalReward;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardFreshRspMsg>, I>>(base?: I): RewardFreshRspMsg {
    return RewardFreshRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardFreshRspMsg>, I>>(object: I): RewardFreshRspMsg {
    const message = createBaseRewardFreshRspMsg();
    message.templateId = object.templateId?.map((e) => e) || [];
    message.rewardLastdate = object.rewardLastdate ?? "";
    message.isIsValid = object.isIsValid?.map((e) => e) || [];
    message.qualitys = object.qualitys?.map((e) => e) || [];
    message.rewardTimes = object.rewardTimes ?? 0;
    message.freeTimes = object.freeTimes ?? 0;
    message.additionalReward = object.additionalReward ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
