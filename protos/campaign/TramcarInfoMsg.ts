// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/TramcarInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface TramcarInfoMsg {
  carInfo: number[];
  userIds: number[];
  activeTime: number;
  count: number;
  multiple: number;
}

function createBaseTramcarInfoMsg(): TramcarInfoMsg {
  return { carInfo: [], userIds: [], activeTime: 0, count: 0, multiple: 0 };
}

export const TramcarInfoMsg: MessageFns<TramcarInfoMsg> = {
  encode(message: TramcarInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.carInfo) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.userIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.activeTime !== 0) {
      writer.uint32(24).int32(message.activeTime);
    }
    if (message.count !== 0) {
      writer.uint32(32).int32(message.count);
    }
    if (message.multiple !== 0) {
      writer.uint32(40).int32(message.multiple);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TramcarInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTramcarInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.carInfo.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.carInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.userIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.activeTime = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.multiple = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TramcarInfoMsg {
    return {
      carInfo: globalThis.Array.isArray(object?.carInfo) ? object.carInfo.map((e: any) => globalThis.Number(e)) : [],
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.Number(e)) : [],
      activeTime: isSet(object.activeTime) ? globalThis.Number(object.activeTime) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      multiple: isSet(object.multiple) ? globalThis.Number(object.multiple) : 0,
    };
  },

  toJSON(message: TramcarInfoMsg): unknown {
    const obj: any = {};
    if (message.carInfo?.length) {
      obj.carInfo = message.carInfo.map((e) => Math.round(e));
    }
    if (message.userIds?.length) {
      obj.userIds = message.userIds.map((e) => Math.round(e));
    }
    if (message.activeTime !== 0) {
      obj.activeTime = Math.round(message.activeTime);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.multiple !== 0) {
      obj.multiple = Math.round(message.multiple);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TramcarInfoMsg>, I>>(base?: I): TramcarInfoMsg {
    return TramcarInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TramcarInfoMsg>, I>>(object: I): TramcarInfoMsg {
    const message = createBaseTramcarInfoMsg();
    message.carInfo = object.carInfo?.map((e) => e) || [];
    message.userIds = object.userIds?.map((e) => e) || [];
    message.activeTime = object.activeTime ?? 0;
    message.count = object.count ?? 0;
    message.multiple = object.multiple ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
