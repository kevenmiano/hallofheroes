// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/DepositActiveMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface DepositActiveMsg {
  activeId: string;
  title: string;
  contents: string;
  activeType: number;
  description: string;
  actionTimeContent: string;
  consortia: number;
  grades: number;
  setStartDate: string;
  setEndDate: string;
  getStartDate: string;
  getEndDate: string;
  depositLevel: number;
  depositTime: string;
  opType: number;
  opParam: number;
  harvestedInfos: number[];
  activeParams: number[];
  logs: number[];
}

function createBaseDepositActiveMsg(): DepositActiveMsg {
  return {
    activeId: "",
    title: "",
    contents: "",
    activeType: 0,
    description: "",
    actionTimeContent: "",
    consortia: 0,
    grades: 0,
    setStartDate: "",
    setEndDate: "",
    getStartDate: "",
    getEndDate: "",
    depositLevel: 0,
    depositTime: "",
    opType: 0,
    opParam: 0,
    harvestedInfos: [],
    activeParams: [],
    logs: [],
  };
}

export const DepositActiveMsg: MessageFns<DepositActiveMsg> = {
  encode(message: DepositActiveMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activeId !== "") {
      writer.uint32(10).string(message.activeId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.contents !== "") {
      writer.uint32(26).string(message.contents);
    }
    if (message.activeType !== 0) {
      writer.uint32(32).int32(message.activeType);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.actionTimeContent !== "") {
      writer.uint32(50).string(message.actionTimeContent);
    }
    if (message.consortia !== 0) {
      writer.uint32(56).int32(message.consortia);
    }
    if (message.grades !== 0) {
      writer.uint32(64).int32(message.grades);
    }
    if (message.setStartDate !== "") {
      writer.uint32(74).string(message.setStartDate);
    }
    if (message.setEndDate !== "") {
      writer.uint32(82).string(message.setEndDate);
    }
    if (message.getStartDate !== "") {
      writer.uint32(90).string(message.getStartDate);
    }
    if (message.getEndDate !== "") {
      writer.uint32(98).string(message.getEndDate);
    }
    if (message.depositLevel !== 0) {
      writer.uint32(104).int32(message.depositLevel);
    }
    if (message.depositTime !== "") {
      writer.uint32(114).string(message.depositTime);
    }
    if (message.opType !== 0) {
      writer.uint32(120).int32(message.opType);
    }
    if (message.opParam !== 0) {
      writer.uint32(128).int32(message.opParam);
    }
    writer.uint32(138).fork();
    for (const v of message.harvestedInfos) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(146).fork();
    for (const v of message.activeParams) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(154).fork();
    for (const v of message.logs) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositActiveMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositActiveMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contents = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.activeType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.actionTimeContent = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.consortia = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.setStartDate = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.setEndDate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.getStartDate = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.getEndDate = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.depositLevel = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.depositTime = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.opParam = reader.int32();
          continue;
        }
        case 17: {
          if (tag === 136) {
            message.harvestedInfos.push(reader.int32());

            continue;
          }

          if (tag === 138) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.harvestedInfos.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 18: {
          if (tag === 144) {
            message.activeParams.push(reader.int32());

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.activeParams.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 19: {
          if (tag === 152) {
            message.logs.push(reader.int32());

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.logs.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositActiveMsg {
    return {
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      contents: isSet(object.contents) ? globalThis.String(object.contents) : "",
      activeType: isSet(object.activeType) ? globalThis.Number(object.activeType) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      actionTimeContent: isSet(object.actionTimeContent) ? globalThis.String(object.actionTimeContent) : "",
      consortia: isSet(object.consortia) ? globalThis.Number(object.consortia) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      setStartDate: isSet(object.setStartDate) ? globalThis.String(object.setStartDate) : "",
      setEndDate: isSet(object.setEndDate) ? globalThis.String(object.setEndDate) : "",
      getStartDate: isSet(object.getStartDate) ? globalThis.String(object.getStartDate) : "",
      getEndDate: isSet(object.getEndDate) ? globalThis.String(object.getEndDate) : "",
      depositLevel: isSet(object.depositLevel) ? globalThis.Number(object.depositLevel) : 0,
      depositTime: isSet(object.depositTime) ? globalThis.String(object.depositTime) : "",
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      opParam: isSet(object.opParam) ? globalThis.Number(object.opParam) : 0,
      harvestedInfos: globalThis.Array.isArray(object?.harvestedInfos)
        ? object.harvestedInfos.map((e: any) => globalThis.Number(e))
        : [],
      activeParams: globalThis.Array.isArray(object?.activeParams)
        ? object.activeParams.map((e: any) => globalThis.Number(e))
        : [],
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: DepositActiveMsg): unknown {
    const obj: any = {};
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.contents !== "") {
      obj.contents = message.contents;
    }
    if (message.activeType !== 0) {
      obj.activeType = Math.round(message.activeType);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.actionTimeContent !== "") {
      obj.actionTimeContent = message.actionTimeContent;
    }
    if (message.consortia !== 0) {
      obj.consortia = Math.round(message.consortia);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.setStartDate !== "") {
      obj.setStartDate = message.setStartDate;
    }
    if (message.setEndDate !== "") {
      obj.setEndDate = message.setEndDate;
    }
    if (message.getStartDate !== "") {
      obj.getStartDate = message.getStartDate;
    }
    if (message.getEndDate !== "") {
      obj.getEndDate = message.getEndDate;
    }
    if (message.depositLevel !== 0) {
      obj.depositLevel = Math.round(message.depositLevel);
    }
    if (message.depositTime !== "") {
      obj.depositTime = message.depositTime;
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.opParam !== 0) {
      obj.opParam = Math.round(message.opParam);
    }
    if (message.harvestedInfos?.length) {
      obj.harvestedInfos = message.harvestedInfos.map((e) => Math.round(e));
    }
    if (message.activeParams?.length) {
      obj.activeParams = message.activeParams.map((e) => Math.round(e));
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DepositActiveMsg>, I>>(base?: I): DepositActiveMsg {
    return DepositActiveMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DepositActiveMsg>, I>>(object: I): DepositActiveMsg {
    const message = createBaseDepositActiveMsg();
    message.activeId = object.activeId ?? "";
    message.title = object.title ?? "";
    message.contents = object.contents ?? "";
    message.activeType = object.activeType ?? 0;
    message.description = object.description ?? "";
    message.actionTimeContent = object.actionTimeContent ?? "";
    message.consortia = object.consortia ?? 0;
    message.grades = object.grades ?? 0;
    message.setStartDate = object.setStartDate ?? "";
    message.setEndDate = object.setEndDate ?? "";
    message.getStartDate = object.getStartDate ?? "";
    message.getEndDate = object.getEndDate ?? "";
    message.depositLevel = object.depositLevel ?? 0;
    message.depositTime = object.depositTime ?? "";
    message.opType = object.opType ?? 0;
    message.opParam = object.opParam ?? 0;
    message.harvestedInfos = object.harvestedInfos?.map((e) => e) || [];
    message.activeParams = object.activeParams?.map((e) => e) || [];
    message.logs = object.logs?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
