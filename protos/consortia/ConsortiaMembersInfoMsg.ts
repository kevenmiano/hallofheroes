// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaMembersInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaMembersInfoMsg {
  job: number;
  nickName: string;
  level: number;
  fightCapacity: number;
  userId: number;
  count: number;
  isReceived: boolean;
}

function createBaseConsortiaMembersInfoMsg(): ConsortiaMembersInfoMsg {
  return { job: 0, nickName: "", level: 0, fightCapacity: 0, userId: 0, count: 0, isReceived: false };
}

export const ConsortiaMembersInfoMsg: MessageFns<ConsortiaMembersInfoMsg> = {
  encode(message: ConsortiaMembersInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== 0) {
      writer.uint32(8).int32(message.job);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.level !== 0) {
      writer.uint32(24).int32(message.level);
    }
    if (message.fightCapacity !== 0) {
      writer.uint32(32).int32(message.fightCapacity);
    }
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    if (message.count !== 0) {
      writer.uint32(48).int32(message.count);
    }
    if (message.isReceived !== false) {
      writer.uint32(56).bool(message.isReceived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaMembersInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaMembersInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fightCapacity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isReceived = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaMembersInfoMsg {
    return {
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      fightCapacity: isSet(object.fightCapacity) ? globalThis.Number(object.fightCapacity) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      isReceived: isSet(object.isReceived) ? globalThis.Boolean(object.isReceived) : false,
    };
  },

  toJSON(message: ConsortiaMembersInfoMsg): unknown {
    const obj: any = {};
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.fightCapacity !== 0) {
      obj.fightCapacity = Math.round(message.fightCapacity);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.isReceived !== false) {
      obj.isReceived = message.isReceived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaMembersInfoMsg>, I>>(base?: I): ConsortiaMembersInfoMsg {
    return ConsortiaMembersInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaMembersInfoMsg>, I>>(object: I): ConsortiaMembersInfoMsg {
    const message = createBaseConsortiaMembersInfoMsg();
    message.job = object.job ?? 0;
    message.nickName = object.nickName ?? "";
    message.level = object.level ?? 0;
    message.fightCapacity = object.fightCapacity ?? 0;
    message.userId = object.userId ?? 0;
    message.count = object.count ?? 0;
    message.isReceived = object.isReceived ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
