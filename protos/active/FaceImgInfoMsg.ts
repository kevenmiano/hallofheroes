// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/FaceImgInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface FaceImgInfoMsg {
  activeId: string;
  activityName: string;
  activeType: number;
  minLevel: number;
  maxLevel: number;
  beginTime: string;
  endTime: string;
  images: number[];
  order: number;
}

function createBaseFaceImgInfoMsg(): FaceImgInfoMsg {
  return {
    activeId: "",
    activityName: "",
    activeType: 0,
    minLevel: 0,
    maxLevel: 0,
    beginTime: "",
    endTime: "",
    images: [],
    order: 0,
  };
}

export const FaceImgInfoMsg: MessageFns<FaceImgInfoMsg> = {
  encode(message: FaceImgInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activeId !== "") {
      writer.uint32(10).string(message.activeId);
    }
    if (message.activityName !== "") {
      writer.uint32(18).string(message.activityName);
    }
    if (message.activeType !== 0) {
      writer.uint32(24).int32(message.activeType);
    }
    if (message.minLevel !== 0) {
      writer.uint32(32).int32(message.minLevel);
    }
    if (message.maxLevel !== 0) {
      writer.uint32(40).int32(message.maxLevel);
    }
    if (message.beginTime !== "") {
      writer.uint32(50).string(message.beginTime);
    }
    if (message.endTime !== "") {
      writer.uint32(58).string(message.endTime);
    }
    writer.uint32(66).fork();
    for (const v of message.images) {
      writer.int32(v);
    }
    writer.join();
    if (message.order !== 0) {
      writer.uint32(72).int32(message.order);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaceImgInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaceImgInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.activityName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.activeType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minLevel = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxLevel = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.beginTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.images.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.images.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaceImgInfoMsg {
    return {
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      activityName: isSet(object.activityName) ? globalThis.String(object.activityName) : "",
      activeType: isSet(object.activeType) ? globalThis.Number(object.activeType) : 0,
      minLevel: isSet(object.minLevel) ? globalThis.Number(object.minLevel) : 0,
      maxLevel: isSet(object.maxLevel) ? globalThis.Number(object.maxLevel) : 0,
      beginTime: isSet(object.beginTime) ? globalThis.String(object.beginTime) : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.Number(e)) : [],
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
    };
  },

  toJSON(message: FaceImgInfoMsg): unknown {
    const obj: any = {};
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.activityName !== "") {
      obj.activityName = message.activityName;
    }
    if (message.activeType !== 0) {
      obj.activeType = Math.round(message.activeType);
    }
    if (message.minLevel !== 0) {
      obj.minLevel = Math.round(message.minLevel);
    }
    if (message.maxLevel !== 0) {
      obj.maxLevel = Math.round(message.maxLevel);
    }
    if (message.beginTime !== "") {
      obj.beginTime = message.beginTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => Math.round(e));
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaceImgInfoMsg>, I>>(base?: I): FaceImgInfoMsg {
    return FaceImgInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaceImgInfoMsg>, I>>(object: I): FaceImgInfoMsg {
    const message = createBaseFaceImgInfoMsg();
    message.activeId = object.activeId ?? "";
    message.activityName = object.activityName ?? "";
    message.activeType = object.activeType ?? 0;
    message.minLevel = object.minLevel ?? 0;
    message.maxLevel = object.maxLevel ?? 0;
    message.beginTime = object.beginTime ?? "";
    message.endTime = object.endTime ?? "";
    message.images = object.images?.map((e) => e) || [];
    message.order = object.order ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
