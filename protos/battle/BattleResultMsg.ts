// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/BattleResultMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface BattleResultMsg {
  proxyId: string;
  combatResult: number;
  army: number[];
  castleRoomId: number;
  beatNum: number;
  startTime: string;
  recordUri: string;
  remoteKills: string;
}

function createBaseBattleResultMsg(): BattleResultMsg {
  return {
    proxyId: "",
    combatResult: 0,
    army: [],
    castleRoomId: 0,
    beatNum: 0,
    startTime: "",
    recordUri: "",
    remoteKills: "",
  };
}

export const BattleResultMsg: MessageFns<BattleResultMsg> = {
  encode(message: BattleResultMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proxyId !== "") {
      writer.uint32(10).string(message.proxyId);
    }
    if (message.combatResult !== 0) {
      writer.uint32(16).int32(message.combatResult);
    }
    writer.uint32(26).fork();
    for (const v of message.army) {
      writer.int32(v);
    }
    writer.join();
    if (message.castleRoomId !== 0) {
      writer.uint32(32).int32(message.castleRoomId);
    }
    if (message.beatNum !== 0) {
      writer.uint32(40).int32(message.beatNum);
    }
    if (message.startTime !== "") {
      writer.uint32(50).string(message.startTime);
    }
    if (message.recordUri !== "") {
      writer.uint32(58).string(message.recordUri);
    }
    if (message.remoteKills !== "") {
      writer.uint32(66).string(message.remoteKills);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleResultMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleResultMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proxyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.combatResult = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.army.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.army.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.castleRoomId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.beatNum = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.recordUri = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.remoteKills = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleResultMsg {
    return {
      proxyId: isSet(object.proxyId) ? globalThis.String(object.proxyId) : "",
      combatResult: isSet(object.combatResult) ? globalThis.Number(object.combatResult) : 0,
      army: globalThis.Array.isArray(object?.army) ? object.army.map((e: any) => globalThis.Number(e)) : [],
      castleRoomId: isSet(object.castleRoomId) ? globalThis.Number(object.castleRoomId) : 0,
      beatNum: isSet(object.beatNum) ? globalThis.Number(object.beatNum) : 0,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      recordUri: isSet(object.recordUri) ? globalThis.String(object.recordUri) : "",
      remoteKills: isSet(object.remoteKills) ? globalThis.String(object.remoteKills) : "",
    };
  },

  toJSON(message: BattleResultMsg): unknown {
    const obj: any = {};
    if (message.proxyId !== "") {
      obj.proxyId = message.proxyId;
    }
    if (message.combatResult !== 0) {
      obj.combatResult = Math.round(message.combatResult);
    }
    if (message.army?.length) {
      obj.army = message.army.map((e) => Math.round(e));
    }
    if (message.castleRoomId !== 0) {
      obj.castleRoomId = Math.round(message.castleRoomId);
    }
    if (message.beatNum !== 0) {
      obj.beatNum = Math.round(message.beatNum);
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.recordUri !== "") {
      obj.recordUri = message.recordUri;
    }
    if (message.remoteKills !== "") {
      obj.remoteKills = message.remoteKills;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleResultMsg>, I>>(base?: I): BattleResultMsg {
    return BattleResultMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleResultMsg>, I>>(object: I): BattleResultMsg {
    const message = createBaseBattleResultMsg();
    message.proxyId = object.proxyId ?? "";
    message.combatResult = object.combatResult ?? 0;
    message.army = object.army?.map((e) => e) || [];
    message.castleRoomId = object.castleRoomId ?? 0;
    message.beatNum = object.beatNum ?? 0;
    message.startTime = object.startTime ?? "";
    message.recordUri = object.recordUri ?? "";
    message.remoteKills = object.remoteKills ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
