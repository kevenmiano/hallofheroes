// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: tollgate/ChallengeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.tollgate";

export interface ChallengeMsg {
  tollgateId: number;
  attackUserid: number;
  attackName: string;
  attackTime: string;
  remainTime: number;
  lastHp: number;
}

function createBaseChallengeMsg(): ChallengeMsg {
  return { tollgateId: 0, attackUserid: 0, attackName: "", attackTime: "", remainTime: 0, lastHp: 0 };
}

export const ChallengeMsg: MessageFns<ChallengeMsg> = {
  encode(message: ChallengeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tollgateId !== 0) {
      writer.uint32(8).int32(message.tollgateId);
    }
    if (message.attackUserid !== 0) {
      writer.uint32(16).int32(message.attackUserid);
    }
    if (message.attackName !== "") {
      writer.uint32(26).string(message.attackName);
    }
    if (message.attackTime !== "") {
      writer.uint32(34).string(message.attackTime);
    }
    if (message.remainTime !== 0) {
      writer.uint32(40).int32(message.remainTime);
    }
    if (message.lastHp !== 0) {
      writer.uint32(48).int32(message.lastHp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChallengeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChallengeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tollgateId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.attackUserid = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attackName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attackTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.remainTime = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lastHp = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChallengeMsg {
    return {
      tollgateId: isSet(object.tollgateId) ? globalThis.Number(object.tollgateId) : 0,
      attackUserid: isSet(object.attackUserid) ? globalThis.Number(object.attackUserid) : 0,
      attackName: isSet(object.attackName) ? globalThis.String(object.attackName) : "",
      attackTime: isSet(object.attackTime) ? globalThis.String(object.attackTime) : "",
      remainTime: isSet(object.remainTime) ? globalThis.Number(object.remainTime) : 0,
      lastHp: isSet(object.lastHp) ? globalThis.Number(object.lastHp) : 0,
    };
  },

  toJSON(message: ChallengeMsg): unknown {
    const obj: any = {};
    if (message.tollgateId !== 0) {
      obj.tollgateId = Math.round(message.tollgateId);
    }
    if (message.attackUserid !== 0) {
      obj.attackUserid = Math.round(message.attackUserid);
    }
    if (message.attackName !== "") {
      obj.attackName = message.attackName;
    }
    if (message.attackTime !== "") {
      obj.attackTime = message.attackTime;
    }
    if (message.remainTime !== 0) {
      obj.remainTime = Math.round(message.remainTime);
    }
    if (message.lastHp !== 0) {
      obj.lastHp = Math.round(message.lastHp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChallengeMsg>, I>>(base?: I): ChallengeMsg {
    return ChallengeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChallengeMsg>, I>>(object: I): ChallengeMsg {
    const message = createBaseChallengeMsg();
    message.tollgateId = object.tollgateId ?? 0;
    message.attackUserid = object.attackUserid ?? 0;
    message.attackName = object.attackName ?? "";
    message.attackTime = object.attackTime ?? "";
    message.remainTime = object.remainTime ?? 0;
    message.lastHp = object.lastHp ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
