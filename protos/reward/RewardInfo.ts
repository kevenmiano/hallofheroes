// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: reward/RewardInfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.reward";

export interface RewardInfo {
  templateId: number;
  isComplete: boolean;
  condition1: number;
  condition2: number;
  condition3: number;
  condition4: number;
  completedDate: string;
  repeatFinish: number;
  isAccept: boolean;
  isSelect: boolean;
  quality: number;
}

function createBaseRewardInfo(): RewardInfo {
  return {
    templateId: 0,
    isComplete: false,
    condition1: 0,
    condition2: 0,
    condition3: 0,
    condition4: 0,
    completedDate: "",
    repeatFinish: 0,
    isAccept: false,
    isSelect: false,
    quality: 0,
  };
}

export const RewardInfo: MessageFns<RewardInfo> = {
  encode(message: RewardInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.templateId !== 0) {
      writer.uint32(8).int32(message.templateId);
    }
    if (message.isComplete !== false) {
      writer.uint32(16).bool(message.isComplete);
    }
    if (message.condition1 !== 0) {
      writer.uint32(24).int32(message.condition1);
    }
    if (message.condition2 !== 0) {
      writer.uint32(32).int32(message.condition2);
    }
    if (message.condition3 !== 0) {
      writer.uint32(40).int32(message.condition3);
    }
    if (message.condition4 !== 0) {
      writer.uint32(48).int32(message.condition4);
    }
    if (message.completedDate !== "") {
      writer.uint32(58).string(message.completedDate);
    }
    if (message.repeatFinish !== 0) {
      writer.uint32(64).int32(message.repeatFinish);
    }
    if (message.isAccept !== false) {
      writer.uint32(72).bool(message.isAccept);
    }
    if (message.isSelect !== false) {
      writer.uint32(80).bool(message.isSelect);
    }
    if (message.quality !== 0) {
      writer.uint32(88).int32(message.quality);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isComplete = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.condition1 = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.condition2 = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.condition3 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.condition4 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.completedDate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.repeatFinish = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isAccept = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isSelect = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardInfo {
    return {
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      isComplete: isSet(object.isComplete) ? globalThis.Boolean(object.isComplete) : false,
      condition1: isSet(object.condition1) ? globalThis.Number(object.condition1) : 0,
      condition2: isSet(object.condition2) ? globalThis.Number(object.condition2) : 0,
      condition3: isSet(object.condition3) ? globalThis.Number(object.condition3) : 0,
      condition4: isSet(object.condition4) ? globalThis.Number(object.condition4) : 0,
      completedDate: isSet(object.completedDate) ? globalThis.String(object.completedDate) : "",
      repeatFinish: isSet(object.repeatFinish) ? globalThis.Number(object.repeatFinish) : 0,
      isAccept: isSet(object.isAccept) ? globalThis.Boolean(object.isAccept) : false,
      isSelect: isSet(object.isSelect) ? globalThis.Boolean(object.isSelect) : false,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
    };
  },

  toJSON(message: RewardInfo): unknown {
    const obj: any = {};
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.isComplete !== false) {
      obj.isComplete = message.isComplete;
    }
    if (message.condition1 !== 0) {
      obj.condition1 = Math.round(message.condition1);
    }
    if (message.condition2 !== 0) {
      obj.condition2 = Math.round(message.condition2);
    }
    if (message.condition3 !== 0) {
      obj.condition3 = Math.round(message.condition3);
    }
    if (message.condition4 !== 0) {
      obj.condition4 = Math.round(message.condition4);
    }
    if (message.completedDate !== "") {
      obj.completedDate = message.completedDate;
    }
    if (message.repeatFinish !== 0) {
      obj.repeatFinish = Math.round(message.repeatFinish);
    }
    if (message.isAccept !== false) {
      obj.isAccept = message.isAccept;
    }
    if (message.isSelect !== false) {
      obj.isSelect = message.isSelect;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardInfo>, I>>(base?: I): RewardInfo {
    return RewardInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardInfo>, I>>(object: I): RewardInfo {
    const message = createBaseRewardInfo();
    message.templateId = object.templateId ?? 0;
    message.isComplete = object.isComplete ?? false;
    message.condition1 = object.condition1 ?? 0;
    message.condition2 = object.condition2 ?? 0;
    message.condition3 = object.condition3 ?? 0;
    message.condition4 = object.condition4 ?? 0;
    message.completedDate = object.completedDate ?? "";
    message.repeatFinish = object.repeatFinish ?? 0;
    message.isAccept = object.isAccept ?? false;
    message.isSelect = object.isSelect ?? false;
    message.quality = object.quality ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
