// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/MarriageDataMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface MarriageDataMsg {
  userId: number;
  type: number;
  marriageState: number;
  happy: string;
  mateHappy: string;
  ringLevel: number;
  ringExp: number;
  selectId: number;
  giftRecord: string;
}

function createBaseMarriageDataMsg(): MarriageDataMsg {
  return {
    userId: 0,
    type: 0,
    marriageState: 0,
    happy: "",
    mateHappy: "",
    ringLevel: 0,
    ringExp: 0,
    selectId: 0,
    giftRecord: "",
  };
}

export const MarriageDataMsg: MessageFns<MarriageDataMsg> = {
  encode(message: MarriageDataMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.marriageState !== 0) {
      writer.uint32(24).int32(message.marriageState);
    }
    if (message.happy !== "") {
      writer.uint32(34).string(message.happy);
    }
    if (message.mateHappy !== "") {
      writer.uint32(42).string(message.mateHappy);
    }
    if (message.ringLevel !== 0) {
      writer.uint32(48).int32(message.ringLevel);
    }
    if (message.ringExp !== 0) {
      writer.uint32(56).int32(message.ringExp);
    }
    if (message.selectId !== 0) {
      writer.uint32(64).int32(message.selectId);
    }
    if (message.giftRecord !== "") {
      writer.uint32(74).string(message.giftRecord);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarriageDataMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarriageDataMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.marriageState = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.happy = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mateHappy = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ringLevel = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.ringExp = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.selectId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.giftRecord = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarriageDataMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      marriageState: isSet(object.marriageState) ? globalThis.Number(object.marriageState) : 0,
      happy: isSet(object.happy) ? globalThis.String(object.happy) : "",
      mateHappy: isSet(object.mateHappy) ? globalThis.String(object.mateHappy) : "",
      ringLevel: isSet(object.ringLevel) ? globalThis.Number(object.ringLevel) : 0,
      ringExp: isSet(object.ringExp) ? globalThis.Number(object.ringExp) : 0,
      selectId: isSet(object.selectId) ? globalThis.Number(object.selectId) : 0,
      giftRecord: isSet(object.giftRecord) ? globalThis.String(object.giftRecord) : "",
    };
  },

  toJSON(message: MarriageDataMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.marriageState !== 0) {
      obj.marriageState = Math.round(message.marriageState);
    }
    if (message.happy !== "") {
      obj.happy = message.happy;
    }
    if (message.mateHappy !== "") {
      obj.mateHappy = message.mateHappy;
    }
    if (message.ringLevel !== 0) {
      obj.ringLevel = Math.round(message.ringLevel);
    }
    if (message.ringExp !== 0) {
      obj.ringExp = Math.round(message.ringExp);
    }
    if (message.selectId !== 0) {
      obj.selectId = Math.round(message.selectId);
    }
    if (message.giftRecord !== "") {
      obj.giftRecord = message.giftRecord;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarriageDataMsg>, I>>(base?: I): MarriageDataMsg {
    return MarriageDataMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarriageDataMsg>, I>>(object: I): MarriageDataMsg {
    const message = createBaseMarriageDataMsg();
    message.userId = object.userId ?? 0;
    message.type = object.type ?? 0;
    message.marriageState = object.marriageState ?? 0;
    message.happy = object.happy ?? "";
    message.mateHappy = object.mateHappy ?? "";
    message.ringLevel = object.ringLevel ?? 0;
    message.ringExp = object.ringExp ?? 0;
    message.selectId = object.selectId ?? 0;
    message.giftRecord = object.giftRecord ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
