// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/HeroRuneInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface HeroRuneInfoMsg {
  runeId: number;
  runeGp: number;
  swallowCount: number;
  runeHole: string;
  tempHole: string;
  newSkillTempId: number;
  baseProperties: string;
}

function createBaseHeroRuneInfoMsg(): HeroRuneInfoMsg {
  return { runeId: 0, runeGp: 0, swallowCount: 0, runeHole: "", tempHole: "", newSkillTempId: 0, baseProperties: "" };
}

export const HeroRuneInfoMsg: MessageFns<HeroRuneInfoMsg> = {
  encode(message: HeroRuneInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.runeId !== 0) {
      writer.uint32(8).int32(message.runeId);
    }
    if (message.runeGp !== 0) {
      writer.uint32(16).int32(message.runeGp);
    }
    if (message.swallowCount !== 0) {
      writer.uint32(24).int32(message.swallowCount);
    }
    if (message.runeHole !== "") {
      writer.uint32(34).string(message.runeHole);
    }
    if (message.tempHole !== "") {
      writer.uint32(42).string(message.tempHole);
    }
    if (message.newSkillTempId !== 0) {
      writer.uint32(48).int32(message.newSkillTempId);
    }
    if (message.baseProperties !== "") {
      writer.uint32(58).string(message.baseProperties);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroRuneInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroRuneInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.runeId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.runeGp = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.swallowCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.runeHole = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tempHole = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.newSkillTempId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.baseProperties = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroRuneInfoMsg {
    return {
      runeId: isSet(object.runeId) ? globalThis.Number(object.runeId) : 0,
      runeGp: isSet(object.runeGp) ? globalThis.Number(object.runeGp) : 0,
      swallowCount: isSet(object.swallowCount) ? globalThis.Number(object.swallowCount) : 0,
      runeHole: isSet(object.runeHole) ? globalThis.String(object.runeHole) : "",
      tempHole: isSet(object.tempHole) ? globalThis.String(object.tempHole) : "",
      newSkillTempId: isSet(object.newSkillTempId) ? globalThis.Number(object.newSkillTempId) : 0,
      baseProperties: isSet(object.baseProperties) ? globalThis.String(object.baseProperties) : "",
    };
  },

  toJSON(message: HeroRuneInfoMsg): unknown {
    const obj: any = {};
    if (message.runeId !== 0) {
      obj.runeId = Math.round(message.runeId);
    }
    if (message.runeGp !== 0) {
      obj.runeGp = Math.round(message.runeGp);
    }
    if (message.swallowCount !== 0) {
      obj.swallowCount = Math.round(message.swallowCount);
    }
    if (message.runeHole !== "") {
      obj.runeHole = message.runeHole;
    }
    if (message.tempHole !== "") {
      obj.tempHole = message.tempHole;
    }
    if (message.newSkillTempId !== 0) {
      obj.newSkillTempId = Math.round(message.newSkillTempId);
    }
    if (message.baseProperties !== "") {
      obj.baseProperties = message.baseProperties;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroRuneInfoMsg>, I>>(base?: I): HeroRuneInfoMsg {
    return HeroRuneInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroRuneInfoMsg>, I>>(object: I): HeroRuneInfoMsg {
    const message = createBaseHeroRuneInfoMsg();
    message.runeId = object.runeId ?? 0;
    message.runeGp = object.runeGp ?? 0;
    message.swallowCount = object.swallowCount ?? 0;
    message.runeHole = object.runeHole ?? "";
    message.tempHole = object.tempHole ?? "";
    message.newSkillTempId = object.newSkillTempId ?? 0;
    message.baseProperties = object.baseProperties ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
