// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: room/RoomReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.room";

export interface RoomReqMsg {
  roomId: number;
  dungeonId: number;
  campaignId: number;
  armyId: number;
  userId: number;
  state: number;
  index: number;
  open: boolean;
  roomType: number;
  nameKey: string;
  password: string;
  isInvite: boolean;
  capacity: number;
  isGet: boolean;
  serverName: string;
  proxyId: string;
  enterType: number;
  startType: number;
}

function createBaseRoomReqMsg(): RoomReqMsg {
  return {
    roomId: 0,
    dungeonId: 0,
    campaignId: 0,
    armyId: 0,
    userId: 0,
    state: 0,
    index: 0,
    open: false,
    roomType: 0,
    nameKey: "",
    password: "",
    isInvite: false,
    capacity: 0,
    isGet: false,
    serverName: "",
    proxyId: "",
    enterType: 0,
    startType: 0,
  };
}

export const RoomReqMsg: MessageFns<RoomReqMsg> = {
  encode(message: RoomReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== 0) {
      writer.uint32(8).int32(message.roomId);
    }
    if (message.dungeonId !== 0) {
      writer.uint32(16).int32(message.dungeonId);
    }
    if (message.campaignId !== 0) {
      writer.uint32(24).int32(message.campaignId);
    }
    if (message.armyId !== 0) {
      writer.uint32(32).int32(message.armyId);
    }
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    if (message.index !== 0) {
      writer.uint32(56).int32(message.index);
    }
    if (message.open !== false) {
      writer.uint32(64).bool(message.open);
    }
    if (message.roomType !== 0) {
      writer.uint32(72).int32(message.roomType);
    }
    if (message.nameKey !== "") {
      writer.uint32(82).string(message.nameKey);
    }
    if (message.password !== "") {
      writer.uint32(90).string(message.password);
    }
    if (message.isInvite !== false) {
      writer.uint32(96).bool(message.isInvite);
    }
    if (message.capacity !== 0) {
      writer.uint32(104).int32(message.capacity);
    }
    if (message.isGet !== false) {
      writer.uint32(112).bool(message.isGet);
    }
    if (message.serverName !== "") {
      writer.uint32(122).string(message.serverName);
    }
    if (message.proxyId !== "") {
      writer.uint32(130).string(message.proxyId);
    }
    if (message.enterType !== 0) {
      writer.uint32(136).int32(message.enterType);
    }
    if (message.startType !== 0) {
      writer.uint32(144).int32(message.startType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dungeonId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.campaignId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.open = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.roomType = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.nameKey = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isInvite = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.capacity = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.isGet = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.proxyId = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.enterType = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.startType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomReqMsg {
    return {
      roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 0,
      dungeonId: isSet(object.dungeonId) ? globalThis.Number(object.dungeonId) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
      roomType: isSet(object.roomType) ? globalThis.Number(object.roomType) : 0,
      nameKey: isSet(object.nameKey) ? globalThis.String(object.nameKey) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      isInvite: isSet(object.isInvite) ? globalThis.Boolean(object.isInvite) : false,
      capacity: isSet(object.capacity) ? globalThis.Number(object.capacity) : 0,
      isGet: isSet(object.isGet) ? globalThis.Boolean(object.isGet) : false,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      proxyId: isSet(object.proxyId) ? globalThis.String(object.proxyId) : "",
      enterType: isSet(object.enterType) ? globalThis.Number(object.enterType) : 0,
      startType: isSet(object.startType) ? globalThis.Number(object.startType) : 0,
    };
  },

  toJSON(message: RoomReqMsg): unknown {
    const obj: any = {};
    if (message.roomId !== 0) {
      obj.roomId = Math.round(message.roomId);
    }
    if (message.dungeonId !== 0) {
      obj.dungeonId = Math.round(message.dungeonId);
    }
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.open !== false) {
      obj.open = message.open;
    }
    if (message.roomType !== 0) {
      obj.roomType = Math.round(message.roomType);
    }
    if (message.nameKey !== "") {
      obj.nameKey = message.nameKey;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.isInvite !== false) {
      obj.isInvite = message.isInvite;
    }
    if (message.capacity !== 0) {
      obj.capacity = Math.round(message.capacity);
    }
    if (message.isGet !== false) {
      obj.isGet = message.isGet;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.proxyId !== "") {
      obj.proxyId = message.proxyId;
    }
    if (message.enterType !== 0) {
      obj.enterType = Math.round(message.enterType);
    }
    if (message.startType !== 0) {
      obj.startType = Math.round(message.startType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomReqMsg>, I>>(base?: I): RoomReqMsg {
    return RoomReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomReqMsg>, I>>(object: I): RoomReqMsg {
    const message = createBaseRoomReqMsg();
    message.roomId = object.roomId ?? 0;
    message.dungeonId = object.dungeonId ?? 0;
    message.campaignId = object.campaignId ?? 0;
    message.armyId = object.armyId ?? 0;
    message.userId = object.userId ?? 0;
    message.state = object.state ?? 0;
    message.index = object.index ?? 0;
    message.open = object.open ?? false;
    message.roomType = object.roomType ?? 0;
    message.nameKey = object.nameKey ?? "";
    message.password = object.password ?? "";
    message.isInvite = object.isInvite ?? false;
    message.capacity = object.capacity ?? 0;
    message.isGet = object.isGet ?? false;
    message.serverName = object.serverName ?? "";
    message.proxyId = object.proxyId ?? "";
    message.enterType = object.enterType ?? 0;
    message.startType = object.startType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
