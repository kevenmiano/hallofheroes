// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/MarriageMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface MarriageMsg {
  mateId: number;
  state: number;
  ringTemplateId: number;
  marriageTime: string;
  specTemplateId: number;
  mateNick: string;
  answerNum: number;
  mateLogoutDays: number;
  marTimeId: number;
  mateHeadId: number;
}

function createBaseMarriageMsg(): MarriageMsg {
  return {
    mateId: 0,
    state: 0,
    ringTemplateId: 0,
    marriageTime: "",
    specTemplateId: 0,
    mateNick: "",
    answerNum: 0,
    mateLogoutDays: 0,
    marTimeId: 0,
    mateHeadId: 0,
  };
}

export const MarriageMsg: MessageFns<MarriageMsg> = {
  encode(message: MarriageMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mateId !== 0) {
      writer.uint32(8).int32(message.mateId);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.ringTemplateId !== 0) {
      writer.uint32(24).int32(message.ringTemplateId);
    }
    if (message.marriageTime !== "") {
      writer.uint32(34).string(message.marriageTime);
    }
    if (message.specTemplateId !== 0) {
      writer.uint32(40).int32(message.specTemplateId);
    }
    if (message.mateNick !== "") {
      writer.uint32(50).string(message.mateNick);
    }
    if (message.answerNum !== 0) {
      writer.uint32(56).int32(message.answerNum);
    }
    if (message.mateLogoutDays !== 0) {
      writer.uint32(64).int32(message.mateLogoutDays);
    }
    if (message.marTimeId !== 0) {
      writer.uint32(72).int32(message.marTimeId);
    }
    if (message.mateHeadId !== 0) {
      writer.uint32(80).int32(message.mateHeadId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarriageMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarriageMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mateId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ringTemplateId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.marriageTime = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.specTemplateId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mateNick = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.answerNum = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.mateLogoutDays = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.marTimeId = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mateHeadId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarriageMsg {
    return {
      mateId: isSet(object.mateId) ? globalThis.Number(object.mateId) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      ringTemplateId: isSet(object.ringTemplateId) ? globalThis.Number(object.ringTemplateId) : 0,
      marriageTime: isSet(object.marriageTime) ? globalThis.String(object.marriageTime) : "",
      specTemplateId: isSet(object.specTemplateId) ? globalThis.Number(object.specTemplateId) : 0,
      mateNick: isSet(object.mateNick) ? globalThis.String(object.mateNick) : "",
      answerNum: isSet(object.answerNum) ? globalThis.Number(object.answerNum) : 0,
      mateLogoutDays: isSet(object.mateLogoutDays) ? globalThis.Number(object.mateLogoutDays) : 0,
      marTimeId: isSet(object.marTimeId) ? globalThis.Number(object.marTimeId) : 0,
      mateHeadId: isSet(object.mateHeadId) ? globalThis.Number(object.mateHeadId) : 0,
    };
  },

  toJSON(message: MarriageMsg): unknown {
    const obj: any = {};
    if (message.mateId !== 0) {
      obj.mateId = Math.round(message.mateId);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.ringTemplateId !== 0) {
      obj.ringTemplateId = Math.round(message.ringTemplateId);
    }
    if (message.marriageTime !== "") {
      obj.marriageTime = message.marriageTime;
    }
    if (message.specTemplateId !== 0) {
      obj.specTemplateId = Math.round(message.specTemplateId);
    }
    if (message.mateNick !== "") {
      obj.mateNick = message.mateNick;
    }
    if (message.answerNum !== 0) {
      obj.answerNum = Math.round(message.answerNum);
    }
    if (message.mateLogoutDays !== 0) {
      obj.mateLogoutDays = Math.round(message.mateLogoutDays);
    }
    if (message.marTimeId !== 0) {
      obj.marTimeId = Math.round(message.marTimeId);
    }
    if (message.mateHeadId !== 0) {
      obj.mateHeadId = Math.round(message.mateHeadId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarriageMsg>, I>>(base?: I): MarriageMsg {
    return MarriageMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarriageMsg>, I>>(object: I): MarriageMsg {
    const message = createBaseMarriageMsg();
    message.mateId = object.mateId ?? 0;
    message.state = object.state ?? 0;
    message.ringTemplateId = object.ringTemplateId ?? 0;
    message.marriageTime = object.marriageTime ?? "";
    message.specTemplateId = object.specTemplateId ?? 0;
    message.mateNick = object.mateNick ?? "";
    message.answerNum = object.answerNum ?? 0;
    message.mateLogoutDays = object.mateLogoutDays ?? 0;
    message.marTimeId = object.marTimeId ?? 0;
    message.mateHeadId = object.mateHeadId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
