// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vehicle/VehicleNpcNodeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vehicle";

export interface VehicleNpcNodeMsg {
  nodeId: string;
  type: string;
  curX: string;
  curY: string;
  state: string;
  hp: string;
  name: string;
  sonType: string;
  heroTempId: string;
  resource: string;
  nameColor: string;
  restX: string;
  restY: string;
  team: string;
  path: number[];
  skillBuffList: number[];
}

function createBaseVehicleNpcNodeMsg(): VehicleNpcNodeMsg {
  return {
    nodeId: "",
    type: "",
    curX: "",
    curY: "",
    state: "",
    hp: "",
    name: "",
    sonType: "",
    heroTempId: "",
    resource: "",
    nameColor: "",
    restX: "",
    restY: "",
    team: "",
    path: [],
    skillBuffList: [],
  };
}

export const VehicleNpcNodeMsg: MessageFns<VehicleNpcNodeMsg> = {
  encode(message: VehicleNpcNodeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== "") {
      writer.uint32(10).string(message.nodeId);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.curX !== "") {
      writer.uint32(26).string(message.curX);
    }
    if (message.curY !== "") {
      writer.uint32(34).string(message.curY);
    }
    if (message.state !== "") {
      writer.uint32(42).string(message.state);
    }
    if (message.hp !== "") {
      writer.uint32(50).string(message.hp);
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.sonType !== "") {
      writer.uint32(66).string(message.sonType);
    }
    if (message.heroTempId !== "") {
      writer.uint32(74).string(message.heroTempId);
    }
    if (message.resource !== "") {
      writer.uint32(82).string(message.resource);
    }
    if (message.nameColor !== "") {
      writer.uint32(90).string(message.nameColor);
    }
    if (message.restX !== "") {
      writer.uint32(98).string(message.restX);
    }
    if (message.restY !== "") {
      writer.uint32(106).string(message.restY);
    }
    if (message.team !== "") {
      writer.uint32(114).string(message.team);
    }
    writer.uint32(122).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(130).fork();
    for (const v of message.skillBuffList) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleNpcNodeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleNpcNodeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.curX = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.curY = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.hp = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sonType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.heroTempId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nameColor = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.restX = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.restY = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 15: {
          if (tag === 120) {
            message.path.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag === 128) {
            message.skillBuffList.push(reader.int32());

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.skillBuffList.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleNpcNodeMsg {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      curX: isSet(object.curX) ? globalThis.String(object.curX) : "",
      curY: isSet(object.curY) ? globalThis.String(object.curY) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      hp: isSet(object.hp) ? globalThis.String(object.hp) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sonType: isSet(object.sonType) ? globalThis.String(object.sonType) : "",
      heroTempId: isSet(object.heroTempId) ? globalThis.String(object.heroTempId) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      nameColor: isSet(object.nameColor) ? globalThis.String(object.nameColor) : "",
      restX: isSet(object.restX) ? globalThis.String(object.restX) : "",
      restY: isSet(object.restY) ? globalThis.String(object.restY) : "",
      team: isSet(object.team) ? globalThis.String(object.team) : "",
      path: globalThis.Array.isArray(object?.path) ? object.path.map((e: any) => globalThis.Number(e)) : [],
      skillBuffList: globalThis.Array.isArray(object?.skillBuffList)
        ? object.skillBuffList.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: VehicleNpcNodeMsg): unknown {
    const obj: any = {};
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.curX !== "") {
      obj.curX = message.curX;
    }
    if (message.curY !== "") {
      obj.curY = message.curY;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.hp !== "") {
      obj.hp = message.hp;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sonType !== "") {
      obj.sonType = message.sonType;
    }
    if (message.heroTempId !== "") {
      obj.heroTempId = message.heroTempId;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.nameColor !== "") {
      obj.nameColor = message.nameColor;
    }
    if (message.restX !== "") {
      obj.restX = message.restX;
    }
    if (message.restY !== "") {
      obj.restY = message.restY;
    }
    if (message.team !== "") {
      obj.team = message.team;
    }
    if (message.path?.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.skillBuffList?.length) {
      obj.skillBuffList = message.skillBuffList.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleNpcNodeMsg>, I>>(base?: I): VehicleNpcNodeMsg {
    return VehicleNpcNodeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleNpcNodeMsg>, I>>(object: I): VehicleNpcNodeMsg {
    const message = createBaseVehicleNpcNodeMsg();
    message.nodeId = object.nodeId ?? "";
    message.type = object.type ?? "";
    message.curX = object.curX ?? "";
    message.curY = object.curY ?? "";
    message.state = object.state ?? "";
    message.hp = object.hp ?? "";
    message.name = object.name ?? "";
    message.sonType = object.sonType ?? "";
    message.heroTempId = object.heroTempId ?? "";
    message.resource = object.resource ?? "";
    message.nameColor = object.nameColor ?? "";
    message.restX = object.restX ?? "";
    message.restY = object.restY ?? "";
    message.team = object.team ?? "";
    message.path = object.path?.map((e) => e) || [];
    message.skillBuffList = object.skillBuffList?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
