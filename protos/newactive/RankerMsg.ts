// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: newactive/RankerMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.newactive";

export interface RankerMsg {
  rankType: number;
  entityId: number;
  score: string;
  time: string;
  rank: number;
  record: string;
  activeId: number;
  nick: string;
}

function createBaseRankerMsg(): RankerMsg {
  return { rankType: 0, entityId: 0, score: "", time: "", rank: 0, record: "", activeId: 0, nick: "" };
}

export const RankerMsg: MessageFns<RankerMsg> = {
  encode(message: RankerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankType !== 0) {
      writer.uint32(8).int32(message.rankType);
    }
    if (message.entityId !== 0) {
      writer.uint32(16).int32(message.entityId);
    }
    if (message.score !== "") {
      writer.uint32(26).string(message.score);
    }
    if (message.time !== "") {
      writer.uint32(34).string(message.time);
    }
    if (message.rank !== 0) {
      writer.uint32(40).int32(message.rank);
    }
    if (message.record !== "") {
      writer.uint32(50).string(message.record);
    }
    if (message.activeId !== 0) {
      writer.uint32(56).int32(message.activeId);
    }
    if (message.nick !== "") {
      writer.uint32(66).string(message.nick);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rankType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.entityId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.score = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.time = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.record = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.activeId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.nick = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankerMsg {
    return {
      rankType: isSet(object.rankType) ? globalThis.Number(object.rankType) : 0,
      entityId: isSet(object.entityId) ? globalThis.Number(object.entityId) : 0,
      score: isSet(object.score) ? globalThis.String(object.score) : "",
      time: isSet(object.time) ? globalThis.String(object.time) : "",
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      record: isSet(object.record) ? globalThis.String(object.record) : "",
      activeId: isSet(object.activeId) ? globalThis.Number(object.activeId) : 0,
      nick: isSet(object.nick) ? globalThis.String(object.nick) : "",
    };
  },

  toJSON(message: RankerMsg): unknown {
    const obj: any = {};
    if (message.rankType !== 0) {
      obj.rankType = Math.round(message.rankType);
    }
    if (message.entityId !== 0) {
      obj.entityId = Math.round(message.entityId);
    }
    if (message.score !== "") {
      obj.score = message.score;
    }
    if (message.time !== "") {
      obj.time = message.time;
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.record !== "") {
      obj.record = message.record;
    }
    if (message.activeId !== 0) {
      obj.activeId = Math.round(message.activeId);
    }
    if (message.nick !== "") {
      obj.nick = message.nick;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RankerMsg>, I>>(base?: I): RankerMsg {
    return RankerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RankerMsg>, I>>(object: I): RankerMsg {
    const message = createBaseRankerMsg();
    message.rankType = object.rankType ?? 0;
    message.entityId = object.entityId ?? 0;
    message.score = object.score ?? "";
    message.time = object.time ?? "";
    message.rank = object.rank ?? 0;
    message.record = object.record ?? "";
    message.activeId = object.activeId ?? 0;
    message.nick = object.nick ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
