// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignReportMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignReportMsg {
  time: number;
  woundValue: number;
  hurtValue: number;
  failedCount: number;
  woundAppraisal: number;
  hurtAppraisal: number;
  failedAppraisal: number;
  totalAppraisal: number;
  batter: number;
  teamJoin: number;
  friendJoin: number;
  vipJoin: number;
  propJoin: number;
  otherJoin: number;
  totalGp: number;
  petGp: number;
  endBossTime: number;
  endBossAppraisal: number;
}

function createBaseCampaignReportMsg(): CampaignReportMsg {
  return {
    time: 0,
    woundValue: 0,
    hurtValue: 0,
    failedCount: 0,
    woundAppraisal: 0,
    hurtAppraisal: 0,
    failedAppraisal: 0,
    totalAppraisal: 0,
    batter: 0,
    teamJoin: 0,
    friendJoin: 0,
    vipJoin: 0,
    propJoin: 0,
    otherJoin: 0,
    totalGp: 0,
    petGp: 0,
    endBossTime: 0,
    endBossAppraisal: 0,
  };
}

export const CampaignReportMsg: MessageFns<CampaignReportMsg> = {
  encode(message: CampaignReportMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== 0) {
      writer.uint32(8).int32(message.time);
    }
    if (message.woundValue !== 0) {
      writer.uint32(16).int32(message.woundValue);
    }
    if (message.hurtValue !== 0) {
      writer.uint32(24).int32(message.hurtValue);
    }
    if (message.failedCount !== 0) {
      writer.uint32(32).int32(message.failedCount);
    }
    if (message.woundAppraisal !== 0) {
      writer.uint32(40).int32(message.woundAppraisal);
    }
    if (message.hurtAppraisal !== 0) {
      writer.uint32(48).int32(message.hurtAppraisal);
    }
    if (message.failedAppraisal !== 0) {
      writer.uint32(56).int32(message.failedAppraisal);
    }
    if (message.totalAppraisal !== 0) {
      writer.uint32(64).int32(message.totalAppraisal);
    }
    if (message.batter !== 0) {
      writer.uint32(72).int32(message.batter);
    }
    if (message.teamJoin !== 0) {
      writer.uint32(80).int32(message.teamJoin);
    }
    if (message.friendJoin !== 0) {
      writer.uint32(88).int32(message.friendJoin);
    }
    if (message.vipJoin !== 0) {
      writer.uint32(96).int32(message.vipJoin);
    }
    if (message.propJoin !== 0) {
      writer.uint32(104).int32(message.propJoin);
    }
    if (message.otherJoin !== 0) {
      writer.uint32(112).int32(message.otherJoin);
    }
    if (message.totalGp !== 0) {
      writer.uint32(120).int32(message.totalGp);
    }
    if (message.petGp !== 0) {
      writer.uint32(128).int32(message.petGp);
    }
    if (message.endBossTime !== 0) {
      writer.uint32(136).int32(message.endBossTime);
    }
    if (message.endBossAppraisal !== 0) {
      writer.uint32(144).int32(message.endBossAppraisal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignReportMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignReportMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.time = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.woundValue = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hurtValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.failedCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.woundAppraisal = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hurtAppraisal = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.failedAppraisal = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.totalAppraisal = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.batter = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.teamJoin = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.friendJoin = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.vipJoin = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.propJoin = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.otherJoin = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.totalGp = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.petGp = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.endBossTime = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.endBossAppraisal = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignReportMsg {
    return {
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      woundValue: isSet(object.woundValue) ? globalThis.Number(object.woundValue) : 0,
      hurtValue: isSet(object.hurtValue) ? globalThis.Number(object.hurtValue) : 0,
      failedCount: isSet(object.failedCount) ? globalThis.Number(object.failedCount) : 0,
      woundAppraisal: isSet(object.woundAppraisal) ? globalThis.Number(object.woundAppraisal) : 0,
      hurtAppraisal: isSet(object.hurtAppraisal) ? globalThis.Number(object.hurtAppraisal) : 0,
      failedAppraisal: isSet(object.failedAppraisal) ? globalThis.Number(object.failedAppraisal) : 0,
      totalAppraisal: isSet(object.totalAppraisal) ? globalThis.Number(object.totalAppraisal) : 0,
      batter: isSet(object.batter) ? globalThis.Number(object.batter) : 0,
      teamJoin: isSet(object.teamJoin) ? globalThis.Number(object.teamJoin) : 0,
      friendJoin: isSet(object.friendJoin) ? globalThis.Number(object.friendJoin) : 0,
      vipJoin: isSet(object.vipJoin) ? globalThis.Number(object.vipJoin) : 0,
      propJoin: isSet(object.propJoin) ? globalThis.Number(object.propJoin) : 0,
      otherJoin: isSet(object.otherJoin) ? globalThis.Number(object.otherJoin) : 0,
      totalGp: isSet(object.totalGp) ? globalThis.Number(object.totalGp) : 0,
      petGp: isSet(object.petGp) ? globalThis.Number(object.petGp) : 0,
      endBossTime: isSet(object.endBossTime) ? globalThis.Number(object.endBossTime) : 0,
      endBossAppraisal: isSet(object.endBossAppraisal) ? globalThis.Number(object.endBossAppraisal) : 0,
    };
  },

  toJSON(message: CampaignReportMsg): unknown {
    const obj: any = {};
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.woundValue !== 0) {
      obj.woundValue = Math.round(message.woundValue);
    }
    if (message.hurtValue !== 0) {
      obj.hurtValue = Math.round(message.hurtValue);
    }
    if (message.failedCount !== 0) {
      obj.failedCount = Math.round(message.failedCount);
    }
    if (message.woundAppraisal !== 0) {
      obj.woundAppraisal = Math.round(message.woundAppraisal);
    }
    if (message.hurtAppraisal !== 0) {
      obj.hurtAppraisal = Math.round(message.hurtAppraisal);
    }
    if (message.failedAppraisal !== 0) {
      obj.failedAppraisal = Math.round(message.failedAppraisal);
    }
    if (message.totalAppraisal !== 0) {
      obj.totalAppraisal = Math.round(message.totalAppraisal);
    }
    if (message.batter !== 0) {
      obj.batter = Math.round(message.batter);
    }
    if (message.teamJoin !== 0) {
      obj.teamJoin = Math.round(message.teamJoin);
    }
    if (message.friendJoin !== 0) {
      obj.friendJoin = Math.round(message.friendJoin);
    }
    if (message.vipJoin !== 0) {
      obj.vipJoin = Math.round(message.vipJoin);
    }
    if (message.propJoin !== 0) {
      obj.propJoin = Math.round(message.propJoin);
    }
    if (message.otherJoin !== 0) {
      obj.otherJoin = Math.round(message.otherJoin);
    }
    if (message.totalGp !== 0) {
      obj.totalGp = Math.round(message.totalGp);
    }
    if (message.petGp !== 0) {
      obj.petGp = Math.round(message.petGp);
    }
    if (message.endBossTime !== 0) {
      obj.endBossTime = Math.round(message.endBossTime);
    }
    if (message.endBossAppraisal !== 0) {
      obj.endBossAppraisal = Math.round(message.endBossAppraisal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignReportMsg>, I>>(base?: I): CampaignReportMsg {
    return CampaignReportMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignReportMsg>, I>>(object: I): CampaignReportMsg {
    const message = createBaseCampaignReportMsg();
    message.time = object.time ?? 0;
    message.woundValue = object.woundValue ?? 0;
    message.hurtValue = object.hurtValue ?? 0;
    message.failedCount = object.failedCount ?? 0;
    message.woundAppraisal = object.woundAppraisal ?? 0;
    message.hurtAppraisal = object.hurtAppraisal ?? 0;
    message.failedAppraisal = object.failedAppraisal ?? 0;
    message.totalAppraisal = object.totalAppraisal ?? 0;
    message.batter = object.batter ?? 0;
    message.teamJoin = object.teamJoin ?? 0;
    message.friendJoin = object.friendJoin ?? 0;
    message.vipJoin = object.vipJoin ?? 0;
    message.propJoin = object.propJoin ?? 0;
    message.otherJoin = object.otherJoin ?? 0;
    message.totalGp = object.totalGp ?? 0;
    message.petGp = object.petGp ?? 0;
    message.endBossTime = object.endBossTime ?? 0;
    message.endBossAppraisal = object.endBossAppraisal ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
