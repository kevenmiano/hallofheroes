// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignConfirmMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignConfirmMsg {
  title: string;
  body: string;
  mapId: number;
  nodeId: number;
  itemTempId: number;
  itemCount: number;
  type: number;
}

function createBaseCampaignConfirmMsg(): CampaignConfirmMsg {
  return { title: "", body: "", mapId: 0, nodeId: 0, itemTempId: 0, itemCount: 0, type: 0 };
}

export const CampaignConfirmMsg: MessageFns<CampaignConfirmMsg> = {
  encode(message: CampaignConfirmMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    if (message.mapId !== 0) {
      writer.uint32(24).int32(message.mapId);
    }
    if (message.nodeId !== 0) {
      writer.uint32(32).int32(message.nodeId);
    }
    if (message.itemTempId !== 0) {
      writer.uint32(40).int32(message.itemTempId);
    }
    if (message.itemCount !== 0) {
      writer.uint32(48).int32(message.itemCount);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignConfirmMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignConfirmMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.itemTempId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.itemCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignConfirmMsg {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      itemTempId: isSet(object.itemTempId) ? globalThis.Number(object.itemTempId) : 0,
      itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
    };
  },

  toJSON(message: CampaignConfirmMsg): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.itemTempId !== 0) {
      obj.itemTempId = Math.round(message.itemTempId);
    }
    if (message.itemCount !== 0) {
      obj.itemCount = Math.round(message.itemCount);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignConfirmMsg>, I>>(base?: I): CampaignConfirmMsg {
    return CampaignConfirmMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignConfirmMsg>, I>>(object: I): CampaignConfirmMsg {
    const message = createBaseCampaignConfirmMsg();
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    message.mapId = object.mapId ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.itemTempId = object.itemTempId ?? 0;
    message.itemCount = object.itemCount ?? 0;
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
