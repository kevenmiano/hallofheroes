// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/GoldenSheepMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface GoldenSheepMsg {
  op: number;
  index: number;
  myCount: number;
  isReward: number;
  rewardId: number;
  totalCount: number;
  curCount: number;
  sheepData: number[];
  isOpen: number;
  state: number;
  openTime: string;
  stopTime: string;
  count: number;
  nextTime: number;
  isover: boolean;
}

function createBaseGoldenSheepMsg(): GoldenSheepMsg {
  return {
    op: 0,
    index: 0,
    myCount: 0,
    isReward: 0,
    rewardId: 0,
    totalCount: 0,
    curCount: 0,
    sheepData: [],
    isOpen: 0,
    state: 0,
    openTime: "",
    stopTime: "",
    count: 0,
    nextTime: 0,
    isover: false,
  };
}

export const GoldenSheepMsg: MessageFns<GoldenSheepMsg> = {
  encode(message: GoldenSheepMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.index !== 0) {
      writer.uint32(16).int32(message.index);
    }
    if (message.myCount !== 0) {
      writer.uint32(24).int32(message.myCount);
    }
    if (message.isReward !== 0) {
      writer.uint32(32).int32(message.isReward);
    }
    if (message.rewardId !== 0) {
      writer.uint32(40).int32(message.rewardId);
    }
    if (message.totalCount !== 0) {
      writer.uint32(48).int32(message.totalCount);
    }
    if (message.curCount !== 0) {
      writer.uint32(56).int32(message.curCount);
    }
    writer.uint32(66).fork();
    for (const v of message.sheepData) {
      writer.int32(v);
    }
    writer.join();
    if (message.isOpen !== 0) {
      writer.uint32(72).int32(message.isOpen);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.openTime !== "") {
      writer.uint32(90).string(message.openTime);
    }
    if (message.stopTime !== "") {
      writer.uint32(98).string(message.stopTime);
    }
    if (message.count !== 0) {
      writer.uint32(104).int32(message.count);
    }
    if (message.nextTime !== 0) {
      writer.uint32(112).int32(message.nextTime);
    }
    if (message.isover !== false) {
      writer.uint32(120).bool(message.isover);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoldenSheepMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoldenSheepMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.myCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isReward = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rewardId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.sheepData.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sheepData.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isOpen = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.openTime = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.stopTime = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.nextTime = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.isover = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoldenSheepMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      myCount: isSet(object.myCount) ? globalThis.Number(object.myCount) : 0,
      isReward: isSet(object.isReward) ? globalThis.Number(object.isReward) : 0,
      rewardId: isSet(object.rewardId) ? globalThis.Number(object.rewardId) : 0,
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      curCount: isSet(object.curCount) ? globalThis.Number(object.curCount) : 0,
      sheepData: globalThis.Array.isArray(object?.sheepData)
        ? object.sheepData.map((e: any) => globalThis.Number(e))
        : [],
      isOpen: isSet(object.isOpen) ? globalThis.Number(object.isOpen) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      openTime: isSet(object.openTime) ? globalThis.String(object.openTime) : "",
      stopTime: isSet(object.stopTime) ? globalThis.String(object.stopTime) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      nextTime: isSet(object.nextTime) ? globalThis.Number(object.nextTime) : 0,
      isover: isSet(object.isover) ? globalThis.Boolean(object.isover) : false,
    };
  },

  toJSON(message: GoldenSheepMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.myCount !== 0) {
      obj.myCount = Math.round(message.myCount);
    }
    if (message.isReward !== 0) {
      obj.isReward = Math.round(message.isReward);
    }
    if (message.rewardId !== 0) {
      obj.rewardId = Math.round(message.rewardId);
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.curCount !== 0) {
      obj.curCount = Math.round(message.curCount);
    }
    if (message.sheepData?.length) {
      obj.sheepData = message.sheepData.map((e) => Math.round(e));
    }
    if (message.isOpen !== 0) {
      obj.isOpen = Math.round(message.isOpen);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.openTime !== "") {
      obj.openTime = message.openTime;
    }
    if (message.stopTime !== "") {
      obj.stopTime = message.stopTime;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.nextTime !== 0) {
      obj.nextTime = Math.round(message.nextTime);
    }
    if (message.isover !== false) {
      obj.isover = message.isover;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GoldenSheepMsg>, I>>(base?: I): GoldenSheepMsg {
    return GoldenSheepMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GoldenSheepMsg>, I>>(object: I): GoldenSheepMsg {
    const message = createBaseGoldenSheepMsg();
    message.op = object.op ?? 0;
    message.index = object.index ?? 0;
    message.myCount = object.myCount ?? 0;
    message.isReward = object.isReward ?? 0;
    message.rewardId = object.rewardId ?? 0;
    message.totalCount = object.totalCount ?? 0;
    message.curCount = object.curCount ?? 0;
    message.sheepData = object.sheepData?.map((e) => e) || [];
    message.isOpen = object.isOpen ?? 0;
    message.state = object.state ?? 0;
    message.openTime = object.openTime ?? "";
    message.stopTime = object.stopTime ?? "";
    message.count = object.count ?? 0;
    message.nextTime = object.nextTime ?? 0;
    message.isover = object.isover ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
