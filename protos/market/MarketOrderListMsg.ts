// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: market/MarketOrderListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.market";

export interface MarketOrderListMsg {
  op: number;
  orderList: number[];
  freeUseMarkeOrderCount: number;
  payUseMarketOrderCount: number;
  freeUsePurchaseCount: number;
  payUsePurchaseCount: number;
}

function createBaseMarketOrderListMsg(): MarketOrderListMsg {
  return {
    op: 0,
    orderList: [],
    freeUseMarkeOrderCount: 0,
    payUseMarketOrderCount: 0,
    freeUsePurchaseCount: 0,
    payUsePurchaseCount: 0,
  };
}

export const MarketOrderListMsg: MessageFns<MarketOrderListMsg> = {
  encode(message: MarketOrderListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    writer.uint32(18).fork();
    for (const v of message.orderList) {
      writer.int32(v);
    }
    writer.join();
    if (message.freeUseMarkeOrderCount !== 0) {
      writer.uint32(24).int32(message.freeUseMarkeOrderCount);
    }
    if (message.payUseMarketOrderCount !== 0) {
      writer.uint32(32).int32(message.payUseMarketOrderCount);
    }
    if (message.freeUsePurchaseCount !== 0) {
      writer.uint32(40).int32(message.freeUsePurchaseCount);
    }
    if (message.payUsePurchaseCount !== 0) {
      writer.uint32(48).int32(message.payUsePurchaseCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarketOrderListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarketOrderListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.orderList.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.orderList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.freeUseMarkeOrderCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.payUseMarketOrderCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.freeUsePurchaseCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.payUsePurchaseCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarketOrderListMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      orderList: globalThis.Array.isArray(object?.orderList)
        ? object.orderList.map((e: any) => globalThis.Number(e))
        : [],
      freeUseMarkeOrderCount: isSet(object.freeUseMarkeOrderCount)
        ? globalThis.Number(object.freeUseMarkeOrderCount)
        : 0,
      payUseMarketOrderCount: isSet(object.payUseMarketOrderCount)
        ? globalThis.Number(object.payUseMarketOrderCount)
        : 0,
      freeUsePurchaseCount: isSet(object.freeUsePurchaseCount) ? globalThis.Number(object.freeUsePurchaseCount) : 0,
      payUsePurchaseCount: isSet(object.payUsePurchaseCount) ? globalThis.Number(object.payUsePurchaseCount) : 0,
    };
  },

  toJSON(message: MarketOrderListMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.orderList?.length) {
      obj.orderList = message.orderList.map((e) => Math.round(e));
    }
    if (message.freeUseMarkeOrderCount !== 0) {
      obj.freeUseMarkeOrderCount = Math.round(message.freeUseMarkeOrderCount);
    }
    if (message.payUseMarketOrderCount !== 0) {
      obj.payUseMarketOrderCount = Math.round(message.payUseMarketOrderCount);
    }
    if (message.freeUsePurchaseCount !== 0) {
      obj.freeUsePurchaseCount = Math.round(message.freeUsePurchaseCount);
    }
    if (message.payUsePurchaseCount !== 0) {
      obj.payUsePurchaseCount = Math.round(message.payUsePurchaseCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarketOrderListMsg>, I>>(base?: I): MarketOrderListMsg {
    return MarketOrderListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarketOrderListMsg>, I>>(object: I): MarketOrderListMsg {
    const message = createBaseMarketOrderListMsg();
    message.op = object.op ?? 0;
    message.orderList = object.orderList?.map((e) => e) || [];
    message.freeUseMarkeOrderCount = object.freeUseMarkeOrderCount ?? 0;
    message.payUseMarketOrderCount = object.payUseMarketOrderCount ?? 0;
    message.freeUsePurchaseCount = object.freeUsePurchaseCount ?? 0;
    message.payUsePurchaseCount = object.payUsePurchaseCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
