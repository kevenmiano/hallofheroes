// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: room/RoomInviteMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.room";

export interface RoomInviteMsg {
  roomId: number;
  playerId: number;
  nickName: string;
  name: string;
  signStr: string;
  roomType: number;
  tempId: number;
  position: number;
  userKey: string;
  bossCount: string;
  isCross: string;
}

function createBaseRoomInviteMsg(): RoomInviteMsg {
  return {
    roomId: 0,
    playerId: 0,
    nickName: "",
    name: "",
    signStr: "",
    roomType: 0,
    tempId: 0,
    position: 0,
    userKey: "",
    bossCount: "",
    isCross: "",
  };
}

export const RoomInviteMsg: MessageFns<RoomInviteMsg> = {
  encode(message: RoomInviteMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== 0) {
      writer.uint32(8).int32(message.roomId);
    }
    if (message.playerId !== 0) {
      writer.uint32(16).int32(message.playerId);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.signStr !== "") {
      writer.uint32(42).string(message.signStr);
    }
    if (message.roomType !== 0) {
      writer.uint32(48).int32(message.roomType);
    }
    if (message.tempId !== 0) {
      writer.uint32(56).int32(message.tempId);
    }
    if (message.position !== 0) {
      writer.uint32(64).int32(message.position);
    }
    if (message.userKey !== "") {
      writer.uint32(74).string(message.userKey);
    }
    if (message.bossCount !== "") {
      writer.uint32(82).string(message.bossCount);
    }
    if (message.isCross !== "") {
      writer.uint32(90).string(message.isCross);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomInviteMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomInviteMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signStr = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.roomType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.tempId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.bossCount = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.isCross = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomInviteMsg {
    return {
      roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      signStr: isSet(object.signStr) ? globalThis.String(object.signStr) : "",
      roomType: isSet(object.roomType) ? globalThis.Number(object.roomType) : 0,
      tempId: isSet(object.tempId) ? globalThis.Number(object.tempId) : 0,
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      userKey: isSet(object.userKey) ? globalThis.String(object.userKey) : "",
      bossCount: isSet(object.bossCount) ? globalThis.String(object.bossCount) : "",
      isCross: isSet(object.isCross) ? globalThis.String(object.isCross) : "",
    };
  },

  toJSON(message: RoomInviteMsg): unknown {
    const obj: any = {};
    if (message.roomId !== 0) {
      obj.roomId = Math.round(message.roomId);
    }
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.signStr !== "") {
      obj.signStr = message.signStr;
    }
    if (message.roomType !== 0) {
      obj.roomType = Math.round(message.roomType);
    }
    if (message.tempId !== 0) {
      obj.tempId = Math.round(message.tempId);
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.userKey !== "") {
      obj.userKey = message.userKey;
    }
    if (message.bossCount !== "") {
      obj.bossCount = message.bossCount;
    }
    if (message.isCross !== "") {
      obj.isCross = message.isCross;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomInviteMsg>, I>>(base?: I): RoomInviteMsg {
    return RoomInviteMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomInviteMsg>, I>>(object: I): RoomInviteMsg {
    const message = createBaseRoomInviteMsg();
    message.roomId = object.roomId ?? 0;
    message.playerId = object.playerId ?? 0;
    message.nickName = object.nickName ?? "";
    message.name = object.name ?? "";
    message.signStr = object.signStr ?? "";
    message.roomType = object.roomType ?? 0;
    message.tempId = object.tempId ?? 0;
    message.position = object.position ?? 0;
    message.userKey = object.userKey ?? "";
    message.bossCount = object.bossCount ?? "";
    message.isCross = object.isCross ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
