// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: lucky/LordsOrderListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.lucky";

export interface LordsOrderListMsg {
  leftTime: number;
  maxTurn: number;
  currTurn: number;
  myOrder: number;
  winCount: number;
  score: number;
  lordsInfo: number[];
  param1: number;
  param2: number;
  param3: string;
  param4: string;
}

function createBaseLordsOrderListMsg(): LordsOrderListMsg {
  return {
    leftTime: 0,
    maxTurn: 0,
    currTurn: 0,
    myOrder: 0,
    winCount: 0,
    score: 0,
    lordsInfo: [],
    param1: 0,
    param2: 0,
    param3: "",
    param4: "",
  };
}

export const LordsOrderListMsg: MessageFns<LordsOrderListMsg> = {
  encode(message: LordsOrderListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftTime !== 0) {
      writer.uint32(8).int32(message.leftTime);
    }
    if (message.maxTurn !== 0) {
      writer.uint32(16).int32(message.maxTurn);
    }
    if (message.currTurn !== 0) {
      writer.uint32(24).int32(message.currTurn);
    }
    if (message.myOrder !== 0) {
      writer.uint32(32).int32(message.myOrder);
    }
    if (message.winCount !== 0) {
      writer.uint32(40).int32(message.winCount);
    }
    if (message.score !== 0) {
      writer.uint32(48).int32(message.score);
    }
    writer.uint32(58).fork();
    for (const v of message.lordsInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.param1 !== 0) {
      writer.uint32(64).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(72).int32(message.param2);
    }
    if (message.param3 !== "") {
      writer.uint32(82).string(message.param3);
    }
    if (message.param4 !== "") {
      writer.uint32(90).string(message.param4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LordsOrderListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLordsOrderListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxTurn = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currTurn = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.myOrder = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.winCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.lordsInfo.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.lordsInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.param3 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.param4 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LordsOrderListMsg {
    return {
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      maxTurn: isSet(object.maxTurn) ? globalThis.Number(object.maxTurn) : 0,
      currTurn: isSet(object.currTurn) ? globalThis.Number(object.currTurn) : 0,
      myOrder: isSet(object.myOrder) ? globalThis.Number(object.myOrder) : 0,
      winCount: isSet(object.winCount) ? globalThis.Number(object.winCount) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      lordsInfo: globalThis.Array.isArray(object?.lordsInfo)
        ? object.lordsInfo.map((e: any) => globalThis.Number(e))
        : [],
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
      param3: isSet(object.param3) ? globalThis.String(object.param3) : "",
      param4: isSet(object.param4) ? globalThis.String(object.param4) : "",
    };
  },

  toJSON(message: LordsOrderListMsg): unknown {
    const obj: any = {};
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.maxTurn !== 0) {
      obj.maxTurn = Math.round(message.maxTurn);
    }
    if (message.currTurn !== 0) {
      obj.currTurn = Math.round(message.currTurn);
    }
    if (message.myOrder !== 0) {
      obj.myOrder = Math.round(message.myOrder);
    }
    if (message.winCount !== 0) {
      obj.winCount = Math.round(message.winCount);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.lordsInfo?.length) {
      obj.lordsInfo = message.lordsInfo.map((e) => Math.round(e));
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    if (message.param3 !== "") {
      obj.param3 = message.param3;
    }
    if (message.param4 !== "") {
      obj.param4 = message.param4;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LordsOrderListMsg>, I>>(base?: I): LordsOrderListMsg {
    return LordsOrderListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LordsOrderListMsg>, I>>(object: I): LordsOrderListMsg {
    const message = createBaseLordsOrderListMsg();
    message.leftTime = object.leftTime ?? 0;
    message.maxTurn = object.maxTurn ?? 0;
    message.currTurn = object.currTurn ?? 0;
    message.myOrder = object.myOrder ?? 0;
    message.winCount = object.winCount ?? 0;
    message.score = object.score ?? 0;
    message.lordsInfo = object.lordsInfo?.map((e) => e) || [];
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    message.param3 = object.param3 ?? "";
    message.param4 = object.param4 ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
