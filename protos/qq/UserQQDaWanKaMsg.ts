// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: qq/UserQQDaWanKaMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.qq";

export interface UserQQDaWanKaMsg {
  score: number;
  level: number;
  binding: boolean;
  discount: number;
  payReturnCount: number;
  isUsingCard: boolean;
  realLevel: number;
  giftState: number[];
}

function createBaseUserQQDaWanKaMsg(): UserQQDaWanKaMsg {
  return {
    score: 0,
    level: 0,
    binding: false,
    discount: 0,
    payReturnCount: 0,
    isUsingCard: false,
    realLevel: 0,
    giftState: [],
  };
}

export const UserQQDaWanKaMsg: MessageFns<UserQQDaWanKaMsg> = {
  encode(message: UserQQDaWanKaMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== 0) {
      writer.uint32(8).int32(message.score);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.binding !== false) {
      writer.uint32(24).bool(message.binding);
    }
    if (message.discount !== 0) {
      writer.uint32(32).int32(message.discount);
    }
    if (message.payReturnCount !== 0) {
      writer.uint32(40).int32(message.payReturnCount);
    }
    if (message.isUsingCard !== false) {
      writer.uint32(48).bool(message.isUsingCard);
    }
    if (message.realLevel !== 0) {
      writer.uint32(56).int32(message.realLevel);
    }
    writer.uint32(66).fork();
    for (const v of message.giftState) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserQQDaWanKaMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserQQDaWanKaMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.binding = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.discount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.payReturnCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isUsingCard = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.realLevel = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.giftState.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.giftState.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserQQDaWanKaMsg {
    return {
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      binding: isSet(object.binding) ? globalThis.Boolean(object.binding) : false,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      payReturnCount: isSet(object.payReturnCount) ? globalThis.Number(object.payReturnCount) : 0,
      isUsingCard: isSet(object.isUsingCard) ? globalThis.Boolean(object.isUsingCard) : false,
      realLevel: isSet(object.realLevel) ? globalThis.Number(object.realLevel) : 0,
      giftState: globalThis.Array.isArray(object?.giftState)
        ? object.giftState.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: UserQQDaWanKaMsg): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.binding !== false) {
      obj.binding = message.binding;
    }
    if (message.discount !== 0) {
      obj.discount = Math.round(message.discount);
    }
    if (message.payReturnCount !== 0) {
      obj.payReturnCount = Math.round(message.payReturnCount);
    }
    if (message.isUsingCard !== false) {
      obj.isUsingCard = message.isUsingCard;
    }
    if (message.realLevel !== 0) {
      obj.realLevel = Math.round(message.realLevel);
    }
    if (message.giftState?.length) {
      obj.giftState = message.giftState.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserQQDaWanKaMsg>, I>>(base?: I): UserQQDaWanKaMsg {
    return UserQQDaWanKaMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserQQDaWanKaMsg>, I>>(object: I): UserQQDaWanKaMsg {
    const message = createBaseUserQQDaWanKaMsg();
    message.score = object.score ?? 0;
    message.level = object.level ?? 0;
    message.binding = object.binding ?? false;
    message.discount = object.discount ?? 0;
    message.payReturnCount = object.payReturnCount ?? 0;
    message.isUsingCard = object.isUsingCard ?? false;
    message.realLevel = object.realLevel ?? 0;
    message.giftState = object.giftState?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
