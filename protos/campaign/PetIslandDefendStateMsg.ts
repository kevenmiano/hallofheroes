// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/PetIslandDefendStateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface PetIslandDefendStateMsg {
  leftTime: string;
  mapId: number;
  bossId: number;
  peaceMiddle: number;
  peaceHigh: number;
  peaceBoss: number;
  ragePoint: number;
}

function createBasePetIslandDefendStateMsg(): PetIslandDefendStateMsg {
  return { leftTime: "", mapId: 0, bossId: 0, peaceMiddle: 0, peaceHigh: 0, peaceBoss: 0, ragePoint: 0 };
}

export const PetIslandDefendStateMsg: MessageFns<PetIslandDefendStateMsg> = {
  encode(message: PetIslandDefendStateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftTime !== "") {
      writer.uint32(10).string(message.leftTime);
    }
    if (message.mapId !== 0) {
      writer.uint32(16).int32(message.mapId);
    }
    if (message.bossId !== 0) {
      writer.uint32(24).int32(message.bossId);
    }
    if (message.peaceMiddle !== 0) {
      writer.uint32(32).int32(message.peaceMiddle);
    }
    if (message.peaceHigh !== 0) {
      writer.uint32(40).int32(message.peaceHigh);
    }
    if (message.peaceBoss !== 0) {
      writer.uint32(48).int32(message.peaceBoss);
    }
    if (message.ragePoint !== 0) {
      writer.uint32(56).int32(message.ragePoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PetIslandDefendStateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePetIslandDefendStateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leftTime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bossId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.peaceMiddle = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.peaceHigh = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.peaceBoss = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.ragePoint = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PetIslandDefendStateMsg {
    return {
      leftTime: isSet(object.leftTime) ? globalThis.String(object.leftTime) : "",
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      bossId: isSet(object.bossId) ? globalThis.Number(object.bossId) : 0,
      peaceMiddle: isSet(object.peaceMiddle) ? globalThis.Number(object.peaceMiddle) : 0,
      peaceHigh: isSet(object.peaceHigh) ? globalThis.Number(object.peaceHigh) : 0,
      peaceBoss: isSet(object.peaceBoss) ? globalThis.Number(object.peaceBoss) : 0,
      ragePoint: isSet(object.ragePoint) ? globalThis.Number(object.ragePoint) : 0,
    };
  },

  toJSON(message: PetIslandDefendStateMsg): unknown {
    const obj: any = {};
    if (message.leftTime !== "") {
      obj.leftTime = message.leftTime;
    }
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.bossId !== 0) {
      obj.bossId = Math.round(message.bossId);
    }
    if (message.peaceMiddle !== 0) {
      obj.peaceMiddle = Math.round(message.peaceMiddle);
    }
    if (message.peaceHigh !== 0) {
      obj.peaceHigh = Math.round(message.peaceHigh);
    }
    if (message.peaceBoss !== 0) {
      obj.peaceBoss = Math.round(message.peaceBoss);
    }
    if (message.ragePoint !== 0) {
      obj.ragePoint = Math.round(message.ragePoint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PetIslandDefendStateMsg>, I>>(base?: I): PetIslandDefendStateMsg {
    return PetIslandDefendStateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PetIslandDefendStateMsg>, I>>(object: I): PetIslandDefendStateMsg {
    const message = createBasePetIslandDefendStateMsg();
    message.leftTime = object.leftTime ?? "";
    message.mapId = object.mapId ?? 0;
    message.bossId = object.bossId ?? 0;
    message.peaceMiddle = object.peaceMiddle ?? 0;
    message.peaceHigh = object.peaceHigh ?? 0;
    message.peaceBoss = object.peaceBoss ?? 0;
    message.ragePoint = object.ragePoint ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
