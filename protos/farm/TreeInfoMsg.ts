// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: farm/TreeInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.farm";

export interface TreeInfoMsg {
  userId: number;
  nickName: string;
  waterCount: number;
  fruitCount: number;
  isFirstFruit: boolean;
  nextPickTime: string;
  property1: number;
  property2: number;
  lastWaterTime: string;
  leftTime: number;
  leftPickTime: number;
  canWater: boolean;
}

function createBaseTreeInfoMsg(): TreeInfoMsg {
  return {
    userId: 0,
    nickName: "",
    waterCount: 0,
    fruitCount: 0,
    isFirstFruit: false,
    nextPickTime: "",
    property1: 0,
    property2: 0,
    lastWaterTime: "",
    leftTime: 0,
    leftPickTime: 0,
    canWater: false,
  };
}

export const TreeInfoMsg: MessageFns<TreeInfoMsg> = {
  encode(message: TreeInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.waterCount !== 0) {
      writer.uint32(24).int32(message.waterCount);
    }
    if (message.fruitCount !== 0) {
      writer.uint32(32).int32(message.fruitCount);
    }
    if (message.isFirstFruit !== false) {
      writer.uint32(40).bool(message.isFirstFruit);
    }
    if (message.nextPickTime !== "") {
      writer.uint32(50).string(message.nextPickTime);
    }
    if (message.property1 !== 0) {
      writer.uint32(56).int32(message.property1);
    }
    if (message.property2 !== 0) {
      writer.uint32(64).int32(message.property2);
    }
    if (message.lastWaterTime !== "") {
      writer.uint32(74).string(message.lastWaterTime);
    }
    if (message.leftTime !== 0) {
      writer.uint32(80).int32(message.leftTime);
    }
    if (message.leftPickTime !== 0) {
      writer.uint32(88).int32(message.leftPickTime);
    }
    if (message.canWater !== false) {
      writer.uint32(96).bool(message.canWater);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TreeInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.waterCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fruitCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isFirstFruit = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nextPickTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.property1 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.property2 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastWaterTime = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.leftPickTime = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.canWater = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreeInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      waterCount: isSet(object.waterCount) ? globalThis.Number(object.waterCount) : 0,
      fruitCount: isSet(object.fruitCount) ? globalThis.Number(object.fruitCount) : 0,
      isFirstFruit: isSet(object.isFirstFruit) ? globalThis.Boolean(object.isFirstFruit) : false,
      nextPickTime: isSet(object.nextPickTime) ? globalThis.String(object.nextPickTime) : "",
      property1: isSet(object.property1) ? globalThis.Number(object.property1) : 0,
      property2: isSet(object.property2) ? globalThis.Number(object.property2) : 0,
      lastWaterTime: isSet(object.lastWaterTime) ? globalThis.String(object.lastWaterTime) : "",
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      leftPickTime: isSet(object.leftPickTime) ? globalThis.Number(object.leftPickTime) : 0,
      canWater: isSet(object.canWater) ? globalThis.Boolean(object.canWater) : false,
    };
  },

  toJSON(message: TreeInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.waterCount !== 0) {
      obj.waterCount = Math.round(message.waterCount);
    }
    if (message.fruitCount !== 0) {
      obj.fruitCount = Math.round(message.fruitCount);
    }
    if (message.isFirstFruit !== false) {
      obj.isFirstFruit = message.isFirstFruit;
    }
    if (message.nextPickTime !== "") {
      obj.nextPickTime = message.nextPickTime;
    }
    if (message.property1 !== 0) {
      obj.property1 = Math.round(message.property1);
    }
    if (message.property2 !== 0) {
      obj.property2 = Math.round(message.property2);
    }
    if (message.lastWaterTime !== "") {
      obj.lastWaterTime = message.lastWaterTime;
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.leftPickTime !== 0) {
      obj.leftPickTime = Math.round(message.leftPickTime);
    }
    if (message.canWater !== false) {
      obj.canWater = message.canWater;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TreeInfoMsg>, I>>(base?: I): TreeInfoMsg {
    return TreeInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TreeInfoMsg>, I>>(object: I): TreeInfoMsg {
    const message = createBaseTreeInfoMsg();
    message.userId = object.userId ?? 0;
    message.nickName = object.nickName ?? "";
    message.waterCount = object.waterCount ?? 0;
    message.fruitCount = object.fruitCount ?? 0;
    message.isFirstFruit = object.isFirstFruit ?? false;
    message.nextPickTime = object.nextPickTime ?? "";
    message.property1 = object.property1 ?? 0;
    message.property2 = object.property2 ?? 0;
    message.lastWaterTime = object.lastWaterTime ?? "";
    message.leftTime = object.leftTime ?? 0;
    message.leftPickTime = object.leftPickTime ?? 0;
    message.canWater = object.canWater ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
