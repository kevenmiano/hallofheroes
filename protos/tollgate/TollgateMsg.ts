// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: tollgate/TollgateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.tollgate";

export interface TollgateMsg {
  type: number;
  userId: number;
  endTime: string;
  order: number;
  score: number;
  remainCount: number;
  remainTime: number;
  challengeInfo: number[];
  scoreInfo: number[];
  isOpen: boolean;
  curTollgateId: number;
  luckyReward: string;
  remainBuyCount: number;
  startTime: string;
  addTimeCount: number;
}

function createBaseTollgateMsg(): TollgateMsg {
  return {
    type: 0,
    userId: 0,
    endTime: "",
    order: 0,
    score: 0,
    remainCount: 0,
    remainTime: 0,
    challengeInfo: [],
    scoreInfo: [],
    isOpen: false,
    curTollgateId: 0,
    luckyReward: "",
    remainBuyCount: 0,
    startTime: "",
    addTimeCount: 0,
  };
}

export const TollgateMsg: MessageFns<TollgateMsg> = {
  encode(message: TollgateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.endTime !== "") {
      writer.uint32(26).string(message.endTime);
    }
    if (message.order !== 0) {
      writer.uint32(32).int32(message.order);
    }
    if (message.score !== 0) {
      writer.uint32(40).int32(message.score);
    }
    if (message.remainCount !== 0) {
      writer.uint32(48).int32(message.remainCount);
    }
    if (message.remainTime !== 0) {
      writer.uint32(56).int32(message.remainTime);
    }
    writer.uint32(66).fork();
    for (const v of message.challengeInfo) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.scoreInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.isOpen !== false) {
      writer.uint32(80).bool(message.isOpen);
    }
    if (message.curTollgateId !== 0) {
      writer.uint32(88).int32(message.curTollgateId);
    }
    if (message.luckyReward !== "") {
      writer.uint32(98).string(message.luckyReward);
    }
    if (message.remainBuyCount !== 0) {
      writer.uint32(104).int32(message.remainBuyCount);
    }
    if (message.startTime !== "") {
      writer.uint32(114).string(message.startTime);
    }
    if (message.addTimeCount !== 0) {
      writer.uint32(120).int32(message.addTimeCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TollgateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTollgateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.remainCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.remainTime = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.challengeInfo.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.challengeInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.scoreInfo.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scoreInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isOpen = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.curTollgateId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.luckyReward = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.remainBuyCount = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.addTimeCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TollgateMsg {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      remainCount: isSet(object.remainCount) ? globalThis.Number(object.remainCount) : 0,
      remainTime: isSet(object.remainTime) ? globalThis.Number(object.remainTime) : 0,
      challengeInfo: globalThis.Array.isArray(object?.challengeInfo)
        ? object.challengeInfo.map((e: any) => globalThis.Number(e))
        : [],
      scoreInfo: globalThis.Array.isArray(object?.scoreInfo)
        ? object.scoreInfo.map((e: any) => globalThis.Number(e))
        : [],
      isOpen: isSet(object.isOpen) ? globalThis.Boolean(object.isOpen) : false,
      curTollgateId: isSet(object.curTollgateId) ? globalThis.Number(object.curTollgateId) : 0,
      luckyReward: isSet(object.luckyReward) ? globalThis.String(object.luckyReward) : "",
      remainBuyCount: isSet(object.remainBuyCount) ? globalThis.Number(object.remainBuyCount) : 0,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      addTimeCount: isSet(object.addTimeCount) ? globalThis.Number(object.addTimeCount) : 0,
    };
  },

  toJSON(message: TollgateMsg): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.remainCount !== 0) {
      obj.remainCount = Math.round(message.remainCount);
    }
    if (message.remainTime !== 0) {
      obj.remainTime = Math.round(message.remainTime);
    }
    if (message.challengeInfo?.length) {
      obj.challengeInfo = message.challengeInfo.map((e) => Math.round(e));
    }
    if (message.scoreInfo?.length) {
      obj.scoreInfo = message.scoreInfo.map((e) => Math.round(e));
    }
    if (message.isOpen !== false) {
      obj.isOpen = message.isOpen;
    }
    if (message.curTollgateId !== 0) {
      obj.curTollgateId = Math.round(message.curTollgateId);
    }
    if (message.luckyReward !== "") {
      obj.luckyReward = message.luckyReward;
    }
    if (message.remainBuyCount !== 0) {
      obj.remainBuyCount = Math.round(message.remainBuyCount);
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.addTimeCount !== 0) {
      obj.addTimeCount = Math.round(message.addTimeCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TollgateMsg>, I>>(base?: I): TollgateMsg {
    return TollgateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TollgateMsg>, I>>(object: I): TollgateMsg {
    const message = createBaseTollgateMsg();
    message.type = object.type ?? 0;
    message.userId = object.userId ?? 0;
    message.endTime = object.endTime ?? "";
    message.order = object.order ?? 0;
    message.score = object.score ?? 0;
    message.remainCount = object.remainCount ?? 0;
    message.remainTime = object.remainTime ?? 0;
    message.challengeInfo = object.challengeInfo?.map((e) => e) || [];
    message.scoreInfo = object.scoreInfo?.map((e) => e) || [];
    message.isOpen = object.isOpen ?? false;
    message.curTollgateId = object.curTollgateId ?? 0;
    message.luckyReward = object.luckyReward ?? "";
    message.remainBuyCount = object.remainBuyCount ?? 0;
    message.startTime = object.startTime ?? "";
    message.addTimeCount = object.addTimeCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
