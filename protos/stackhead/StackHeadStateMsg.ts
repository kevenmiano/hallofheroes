// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: stackhead/StackHeadStateMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.stackhead";

export interface StackHeadStateMsg {
  state: number;
  openTime: number[];
  timestamp: string;
  index: number;
  session: number;
  myGuildSignup: boolean;
  canSignin: boolean;
  myGuildJoin: boolean;
  nextOpenTime: string;
  isSpan: boolean;
}

function createBaseStackHeadStateMsg(): StackHeadStateMsg {
  return {
    state: 0,
    openTime: [],
    timestamp: "",
    index: 0,
    session: 0,
    myGuildSignup: false,
    canSignin: false,
    myGuildJoin: false,
    nextOpenTime: "",
    isSpan: false,
  };
}

export const StackHeadStateMsg: MessageFns<StackHeadStateMsg> = {
  encode(message: StackHeadStateMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    writer.uint32(18).fork();
    for (const v of message.openTime) {
      writer.int32(v);
    }
    writer.join();
    if (message.timestamp !== "") {
      writer.uint32(26).string(message.timestamp);
    }
    if (message.index !== 0) {
      writer.uint32(32).int32(message.index);
    }
    if (message.session !== 0) {
      writer.uint32(40).int32(message.session);
    }
    if (message.myGuildSignup !== false) {
      writer.uint32(48).bool(message.myGuildSignup);
    }
    if (message.canSignin !== false) {
      writer.uint32(56).bool(message.canSignin);
    }
    if (message.myGuildJoin !== false) {
      writer.uint32(64).bool(message.myGuildJoin);
    }
    if (message.nextOpenTime !== "") {
      writer.uint32(74).string(message.nextOpenTime);
    }
    if (message.isSpan !== false) {
      writer.uint32(80).bool(message.isSpan);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StackHeadStateMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStackHeadStateMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.openTime.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.openTime.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.session = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.myGuildSignup = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.canSignin = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.myGuildJoin = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.nextOpenTime = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isSpan = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StackHeadStateMsg {
    return {
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      openTime: globalThis.Array.isArray(object?.openTime) ? object.openTime.map((e: any) => globalThis.Number(e)) : [],
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      session: isSet(object.session) ? globalThis.Number(object.session) : 0,
      myGuildSignup: isSet(object.myGuildSignup) ? globalThis.Boolean(object.myGuildSignup) : false,
      canSignin: isSet(object.canSignin) ? globalThis.Boolean(object.canSignin) : false,
      myGuildJoin: isSet(object.myGuildJoin) ? globalThis.Boolean(object.myGuildJoin) : false,
      nextOpenTime: isSet(object.nextOpenTime) ? globalThis.String(object.nextOpenTime) : "",
      isSpan: isSet(object.isSpan) ? globalThis.Boolean(object.isSpan) : false,
    };
  },

  toJSON(message: StackHeadStateMsg): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.openTime?.length) {
      obj.openTime = message.openTime.map((e) => Math.round(e));
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.session !== 0) {
      obj.session = Math.round(message.session);
    }
    if (message.myGuildSignup !== false) {
      obj.myGuildSignup = message.myGuildSignup;
    }
    if (message.canSignin !== false) {
      obj.canSignin = message.canSignin;
    }
    if (message.myGuildJoin !== false) {
      obj.myGuildJoin = message.myGuildJoin;
    }
    if (message.nextOpenTime !== "") {
      obj.nextOpenTime = message.nextOpenTime;
    }
    if (message.isSpan !== false) {
      obj.isSpan = message.isSpan;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StackHeadStateMsg>, I>>(base?: I): StackHeadStateMsg {
    return StackHeadStateMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StackHeadStateMsg>, I>>(object: I): StackHeadStateMsg {
    const message = createBaseStackHeadStateMsg();
    message.state = object.state ?? 0;
    message.openTime = object.openTime?.map((e) => e) || [];
    message.timestamp = object.timestamp ?? "";
    message.index = object.index ?? 0;
    message.session = object.session ?? 0;
    message.myGuildSignup = object.myGuildSignup ?? false;
    message.canSignin = object.canSignin ?? false;
    message.myGuildJoin = object.myGuildJoin ?? false;
    message.nextOpenTime = object.nextOpenTime ?? "";
    message.isSpan = object.isSpan ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
