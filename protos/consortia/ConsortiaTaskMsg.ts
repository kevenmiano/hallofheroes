// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaTaskMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaTaskMsg {
  taskId: number;
  starNum: number;
  refreshNum: number;
  refreshTime: number;
  status: number;
  process: number;
  rewardId: string;
  fixId: string;
  payRefreshNum: number;
}

function createBaseConsortiaTaskMsg(): ConsortiaTaskMsg {
  return {
    taskId: 0,
    starNum: 0,
    refreshNum: 0,
    refreshTime: 0,
    status: 0,
    process: 0,
    rewardId: "",
    fixId: "",
    payRefreshNum: 0,
  };
}

export const ConsortiaTaskMsg: MessageFns<ConsortiaTaskMsg> = {
  encode(message: ConsortiaTaskMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== 0) {
      writer.uint32(8).int32(message.taskId);
    }
    if (message.starNum !== 0) {
      writer.uint32(16).int32(message.starNum);
    }
    if (message.refreshNum !== 0) {
      writer.uint32(24).int32(message.refreshNum);
    }
    if (message.refreshTime !== 0) {
      writer.uint32(32).int32(message.refreshTime);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.process !== 0) {
      writer.uint32(48).int32(message.process);
    }
    if (message.rewardId !== "") {
      writer.uint32(58).string(message.rewardId);
    }
    if (message.fixId !== "") {
      writer.uint32(66).string(message.fixId);
    }
    if (message.payRefreshNum !== 0) {
      writer.uint32(72).int32(message.payRefreshNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaTaskMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaTaskMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.starNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.refreshNum = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.refreshTime = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.process = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rewardId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fixId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.payRefreshNum = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaTaskMsg {
    return {
      taskId: isSet(object.taskId) ? globalThis.Number(object.taskId) : 0,
      starNum: isSet(object.starNum) ? globalThis.Number(object.starNum) : 0,
      refreshNum: isSet(object.refreshNum) ? globalThis.Number(object.refreshNum) : 0,
      refreshTime: isSet(object.refreshTime) ? globalThis.Number(object.refreshTime) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      process: isSet(object.process) ? globalThis.Number(object.process) : 0,
      rewardId: isSet(object.rewardId) ? globalThis.String(object.rewardId) : "",
      fixId: isSet(object.fixId) ? globalThis.String(object.fixId) : "",
      payRefreshNum: isSet(object.payRefreshNum) ? globalThis.Number(object.payRefreshNum) : 0,
    };
  },

  toJSON(message: ConsortiaTaskMsg): unknown {
    const obj: any = {};
    if (message.taskId !== 0) {
      obj.taskId = Math.round(message.taskId);
    }
    if (message.starNum !== 0) {
      obj.starNum = Math.round(message.starNum);
    }
    if (message.refreshNum !== 0) {
      obj.refreshNum = Math.round(message.refreshNum);
    }
    if (message.refreshTime !== 0) {
      obj.refreshTime = Math.round(message.refreshTime);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.process !== 0) {
      obj.process = Math.round(message.process);
    }
    if (message.rewardId !== "") {
      obj.rewardId = message.rewardId;
    }
    if (message.fixId !== "") {
      obj.fixId = message.fixId;
    }
    if (message.payRefreshNum !== 0) {
      obj.payRefreshNum = Math.round(message.payRefreshNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaTaskMsg>, I>>(base?: I): ConsortiaTaskMsg {
    return ConsortiaTaskMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaTaskMsg>, I>>(object: I): ConsortiaTaskMsg {
    const message = createBaseConsortiaTaskMsg();
    message.taskId = object.taskId ?? 0;
    message.starNum = object.starNum ?? 0;
    message.refreshNum = object.refreshNum ?? 0;
    message.refreshTime = object.refreshTime ?? 0;
    message.status = object.status ?? 0;
    message.process = object.process ?? 0;
    message.rewardId = object.rewardId ?? "";
    message.fixId = object.fixId ?? "";
    message.payRefreshNum = object.payRefreshNum ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
