// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/DiscountMallMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface DiscountMallMsg {
  id: string;
  begin: string;
  end: string;
  logo: string;
  items: number[];
  scores: number[];
  myscore: number;
  myDisc: number;
}

function createBaseDiscountMallMsg(): DiscountMallMsg {
  return { id: "", begin: "", end: "", logo: "", items: [], scores: [], myscore: 0, myDisc: 0 };
}

export const DiscountMallMsg: MessageFns<DiscountMallMsg> = {
  encode(message: DiscountMallMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.begin !== "") {
      writer.uint32(18).string(message.begin);
    }
    if (message.end !== "") {
      writer.uint32(26).string(message.end);
    }
    if (message.logo !== "") {
      writer.uint32(34).string(message.logo);
    }
    writer.uint32(42).fork();
    for (const v of message.items) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.scores) {
      writer.int32(v);
    }
    writer.join();
    if (message.myscore !== 0) {
      writer.uint32(56).int32(message.myscore);
    }
    if (message.myDisc !== 0) {
      writer.uint32(64).int32(message.myDisc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscountMallMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscountMallMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.begin = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.end = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.items.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.items.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.scores.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scores.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.myscore = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.myDisc = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscountMallMsg {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      begin: isSet(object.begin) ? globalThis.String(object.begin) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => globalThis.Number(e)) : [],
      scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => globalThis.Number(e)) : [],
      myscore: isSet(object.myscore) ? globalThis.Number(object.myscore) : 0,
      myDisc: isSet(object.myDisc) ? globalThis.Number(object.myDisc) : 0,
    };
  },

  toJSON(message: DiscountMallMsg): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.begin !== "") {
      obj.begin = message.begin;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => Math.round(e));
    }
    if (message.scores?.length) {
      obj.scores = message.scores.map((e) => Math.round(e));
    }
    if (message.myscore !== 0) {
      obj.myscore = Math.round(message.myscore);
    }
    if (message.myDisc !== 0) {
      obj.myDisc = Math.round(message.myDisc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiscountMallMsg>, I>>(base?: I): DiscountMallMsg {
    return DiscountMallMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscountMallMsg>, I>>(object: I): DiscountMallMsg {
    const message = createBaseDiscountMallMsg();
    message.id = object.id ?? "";
    message.begin = object.begin ?? "";
    message.end = object.end ?? "";
    message.logo = object.logo ?? "";
    message.items = object.items?.map((e) => e) || [];
    message.scores = object.scores?.map((e) => e) || [];
    message.myscore = object.myscore ?? 0;
    message.myDisc = object.myDisc ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
