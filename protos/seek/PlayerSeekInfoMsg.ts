// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: seek/PlayerSeekInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.seek";

export interface PlayerSeekInfoMsg {
  seekCount: number;
  nextAddTime: string;
  state: number;
  eventDesc: string;
  curNodeId: number;
  op: number;
  seekNodeList: string;
}

function createBasePlayerSeekInfoMsg(): PlayerSeekInfoMsg {
  return { seekCount: 0, nextAddTime: "", state: 0, eventDesc: "", curNodeId: 0, op: 0, seekNodeList: "" };
}

export const PlayerSeekInfoMsg: MessageFns<PlayerSeekInfoMsg> = {
  encode(message: PlayerSeekInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seekCount !== 0) {
      writer.uint32(8).int32(message.seekCount);
    }
    if (message.nextAddTime !== "") {
      writer.uint32(18).string(message.nextAddTime);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.eventDesc !== "") {
      writer.uint32(34).string(message.eventDesc);
    }
    if (message.curNodeId !== 0) {
      writer.uint32(40).int32(message.curNodeId);
    }
    if (message.op !== 0) {
      writer.uint32(48).int32(message.op);
    }
    if (message.seekNodeList !== "") {
      writer.uint32(58).string(message.seekNodeList);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerSeekInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSeekInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seekCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextAddTime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.eventDesc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.curNodeId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.seekNodeList = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSeekInfoMsg {
    return {
      seekCount: isSet(object.seekCount) ? globalThis.Number(object.seekCount) : 0,
      nextAddTime: isSet(object.nextAddTime) ? globalThis.String(object.nextAddTime) : "",
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      eventDesc: isSet(object.eventDesc) ? globalThis.String(object.eventDesc) : "",
      curNodeId: isSet(object.curNodeId) ? globalThis.Number(object.curNodeId) : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      seekNodeList: isSet(object.seekNodeList) ? globalThis.String(object.seekNodeList) : "",
    };
  },

  toJSON(message: PlayerSeekInfoMsg): unknown {
    const obj: any = {};
    if (message.seekCount !== 0) {
      obj.seekCount = Math.round(message.seekCount);
    }
    if (message.nextAddTime !== "") {
      obj.nextAddTime = message.nextAddTime;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.eventDesc !== "") {
      obj.eventDesc = message.eventDesc;
    }
    if (message.curNodeId !== 0) {
      obj.curNodeId = Math.round(message.curNodeId);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.seekNodeList !== "") {
      obj.seekNodeList = message.seekNodeList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSeekInfoMsg>, I>>(base?: I): PlayerSeekInfoMsg {
    return PlayerSeekInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerSeekInfoMsg>, I>>(object: I): PlayerSeekInfoMsg {
    const message = createBasePlayerSeekInfoMsg();
    message.seekCount = object.seekCount ?? 0;
    message.nextAddTime = object.nextAddTime ?? "";
    message.state = object.state ?? 0;
    message.eventDesc = object.eventDesc ?? "";
    message.curNodeId = object.curNodeId ?? 0;
    message.op = object.op ?? 0;
    message.seekNodeList = object.seekNodeList ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
