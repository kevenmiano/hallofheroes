// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: store/StoreRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.store";

export interface StoreRspMsg {
  composeResult: boolean;
  composeTemplateId: number;
  strengResult: boolean;
  strengthenGrade: number;
  pos: number;
  objectId: number;
  bagType: number;
  masterAttr: string;
  sonAttr: string;
}

function createBaseStoreRspMsg(): StoreRspMsg {
  return {
    composeResult: false,
    composeTemplateId: 0,
    strengResult: false,
    strengthenGrade: 0,
    pos: 0,
    objectId: 0,
    bagType: 0,
    masterAttr: "",
    sonAttr: "",
  };
}

export const StoreRspMsg: MessageFns<StoreRspMsg> = {
  encode(message: StoreRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.composeResult !== false) {
      writer.uint32(8).bool(message.composeResult);
    }
    if (message.composeTemplateId !== 0) {
      writer.uint32(16).int32(message.composeTemplateId);
    }
    if (message.strengResult !== false) {
      writer.uint32(24).bool(message.strengResult);
    }
    if (message.strengthenGrade !== 0) {
      writer.uint32(32).int32(message.strengthenGrade);
    }
    if (message.pos !== 0) {
      writer.uint32(40).int32(message.pos);
    }
    if (message.objectId !== 0) {
      writer.uint32(48).int32(message.objectId);
    }
    if (message.bagType !== 0) {
      writer.uint32(56).int32(message.bagType);
    }
    if (message.masterAttr !== "") {
      writer.uint32(66).string(message.masterAttr);
    }
    if (message.sonAttr !== "") {
      writer.uint32(74).string(message.sonAttr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoreRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoreRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.composeResult = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.composeTemplateId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.strengResult = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.strengthenGrade = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.objectId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bagType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.masterAttr = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sonAttr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoreRspMsg {
    return {
      composeResult: isSet(object.composeResult) ? globalThis.Boolean(object.composeResult) : false,
      composeTemplateId: isSet(object.composeTemplateId) ? globalThis.Number(object.composeTemplateId) : 0,
      strengResult: isSet(object.strengResult) ? globalThis.Boolean(object.strengResult) : false,
      strengthenGrade: isSet(object.strengthenGrade) ? globalThis.Number(object.strengthenGrade) : 0,
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      objectId: isSet(object.objectId) ? globalThis.Number(object.objectId) : 0,
      bagType: isSet(object.bagType) ? globalThis.Number(object.bagType) : 0,
      masterAttr: isSet(object.masterAttr) ? globalThis.String(object.masterAttr) : "",
      sonAttr: isSet(object.sonAttr) ? globalThis.String(object.sonAttr) : "",
    };
  },

  toJSON(message: StoreRspMsg): unknown {
    const obj: any = {};
    if (message.composeResult !== false) {
      obj.composeResult = message.composeResult;
    }
    if (message.composeTemplateId !== 0) {
      obj.composeTemplateId = Math.round(message.composeTemplateId);
    }
    if (message.strengResult !== false) {
      obj.strengResult = message.strengResult;
    }
    if (message.strengthenGrade !== 0) {
      obj.strengthenGrade = Math.round(message.strengthenGrade);
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.objectId !== 0) {
      obj.objectId = Math.round(message.objectId);
    }
    if (message.bagType !== 0) {
      obj.bagType = Math.round(message.bagType);
    }
    if (message.masterAttr !== "") {
      obj.masterAttr = message.masterAttr;
    }
    if (message.sonAttr !== "") {
      obj.sonAttr = message.sonAttr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StoreRspMsg>, I>>(base?: I): StoreRspMsg {
    return StoreRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StoreRspMsg>, I>>(object: I): StoreRspMsg {
    const message = createBaseStoreRspMsg();
    message.composeResult = object.composeResult ?? false;
    message.composeTemplateId = object.composeTemplateId ?? 0;
    message.strengResult = object.strengResult ?? false;
    message.strengthenGrade = object.strengthenGrade ?? 0;
    message.pos = object.pos ?? 0;
    message.objectId = object.objectId ?? 0;
    message.bagType = object.bagType ?? 0;
    message.masterAttr = object.masterAttr ?? "";
    message.sonAttr = object.sonAttr ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
