// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/HeroRuneOpMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface HeroRuneOpMsg {
  userId: number;
  runeId: number;
  runeKey: string;
  learnRunePos: number;
  learnRuneCount: number;
  opType: number;
  opResult: boolean;
  runeInfo: string;
  count: number;
}

function createBaseHeroRuneOpMsg(): HeroRuneOpMsg {
  return {
    userId: 0,
    runeId: 0,
    runeKey: "",
    learnRunePos: 0,
    learnRuneCount: 0,
    opType: 0,
    opResult: false,
    runeInfo: "",
    count: 0,
  };
}

export const HeroRuneOpMsg: MessageFns<HeroRuneOpMsg> = {
  encode(message: HeroRuneOpMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.runeId !== 0) {
      writer.uint32(16).int32(message.runeId);
    }
    if (message.runeKey !== "") {
      writer.uint32(26).string(message.runeKey);
    }
    if (message.learnRunePos !== 0) {
      writer.uint32(32).int32(message.learnRunePos);
    }
    if (message.learnRuneCount !== 0) {
      writer.uint32(40).int32(message.learnRuneCount);
    }
    if (message.opType !== 0) {
      writer.uint32(48).int32(message.opType);
    }
    if (message.opResult !== false) {
      writer.uint32(56).bool(message.opResult);
    }
    if (message.runeInfo !== "") {
      writer.uint32(66).string(message.runeInfo);
    }
    if (message.count !== 0) {
      writer.uint32(72).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroRuneOpMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroRuneOpMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.runeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.runeKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.learnRunePos = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.learnRuneCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.opResult = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.runeInfo = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroRuneOpMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      runeId: isSet(object.runeId) ? globalThis.Number(object.runeId) : 0,
      runeKey: isSet(object.runeKey) ? globalThis.String(object.runeKey) : "",
      learnRunePos: isSet(object.learnRunePos) ? globalThis.Number(object.learnRunePos) : 0,
      learnRuneCount: isSet(object.learnRuneCount) ? globalThis.Number(object.learnRuneCount) : 0,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      opResult: isSet(object.opResult) ? globalThis.Boolean(object.opResult) : false,
      runeInfo: isSet(object.runeInfo) ? globalThis.String(object.runeInfo) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: HeroRuneOpMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.runeId !== 0) {
      obj.runeId = Math.round(message.runeId);
    }
    if (message.runeKey !== "") {
      obj.runeKey = message.runeKey;
    }
    if (message.learnRunePos !== 0) {
      obj.learnRunePos = Math.round(message.learnRunePos);
    }
    if (message.learnRuneCount !== 0) {
      obj.learnRuneCount = Math.round(message.learnRuneCount);
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.opResult !== false) {
      obj.opResult = message.opResult;
    }
    if (message.runeInfo !== "") {
      obj.runeInfo = message.runeInfo;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroRuneOpMsg>, I>>(base?: I): HeroRuneOpMsg {
    return HeroRuneOpMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroRuneOpMsg>, I>>(object: I): HeroRuneOpMsg {
    const message = createBaseHeroRuneOpMsg();
    message.userId = object.userId ?? 0;
    message.runeId = object.runeId ?? 0;
    message.runeKey = object.runeKey ?? "";
    message.learnRunePos = object.learnRunePos ?? 0;
    message.learnRuneCount = object.learnRuneCount ?? 0;
    message.opType = object.opType ?? 0;
    message.opResult = object.opResult ?? false;
    message.runeInfo = object.runeInfo ?? "";
    message.count = object.count ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
