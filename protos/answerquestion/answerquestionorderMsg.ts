// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: answerquestion/answerquestionorderMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.answerquestion";

export interface answerquestionorderMsg {
  userId: number;
  nickName: string;
  curOrder: number;
  currentScore: number;
}

function createBaseanswerquestionorderMsg(): answerquestionorderMsg {
  return { userId: 0, nickName: "", curOrder: 0, currentScore: 0 };
}

export const answerquestionorderMsg: MessageFns<answerquestionorderMsg> = {
  encode(
    message: answerquestionorderMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.curOrder !== 0) {
      writer.uint32(24).int32(message.curOrder);
    }
    if (message.currentScore !== 0) {
      writer.uint32(32).int32(message.currentScore);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): answerquestionorderMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseanswerquestionorderMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.curOrder = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentScore = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): answerquestionorderMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickName: isSet(object.nickName)
        ? globalThis.String(object.nickName)
        : "",
      curOrder: isSet(object.curOrder) ? globalThis.Number(object.curOrder) : 0,
      currentScore: isSet(object.currentScore)
        ? globalThis.Number(object.currentScore)
        : 0,
    };
  },

  toJSON(message: answerquestionorderMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.curOrder !== 0) {
      obj.curOrder = Math.round(message.curOrder);
    }
    if (message.currentScore !== 0) {
      obj.currentScore = Math.round(message.currentScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<answerquestionorderMsg>, I>>(
    base?: I,
  ): answerquestionorderMsg {
    return answerquestionorderMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<answerquestionorderMsg>, I>>(
    object: I,
  ): answerquestionorderMsg {
    const message = createBaseanswerquestionorderMsg();
    message.userId = object.userId ?? 0;
    message.nickName = object.nickName ?? "";
    message.curOrder = object.curOrder ?? 0;
    message.currentScore = object.currentScore ?? 0;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
