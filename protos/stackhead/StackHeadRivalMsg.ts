// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: stackhead/StackHeadRivalMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.stackhead";

export interface StackHeadRivalMsg {
  sourceGuildUid: string;
  sourceUserUid: string;
  rivalGuildUid: string;
  rivalUserUid: string;
  rivalArmy: string;
  win: boolean;
  sourceScoreChange: number;
  rivalScoreChange: number;
  seniorGeneral: number;
  defenceProperty: number;
  op: number;
}

function createBaseStackHeadRivalMsg(): StackHeadRivalMsg {
  return {
    sourceGuildUid: "",
    sourceUserUid: "",
    rivalGuildUid: "",
    rivalUserUid: "",
    rivalArmy: "",
    win: false,
    sourceScoreChange: 0,
    rivalScoreChange: 0,
    seniorGeneral: 0,
    defenceProperty: 0,
    op: 0,
  };
}

export const StackHeadRivalMsg: MessageFns<StackHeadRivalMsg> = {
  encode(message: StackHeadRivalMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceGuildUid !== "") {
      writer.uint32(10).string(message.sourceGuildUid);
    }
    if (message.sourceUserUid !== "") {
      writer.uint32(18).string(message.sourceUserUid);
    }
    if (message.rivalGuildUid !== "") {
      writer.uint32(26).string(message.rivalGuildUid);
    }
    if (message.rivalUserUid !== "") {
      writer.uint32(34).string(message.rivalUserUid);
    }
    if (message.rivalArmy !== "") {
      writer.uint32(42).string(message.rivalArmy);
    }
    if (message.win !== false) {
      writer.uint32(48).bool(message.win);
    }
    if (message.sourceScoreChange !== 0) {
      writer.uint32(56).int32(message.sourceScoreChange);
    }
    if (message.rivalScoreChange !== 0) {
      writer.uint32(64).int32(message.rivalScoreChange);
    }
    if (message.seniorGeneral !== 0) {
      writer.uint32(72).int32(message.seniorGeneral);
    }
    if (message.defenceProperty !== 0) {
      writer.uint32(80).int32(message.defenceProperty);
    }
    if (message.op !== 0) {
      writer.uint32(88).int32(message.op);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StackHeadRivalMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStackHeadRivalMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceGuildUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceUserUid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rivalGuildUid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rivalUserUid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rivalArmy = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.win = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sourceScoreChange = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.rivalScoreChange = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.seniorGeneral = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.defenceProperty = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StackHeadRivalMsg {
    return {
      sourceGuildUid: isSet(object.sourceGuildUid) ? globalThis.String(object.sourceGuildUid) : "",
      sourceUserUid: isSet(object.sourceUserUid) ? globalThis.String(object.sourceUserUid) : "",
      rivalGuildUid: isSet(object.rivalGuildUid) ? globalThis.String(object.rivalGuildUid) : "",
      rivalUserUid: isSet(object.rivalUserUid) ? globalThis.String(object.rivalUserUid) : "",
      rivalArmy: isSet(object.rivalArmy) ? globalThis.String(object.rivalArmy) : "",
      win: isSet(object.win) ? globalThis.Boolean(object.win) : false,
      sourceScoreChange: isSet(object.sourceScoreChange) ? globalThis.Number(object.sourceScoreChange) : 0,
      rivalScoreChange: isSet(object.rivalScoreChange) ? globalThis.Number(object.rivalScoreChange) : 0,
      seniorGeneral: isSet(object.seniorGeneral) ? globalThis.Number(object.seniorGeneral) : 0,
      defenceProperty: isSet(object.defenceProperty) ? globalThis.Number(object.defenceProperty) : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
    };
  },

  toJSON(message: StackHeadRivalMsg): unknown {
    const obj: any = {};
    if (message.sourceGuildUid !== "") {
      obj.sourceGuildUid = message.sourceGuildUid;
    }
    if (message.sourceUserUid !== "") {
      obj.sourceUserUid = message.sourceUserUid;
    }
    if (message.rivalGuildUid !== "") {
      obj.rivalGuildUid = message.rivalGuildUid;
    }
    if (message.rivalUserUid !== "") {
      obj.rivalUserUid = message.rivalUserUid;
    }
    if (message.rivalArmy !== "") {
      obj.rivalArmy = message.rivalArmy;
    }
    if (message.win !== false) {
      obj.win = message.win;
    }
    if (message.sourceScoreChange !== 0) {
      obj.sourceScoreChange = Math.round(message.sourceScoreChange);
    }
    if (message.rivalScoreChange !== 0) {
      obj.rivalScoreChange = Math.round(message.rivalScoreChange);
    }
    if (message.seniorGeneral !== 0) {
      obj.seniorGeneral = Math.round(message.seniorGeneral);
    }
    if (message.defenceProperty !== 0) {
      obj.defenceProperty = Math.round(message.defenceProperty);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StackHeadRivalMsg>, I>>(base?: I): StackHeadRivalMsg {
    return StackHeadRivalMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StackHeadRivalMsg>, I>>(object: I): StackHeadRivalMsg {
    const message = createBaseStackHeadRivalMsg();
    message.sourceGuildUid = object.sourceGuildUid ?? "";
    message.sourceUserUid = object.sourceUserUid ?? "";
    message.rivalGuildUid = object.rivalGuildUid ?? "";
    message.rivalUserUid = object.rivalUserUid ?? "";
    message.rivalArmy = object.rivalArmy ?? "";
    message.win = object.win ?? false;
    message.sourceScoreChange = object.sourceScoreChange ?? 0;
    message.rivalScoreChange = object.rivalScoreChange ?? 0;
    message.seniorGeneral = object.seniorGeneral ?? 0;
    message.defenceProperty = object.defenceProperty ?? 0;
    message.op = object.op ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
