// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: outcitywar/PlayerStatusMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.outcitywar";

export interface PlayerStatusMsg {
  orderId: number;
  userId: number;
  userName: string;
  userGrade: number;
  job: number;
  guildId: number;
  guildName: string;
  guildDutyId: number;
  defenseForce: number;
  defenseSite: number;
  state: number;
  fightCapaity: number;
  petFightCapaity: number;
  pawnTempId: number;
  petData: number[];
  camp: number;
  nodeId: number;
  heroType: number;
  enterWar: number;
  actionPoint: string;
  defenseSitePet: number;
  defenseForcePet: number;
  statePet: number;
  orderIdPet: number;
  buffMsg: number[];
  isOnline: boolean;
}

function createBasePlayerStatusMsg(): PlayerStatusMsg {
  return {
    orderId: 0,
    userId: 0,
    userName: "",
    userGrade: 0,
    job: 0,
    guildId: 0,
    guildName: "",
    guildDutyId: 0,
    defenseForce: 0,
    defenseSite: 0,
    state: 0,
    fightCapaity: 0,
    petFightCapaity: 0,
    pawnTempId: 0,
    petData: [],
    camp: 0,
    nodeId: 0,
    heroType: 0,
    enterWar: 0,
    actionPoint: "",
    defenseSitePet: 0,
    defenseForcePet: 0,
    statePet: 0,
    orderIdPet: 0,
    buffMsg: [],
    isOnline: false,
  };
}

export const PlayerStatusMsg: MessageFns<PlayerStatusMsg> = {
  encode(message: PlayerStatusMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== 0) {
      writer.uint32(8).int32(message.orderId);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(26).string(message.userName);
    }
    if (message.userGrade !== 0) {
      writer.uint32(32).int32(message.userGrade);
    }
    if (message.job !== 0) {
      writer.uint32(40).int32(message.job);
    }
    if (message.guildId !== 0) {
      writer.uint32(48).int32(message.guildId);
    }
    if (message.guildName !== "") {
      writer.uint32(58).string(message.guildName);
    }
    if (message.guildDutyId !== 0) {
      writer.uint32(64).int32(message.guildDutyId);
    }
    if (message.defenseForce !== 0) {
      writer.uint32(72).int32(message.defenseForce);
    }
    if (message.defenseSite !== 0) {
      writer.uint32(80).int32(message.defenseSite);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    if (message.fightCapaity !== 0) {
      writer.uint32(96).int32(message.fightCapaity);
    }
    if (message.petFightCapaity !== 0) {
      writer.uint32(104).int32(message.petFightCapaity);
    }
    if (message.pawnTempId !== 0) {
      writer.uint32(112).int32(message.pawnTempId);
    }
    writer.uint32(122).fork();
    for (const v of message.petData) {
      writer.int32(v);
    }
    writer.join();
    if (message.camp !== 0) {
      writer.uint32(128).int32(message.camp);
    }
    if (message.nodeId !== 0) {
      writer.uint32(136).int32(message.nodeId);
    }
    if (message.heroType !== 0) {
      writer.uint32(144).int32(message.heroType);
    }
    if (message.enterWar !== 0) {
      writer.uint32(152).int32(message.enterWar);
    }
    if (message.actionPoint !== "") {
      writer.uint32(162).string(message.actionPoint);
    }
    if (message.defenseSitePet !== 0) {
      writer.uint32(168).int32(message.defenseSitePet);
    }
    if (message.defenseForcePet !== 0) {
      writer.uint32(176).int32(message.defenseForcePet);
    }
    if (message.statePet !== 0) {
      writer.uint32(184).int32(message.statePet);
    }
    if (message.orderIdPet !== 0) {
      writer.uint32(192).int32(message.orderIdPet);
    }
    writer.uint32(202).fork();
    for (const v of message.buffMsg) {
      writer.int32(v);
    }
    writer.join();
    if (message.isOnline !== false) {
      writer.uint32(208).bool(message.isOnline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerStatusMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerStatusMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.orderId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userGrade = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.guildId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.guildName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.guildDutyId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.defenseForce = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.defenseSite = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.fightCapaity = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.petFightCapaity = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.pawnTempId = reader.int32();
          continue;
        }
        case 15: {
          if (tag === 120) {
            message.petData.push(reader.int32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.petData.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.camp = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.heroType = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.enterWar = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.actionPoint = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.defenseSitePet = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.defenseForcePet = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.statePet = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.orderIdPet = reader.int32();
          continue;
        }
        case 25: {
          if (tag === 200) {
            message.buffMsg.push(reader.int32());

            continue;
          }

          if (tag === 202) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.buffMsg.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.isOnline = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerStatusMsg {
    return {
      orderId: isSet(object.orderId) ? globalThis.Number(object.orderId) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      userGrade: isSet(object.userGrade) ? globalThis.Number(object.userGrade) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
      guildName: isSet(object.guildName) ? globalThis.String(object.guildName) : "",
      guildDutyId: isSet(object.guildDutyId) ? globalThis.Number(object.guildDutyId) : 0,
      defenseForce: isSet(object.defenseForce) ? globalThis.Number(object.defenseForce) : 0,
      defenseSite: isSet(object.defenseSite) ? globalThis.Number(object.defenseSite) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      fightCapaity: isSet(object.fightCapaity) ? globalThis.Number(object.fightCapaity) : 0,
      petFightCapaity: isSet(object.petFightCapaity) ? globalThis.Number(object.petFightCapaity) : 0,
      pawnTempId: isSet(object.pawnTempId) ? globalThis.Number(object.pawnTempId) : 0,
      petData: globalThis.Array.isArray(object?.petData) ? object.petData.map((e: any) => globalThis.Number(e)) : [],
      camp: isSet(object.camp) ? globalThis.Number(object.camp) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      heroType: isSet(object.heroType) ? globalThis.Number(object.heroType) : 0,
      enterWar: isSet(object.enterWar) ? globalThis.Number(object.enterWar) : 0,
      actionPoint: isSet(object.actionPoint) ? globalThis.String(object.actionPoint) : "",
      defenseSitePet: isSet(object.defenseSitePet) ? globalThis.Number(object.defenseSitePet) : 0,
      defenseForcePet: isSet(object.defenseForcePet) ? globalThis.Number(object.defenseForcePet) : 0,
      statePet: isSet(object.statePet) ? globalThis.Number(object.statePet) : 0,
      orderIdPet: isSet(object.orderIdPet) ? globalThis.Number(object.orderIdPet) : 0,
      buffMsg: globalThis.Array.isArray(object?.buffMsg) ? object.buffMsg.map((e: any) => globalThis.Number(e)) : [],
      isOnline: isSet(object.isOnline) ? globalThis.Boolean(object.isOnline) : false,
    };
  },

  toJSON(message: PlayerStatusMsg): unknown {
    const obj: any = {};
    if (message.orderId !== 0) {
      obj.orderId = Math.round(message.orderId);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.userGrade !== 0) {
      obj.userGrade = Math.round(message.userGrade);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.guildId !== 0) {
      obj.guildId = Math.round(message.guildId);
    }
    if (message.guildName !== "") {
      obj.guildName = message.guildName;
    }
    if (message.guildDutyId !== 0) {
      obj.guildDutyId = Math.round(message.guildDutyId);
    }
    if (message.defenseForce !== 0) {
      obj.defenseForce = Math.round(message.defenseForce);
    }
    if (message.defenseSite !== 0) {
      obj.defenseSite = Math.round(message.defenseSite);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.fightCapaity !== 0) {
      obj.fightCapaity = Math.round(message.fightCapaity);
    }
    if (message.petFightCapaity !== 0) {
      obj.petFightCapaity = Math.round(message.petFightCapaity);
    }
    if (message.pawnTempId !== 0) {
      obj.pawnTempId = Math.round(message.pawnTempId);
    }
    if (message.petData?.length) {
      obj.petData = message.petData.map((e) => Math.round(e));
    }
    if (message.camp !== 0) {
      obj.camp = Math.round(message.camp);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.heroType !== 0) {
      obj.heroType = Math.round(message.heroType);
    }
    if (message.enterWar !== 0) {
      obj.enterWar = Math.round(message.enterWar);
    }
    if (message.actionPoint !== "") {
      obj.actionPoint = message.actionPoint;
    }
    if (message.defenseSitePet !== 0) {
      obj.defenseSitePet = Math.round(message.defenseSitePet);
    }
    if (message.defenseForcePet !== 0) {
      obj.defenseForcePet = Math.round(message.defenseForcePet);
    }
    if (message.statePet !== 0) {
      obj.statePet = Math.round(message.statePet);
    }
    if (message.orderIdPet !== 0) {
      obj.orderIdPet = Math.round(message.orderIdPet);
    }
    if (message.buffMsg?.length) {
      obj.buffMsg = message.buffMsg.map((e) => Math.round(e));
    }
    if (message.isOnline !== false) {
      obj.isOnline = message.isOnline;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerStatusMsg>, I>>(base?: I): PlayerStatusMsg {
    return PlayerStatusMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerStatusMsg>, I>>(object: I): PlayerStatusMsg {
    const message = createBasePlayerStatusMsg();
    message.orderId = object.orderId ?? 0;
    message.userId = object.userId ?? 0;
    message.userName = object.userName ?? "";
    message.userGrade = object.userGrade ?? 0;
    message.job = object.job ?? 0;
    message.guildId = object.guildId ?? 0;
    message.guildName = object.guildName ?? "";
    message.guildDutyId = object.guildDutyId ?? 0;
    message.defenseForce = object.defenseForce ?? 0;
    message.defenseSite = object.defenseSite ?? 0;
    message.state = object.state ?? 0;
    message.fightCapaity = object.fightCapaity ?? 0;
    message.petFightCapaity = object.petFightCapaity ?? 0;
    message.pawnTempId = object.pawnTempId ?? 0;
    message.petData = object.petData?.map((e) => e) || [];
    message.camp = object.camp ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.heroType = object.heroType ?? 0;
    message.enterWar = object.enterWar ?? 0;
    message.actionPoint = object.actionPoint ?? "";
    message.defenseSitePet = object.defenseSitePet ?? 0;
    message.defenseForcePet = object.defenseForcePet ?? 0;
    message.statePet = object.statePet ?? 0;
    message.orderIdPet = object.orderIdPet ?? 0;
    message.buffMsg = object.buffMsg?.map((e) => e) || [];
    message.isOnline = object.isOnline ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
