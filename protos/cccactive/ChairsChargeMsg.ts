// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ChairsChargeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ChairsChargeMsg {
  userId: number;
  totalPoint: number;
  currentPoint: number;
  tokenCount: number;
  uuid: string;
  site: string;
  serverName: string;
  param1: number;
  param2: number;
}

function createBaseChairsChargeMsg(): ChairsChargeMsg {
  return {
    userId: 0,
    totalPoint: 0,
    currentPoint: 0,
    tokenCount: 0,
    uuid: "",
    site: "",
    serverName: "",
    param1: 0,
    param2: 0,
  };
}

export const ChairsChargeMsg: MessageFns<ChairsChargeMsg> = {
  encode(message: ChairsChargeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.totalPoint !== 0) {
      writer.uint32(16).int32(message.totalPoint);
    }
    if (message.currentPoint !== 0) {
      writer.uint32(24).int32(message.currentPoint);
    }
    if (message.tokenCount !== 0) {
      writer.uint32(32).int32(message.tokenCount);
    }
    if (message.uuid !== "") {
      writer.uint32(42).string(message.uuid);
    }
    if (message.site !== "") {
      writer.uint32(50).string(message.site);
    }
    if (message.serverName !== "") {
      writer.uint32(58).string(message.serverName);
    }
    if (message.param1 !== 0) {
      writer.uint32(64).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(72).int32(message.param2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChairsChargeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChairsChargeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalPoint = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentPoint = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tokenCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.site = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChairsChargeMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      totalPoint: isSet(object.totalPoint) ? globalThis.Number(object.totalPoint) : 0,
      currentPoint: isSet(object.currentPoint) ? globalThis.Number(object.currentPoint) : 0,
      tokenCount: isSet(object.tokenCount) ? globalThis.Number(object.tokenCount) : 0,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
    };
  },

  toJSON(message: ChairsChargeMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.totalPoint !== 0) {
      obj.totalPoint = Math.round(message.totalPoint);
    }
    if (message.currentPoint !== 0) {
      obj.currentPoint = Math.round(message.currentPoint);
    }
    if (message.tokenCount !== 0) {
      obj.tokenCount = Math.round(message.tokenCount);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChairsChargeMsg>, I>>(base?: I): ChairsChargeMsg {
    return ChairsChargeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChairsChargeMsg>, I>>(object: I): ChairsChargeMsg {
    const message = createBaseChairsChargeMsg();
    message.userId = object.userId ?? 0;
    message.totalPoint = object.totalPoint ?? 0;
    message.currentPoint = object.currentPoint ?? 0;
    message.tokenCount = object.tokenCount ?? 0;
    message.uuid = object.uuid ?? "";
    message.site = object.site ?? "";
    message.serverName = object.serverName ?? "";
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
