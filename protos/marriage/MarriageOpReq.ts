// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: marriage/MarriageOpReq.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.marriage";

export interface MarriageOpReq {
  op: number;
  engageId: number;
  msg: string;
  replyEngageId: number;
  isAgree: boolean;
  templateId: number;
  mateId: number;
  marryTimeId: number;
  payType: number;
  userKey: string;
  agreeDivorces: boolean;
  count: number;
  happyTemplateId: number;
  skillId: number;
  giftId: number;
}

function createBaseMarriageOpReq(): MarriageOpReq {
  return {
    op: 0,
    engageId: 0,
    msg: "",
    replyEngageId: 0,
    isAgree: false,
    templateId: 0,
    mateId: 0,
    marryTimeId: 0,
    payType: 0,
    userKey: "",
    agreeDivorces: false,
    count: 0,
    happyTemplateId: 0,
    skillId: 0,
    giftId: 0,
  };
}

export const MarriageOpReq: MessageFns<MarriageOpReq> = {
  encode(message: MarriageOpReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.engageId !== 0) {
      writer.uint32(16).int32(message.engageId);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.replyEngageId !== 0) {
      writer.uint32(32).int32(message.replyEngageId);
    }
    if (message.isAgree !== false) {
      writer.uint32(40).bool(message.isAgree);
    }
    if (message.templateId !== 0) {
      writer.uint32(48).int32(message.templateId);
    }
    if (message.mateId !== 0) {
      writer.uint32(56).int32(message.mateId);
    }
    if (message.marryTimeId !== 0) {
      writer.uint32(64).int32(message.marryTimeId);
    }
    if (message.payType !== 0) {
      writer.uint32(72).int32(message.payType);
    }
    if (message.userKey !== "") {
      writer.uint32(82).string(message.userKey);
    }
    if (message.agreeDivorces !== false) {
      writer.uint32(88).bool(message.agreeDivorces);
    }
    if (message.count !== 0) {
      writer.uint32(96).int32(message.count);
    }
    if (message.happyTemplateId !== 0) {
      writer.uint32(104).int32(message.happyTemplateId);
    }
    if (message.skillId !== 0) {
      writer.uint32(112).int32(message.skillId);
    }
    if (message.giftId !== 0) {
      writer.uint32(120).int32(message.giftId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarriageOpReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarriageOpReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.engageId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.replyEngageId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isAgree = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.templateId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.mateId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.marryTimeId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.userKey = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.agreeDivorces = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.happyTemplateId = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.skillId = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.giftId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarriageOpReq {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      engageId: isSet(object.engageId) ? globalThis.Number(object.engageId) : 0,
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      replyEngageId: isSet(object.replyEngageId) ? globalThis.Number(object.replyEngageId) : 0,
      isAgree: isSet(object.isAgree) ? globalThis.Boolean(object.isAgree) : false,
      templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
      mateId: isSet(object.mateId) ? globalThis.Number(object.mateId) : 0,
      marryTimeId: isSet(object.marryTimeId) ? globalThis.Number(object.marryTimeId) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
      userKey: isSet(object.userKey) ? globalThis.String(object.userKey) : "",
      agreeDivorces: isSet(object.agreeDivorces) ? globalThis.Boolean(object.agreeDivorces) : false,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      happyTemplateId: isSet(object.happyTemplateId) ? globalThis.Number(object.happyTemplateId) : 0,
      skillId: isSet(object.skillId) ? globalThis.Number(object.skillId) : 0,
      giftId: isSet(object.giftId) ? globalThis.Number(object.giftId) : 0,
    };
  },

  toJSON(message: MarriageOpReq): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.engageId !== 0) {
      obj.engageId = Math.round(message.engageId);
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.replyEngageId !== 0) {
      obj.replyEngageId = Math.round(message.replyEngageId);
    }
    if (message.isAgree !== false) {
      obj.isAgree = message.isAgree;
    }
    if (message.templateId !== 0) {
      obj.templateId = Math.round(message.templateId);
    }
    if (message.mateId !== 0) {
      obj.mateId = Math.round(message.mateId);
    }
    if (message.marryTimeId !== 0) {
      obj.marryTimeId = Math.round(message.marryTimeId);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    if (message.userKey !== "") {
      obj.userKey = message.userKey;
    }
    if (message.agreeDivorces !== false) {
      obj.agreeDivorces = message.agreeDivorces;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.happyTemplateId !== 0) {
      obj.happyTemplateId = Math.round(message.happyTemplateId);
    }
    if (message.skillId !== 0) {
      obj.skillId = Math.round(message.skillId);
    }
    if (message.giftId !== 0) {
      obj.giftId = Math.round(message.giftId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarriageOpReq>, I>>(base?: I): MarriageOpReq {
    return MarriageOpReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarriageOpReq>, I>>(object: I): MarriageOpReq {
    const message = createBaseMarriageOpReq();
    message.op = object.op ?? 0;
    message.engageId = object.engageId ?? 0;
    message.msg = object.msg ?? "";
    message.replyEngageId = object.replyEngageId ?? 0;
    message.isAgree = object.isAgree ?? false;
    message.templateId = object.templateId ?? 0;
    message.mateId = object.mateId ?? 0;
    message.marryTimeId = object.marryTimeId ?? 0;
    message.payType = object.payType ?? 0;
    message.userKey = object.userKey ?? "";
    message.agreeDivorces = object.agreeDivorces ?? false;
    message.count = object.count ?? 0;
    message.happyTemplateId = object.happyTemplateId ?? 0;
    message.skillId = object.skillId ?? 0;
    message.giftId = object.giftId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
