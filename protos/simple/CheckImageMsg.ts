// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/CheckImageMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface CheckImageMsg {
  leftCount: number;
  leftTime: number;
  images1: string;
  images2: string;
  images3: string;
  images4: string;
  result: string;
  property1: string;
  property2: string;
}

function createBaseCheckImageMsg(): CheckImageMsg {
  return {
    leftCount: 0,
    leftTime: 0,
    images1: "",
    images2: "",
    images3: "",
    images4: "",
    result: "",
    property1: "",
    property2: "",
  };
}

export const CheckImageMsg: MessageFns<CheckImageMsg> = {
  encode(message: CheckImageMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftCount !== 0) {
      writer.uint32(8).int32(message.leftCount);
    }
    if (message.leftTime !== 0) {
      writer.uint32(16).int32(message.leftTime);
    }
    if (message.images1 !== "") {
      writer.uint32(26).string(message.images1);
    }
    if (message.images2 !== "") {
      writer.uint32(34).string(message.images2);
    }
    if (message.images3 !== "") {
      writer.uint32(42).string(message.images3);
    }
    if (message.images4 !== "") {
      writer.uint32(50).string(message.images4);
    }
    if (message.result !== "") {
      writer.uint32(58).string(message.result);
    }
    if (message.property1 !== "") {
      writer.uint32(66).string(message.property1);
    }
    if (message.property2 !== "") {
      writer.uint32(74).string(message.property2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckImageMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckImageMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.leftCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.images1 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.images2 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.images3 = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.images4 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.result = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.property1 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.property2 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckImageMsg {
    return {
      leftCount: isSet(object.leftCount) ? globalThis.Number(object.leftCount) : 0,
      leftTime: isSet(object.leftTime) ? globalThis.Number(object.leftTime) : 0,
      images1: isSet(object.images1) ? globalThis.String(object.images1) : "",
      images2: isSet(object.images2) ? globalThis.String(object.images2) : "",
      images3: isSet(object.images3) ? globalThis.String(object.images3) : "",
      images4: isSet(object.images4) ? globalThis.String(object.images4) : "",
      result: isSet(object.result) ? globalThis.String(object.result) : "",
      property1: isSet(object.property1) ? globalThis.String(object.property1) : "",
      property2: isSet(object.property2) ? globalThis.String(object.property2) : "",
    };
  },

  toJSON(message: CheckImageMsg): unknown {
    const obj: any = {};
    if (message.leftCount !== 0) {
      obj.leftCount = Math.round(message.leftCount);
    }
    if (message.leftTime !== 0) {
      obj.leftTime = Math.round(message.leftTime);
    }
    if (message.images1 !== "") {
      obj.images1 = message.images1;
    }
    if (message.images2 !== "") {
      obj.images2 = message.images2;
    }
    if (message.images3 !== "") {
      obj.images3 = message.images3;
    }
    if (message.images4 !== "") {
      obj.images4 = message.images4;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    if (message.property1 !== "") {
      obj.property1 = message.property1;
    }
    if (message.property2 !== "") {
      obj.property2 = message.property2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckImageMsg>, I>>(base?: I): CheckImageMsg {
    return CheckImageMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckImageMsg>, I>>(object: I): CheckImageMsg {
    const message = createBaseCheckImageMsg();
    message.leftCount = object.leftCount ?? 0;
    message.leftTime = object.leftTime ?? 0;
    message.images1 = object.images1 ?? "";
    message.images2 = object.images2 ?? "";
    message.images3 = object.images3 ?? "";
    message.images4 = object.images4 ?? "";
    message.result = object.result ?? "";
    message.property1 = object.property1 ?? "";
    message.property2 = object.property2 ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
