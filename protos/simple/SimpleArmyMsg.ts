// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/SimpleArmyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface SimpleArmyMsg {
  armyId: number;
  playerId: number;
  nickName: string;
  mapId: number;
  startPosX: number;
  startPosY: number;
  curPosX: number;
  curPosY: number;
  endPosX: number;
  endPosY: number;
  state: number;
  velocity: number;
  costTime: number;
  departure: string;
  destination: string;
  command: number;
  routeKey: number[];
  type: number;
  armyPawn: number[];
  consortiaId: number;
  consortiaName: string;
  simpleHero: string;
  tempTime: number;
  isVip: boolean;
  vipType: number;
  storeGrade: number;
  appellid: number;
  fateTotalGp: number;
  fateGrades: string;
  honorEquipLevel: number;
  honorEquipStage: number;
}

function createBaseSimpleArmyMsg(): SimpleArmyMsg {
  return {
    armyId: 0,
    playerId: 0,
    nickName: "",
    mapId: 0,
    startPosX: 0,
    startPosY: 0,
    curPosX: 0,
    curPosY: 0,
    endPosX: 0,
    endPosY: 0,
    state: 0,
    velocity: 0,
    costTime: 0,
    departure: "",
    destination: "",
    command: 0,
    routeKey: [],
    type: 0,
    armyPawn: [],
    consortiaId: 0,
    consortiaName: "",
    simpleHero: "",
    tempTime: 0,
    isVip: false,
    vipType: 0,
    storeGrade: 0,
    appellid: 0,
    fateTotalGp: 0,
    fateGrades: "",
    honorEquipLevel: 0,
    honorEquipStage: 0,
  };
}

export const SimpleArmyMsg: MessageFns<SimpleArmyMsg> = {
  encode(message: SimpleArmyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.armyId !== 0) {
      writer.uint32(8).int32(message.armyId);
    }
    if (message.playerId !== 0) {
      writer.uint32(16).int32(message.playerId);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.mapId !== 0) {
      writer.uint32(32).int32(message.mapId);
    }
    if (message.startPosX !== 0) {
      writer.uint32(40).int32(message.startPosX);
    }
    if (message.startPosY !== 0) {
      writer.uint32(48).int32(message.startPosY);
    }
    if (message.curPosX !== 0) {
      writer.uint32(56).int32(message.curPosX);
    }
    if (message.curPosY !== 0) {
      writer.uint32(64).int32(message.curPosY);
    }
    if (message.endPosX !== 0) {
      writer.uint32(72).int32(message.endPosX);
    }
    if (message.endPosY !== 0) {
      writer.uint32(80).int32(message.endPosY);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    if (message.velocity !== 0) {
      writer.uint32(96).int32(message.velocity);
    }
    if (message.costTime !== 0) {
      writer.uint32(104).int32(message.costTime);
    }
    if (message.departure !== "") {
      writer.uint32(114).string(message.departure);
    }
    if (message.destination !== "") {
      writer.uint32(122).string(message.destination);
    }
    if (message.command !== 0) {
      writer.uint32(128).int32(message.command);
    }
    writer.uint32(138).fork();
    for (const v of message.routeKey) {
      writer.int32(v);
    }
    writer.join();
    if (message.type !== 0) {
      writer.uint32(144).int32(message.type);
    }
    writer.uint32(154).fork();
    for (const v of message.armyPawn) {
      writer.int32(v);
    }
    writer.join();
    if (message.consortiaId !== 0) {
      writer.uint32(160).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(170).string(message.consortiaName);
    }
    if (message.simpleHero !== "") {
      writer.uint32(178).string(message.simpleHero);
    }
    if (message.tempTime !== 0) {
      writer.uint32(184).int32(message.tempTime);
    }
    if (message.isVip !== false) {
      writer.uint32(192).bool(message.isVip);
    }
    if (message.vipType !== 0) {
      writer.uint32(200).int32(message.vipType);
    }
    if (message.storeGrade !== 0) {
      writer.uint32(208).int32(message.storeGrade);
    }
    if (message.appellid !== 0) {
      writer.uint32(216).int32(message.appellid);
    }
    if (message.fateTotalGp !== 0) {
      writer.uint32(224).int32(message.fateTotalGp);
    }
    if (message.fateGrades !== "") {
      writer.uint32(234).string(message.fateGrades);
    }
    if (message.honorEquipLevel !== 0) {
      writer.uint32(240).int32(message.honorEquipLevel);
    }
    if (message.honorEquipStage !== 0) {
      writer.uint32(248).int32(message.honorEquipStage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleArmyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleArmyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startPosX = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startPosY = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curPosX = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.curPosY = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.endPosX = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endPosY = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.velocity = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.costTime = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.departure = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.destination = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.command = reader.int32();
          continue;
        }
        case 17: {
          if (tag === 136) {
            message.routeKey.push(reader.int32());

            continue;
          }

          if (tag === 138) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.routeKey.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 19: {
          if (tag === 152) {
            message.armyPawn.push(reader.int32());

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.armyPawn.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.simpleHero = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.tempTime = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.storeGrade = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.appellid = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.fateTotalGp = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.fateGrades = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.honorEquipLevel = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.honorEquipStage = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleArmyMsg {
    return {
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      startPosX: isSet(object.startPosX) ? globalThis.Number(object.startPosX) : 0,
      startPosY: isSet(object.startPosY) ? globalThis.Number(object.startPosY) : 0,
      curPosX: isSet(object.curPosX) ? globalThis.Number(object.curPosX) : 0,
      curPosY: isSet(object.curPosY) ? globalThis.Number(object.curPosY) : 0,
      endPosX: isSet(object.endPosX) ? globalThis.Number(object.endPosX) : 0,
      endPosY: isSet(object.endPosY) ? globalThis.Number(object.endPosY) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      velocity: isSet(object.velocity) ? globalThis.Number(object.velocity) : 0,
      costTime: isSet(object.costTime) ? globalThis.Number(object.costTime) : 0,
      departure: isSet(object.departure) ? globalThis.String(object.departure) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      command: isSet(object.command) ? globalThis.Number(object.command) : 0,
      routeKey: globalThis.Array.isArray(object?.routeKey) ? object.routeKey.map((e: any) => globalThis.Number(e)) : [],
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      armyPawn: globalThis.Array.isArray(object?.armyPawn) ? object.armyPawn.map((e: any) => globalThis.Number(e)) : [],
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      simpleHero: isSet(object.simpleHero) ? globalThis.String(object.simpleHero) : "",
      tempTime: isSet(object.tempTime) ? globalThis.Number(object.tempTime) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      storeGrade: isSet(object.storeGrade) ? globalThis.Number(object.storeGrade) : 0,
      appellid: isSet(object.appellid) ? globalThis.Number(object.appellid) : 0,
      fateTotalGp: isSet(object.fateTotalGp) ? globalThis.Number(object.fateTotalGp) : 0,
      fateGrades: isSet(object.fateGrades) ? globalThis.String(object.fateGrades) : "",
      honorEquipLevel: isSet(object.honorEquipLevel) ? globalThis.Number(object.honorEquipLevel) : 0,
      honorEquipStage: isSet(object.honorEquipStage) ? globalThis.Number(object.honorEquipStage) : 0,
    };
  },

  toJSON(message: SimpleArmyMsg): unknown {
    const obj: any = {};
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.startPosX !== 0) {
      obj.startPosX = Math.round(message.startPosX);
    }
    if (message.startPosY !== 0) {
      obj.startPosY = Math.round(message.startPosY);
    }
    if (message.curPosX !== 0) {
      obj.curPosX = Math.round(message.curPosX);
    }
    if (message.curPosY !== 0) {
      obj.curPosY = Math.round(message.curPosY);
    }
    if (message.endPosX !== 0) {
      obj.endPosX = Math.round(message.endPosX);
    }
    if (message.endPosY !== 0) {
      obj.endPosY = Math.round(message.endPosY);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.velocity !== 0) {
      obj.velocity = Math.round(message.velocity);
    }
    if (message.costTime !== 0) {
      obj.costTime = Math.round(message.costTime);
    }
    if (message.departure !== "") {
      obj.departure = message.departure;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.command !== 0) {
      obj.command = Math.round(message.command);
    }
    if (message.routeKey?.length) {
      obj.routeKey = message.routeKey.map((e) => Math.round(e));
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.armyPawn?.length) {
      obj.armyPawn = message.armyPawn.map((e) => Math.round(e));
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.simpleHero !== "") {
      obj.simpleHero = message.simpleHero;
    }
    if (message.tempTime !== 0) {
      obj.tempTime = Math.round(message.tempTime);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.storeGrade !== 0) {
      obj.storeGrade = Math.round(message.storeGrade);
    }
    if (message.appellid !== 0) {
      obj.appellid = Math.round(message.appellid);
    }
    if (message.fateTotalGp !== 0) {
      obj.fateTotalGp = Math.round(message.fateTotalGp);
    }
    if (message.fateGrades !== "") {
      obj.fateGrades = message.fateGrades;
    }
    if (message.honorEquipLevel !== 0) {
      obj.honorEquipLevel = Math.round(message.honorEquipLevel);
    }
    if (message.honorEquipStage !== 0) {
      obj.honorEquipStage = Math.round(message.honorEquipStage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimpleArmyMsg>, I>>(base?: I): SimpleArmyMsg {
    return SimpleArmyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleArmyMsg>, I>>(object: I): SimpleArmyMsg {
    const message = createBaseSimpleArmyMsg();
    message.armyId = object.armyId ?? 0;
    message.playerId = object.playerId ?? 0;
    message.nickName = object.nickName ?? "";
    message.mapId = object.mapId ?? 0;
    message.startPosX = object.startPosX ?? 0;
    message.startPosY = object.startPosY ?? 0;
    message.curPosX = object.curPosX ?? 0;
    message.curPosY = object.curPosY ?? 0;
    message.endPosX = object.endPosX ?? 0;
    message.endPosY = object.endPosY ?? 0;
    message.state = object.state ?? 0;
    message.velocity = object.velocity ?? 0;
    message.costTime = object.costTime ?? 0;
    message.departure = object.departure ?? "";
    message.destination = object.destination ?? "";
    message.command = object.command ?? 0;
    message.routeKey = object.routeKey?.map((e) => e) || [];
    message.type = object.type ?? 0;
    message.armyPawn = object.armyPawn?.map((e) => e) || [];
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.simpleHero = object.simpleHero ?? "";
    message.tempTime = object.tempTime ?? 0;
    message.isVip = object.isVip ?? false;
    message.vipType = object.vipType ?? 0;
    message.storeGrade = object.storeGrade ?? 0;
    message.appellid = object.appellid ?? 0;
    message.fateTotalGp = object.fateTotalGp ?? 0;
    message.fateGrades = object.fateGrades ?? "";
    message.honorEquipLevel = object.honorEquipLevel ?? 0;
    message.honorEquipStage = object.honorEquipStage ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
