// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: lucky/LordsBaseInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.lucky";

export interface LordsBaseInfoMsg {
  userId: number;
  serverName: string;
  nickName: string;
  userKeys: string;
  job: number;
  sexJob: number;
  grades: number;
  fashionArm: string;
  fashionWing: string;
  fashionCloth: string;
  fashionHair: string;
  fashionHat: string;
  arm: string;
  isVip: boolean;
  fightPower: number;
  readyScore: number;
  readyOrder: number;
  readyRewad: number;
  finalScore: number;
  finalOrder: number;
  finalRewad: number;
  readyTurn: number;
  finalTurn: number;
  readyWinCount: number;
  finalWinCount: number;
  isExist: boolean;
  property1: string;
  property2: string;
  battleResult: number;
  betIndex: number;
  fightPowerOrder: number;
  headId: number;
}

function createBaseLordsBaseInfoMsg(): LordsBaseInfoMsg {
  return {
    userId: 0,
    serverName: "",
    nickName: "",
    userKeys: "",
    job: 0,
    sexJob: 0,
    grades: 0,
    fashionArm: "",
    fashionWing: "",
    fashionCloth: "",
    fashionHair: "",
    fashionHat: "",
    arm: "",
    isVip: false,
    fightPower: 0,
    readyScore: 0,
    readyOrder: 0,
    readyRewad: 0,
    finalScore: 0,
    finalOrder: 0,
    finalRewad: 0,
    readyTurn: 0,
    finalTurn: 0,
    readyWinCount: 0,
    finalWinCount: 0,
    isExist: false,
    property1: "",
    property2: "",
    battleResult: 0,
    betIndex: 0,
    fightPowerOrder: 0,
    headId: 0,
  };
}

export const LordsBaseInfoMsg: MessageFns<LordsBaseInfoMsg> = {
  encode(message: LordsBaseInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.serverName !== "") {
      writer.uint32(18).string(message.serverName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.userKeys !== "") {
      writer.uint32(34).string(message.userKeys);
    }
    if (message.job !== 0) {
      writer.uint32(40).int32(message.job);
    }
    if (message.sexJob !== 0) {
      writer.uint32(48).int32(message.sexJob);
    }
    if (message.grades !== 0) {
      writer.uint32(56).int32(message.grades);
    }
    if (message.fashionArm !== "") {
      writer.uint32(66).string(message.fashionArm);
    }
    if (message.fashionWing !== "") {
      writer.uint32(74).string(message.fashionWing);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(82).string(message.fashionCloth);
    }
    if (message.fashionHair !== "") {
      writer.uint32(90).string(message.fashionHair);
    }
    if (message.fashionHat !== "") {
      writer.uint32(98).string(message.fashionHat);
    }
    if (message.arm !== "") {
      writer.uint32(106).string(message.arm);
    }
    if (message.isVip !== false) {
      writer.uint32(112).bool(message.isVip);
    }
    if (message.fightPower !== 0) {
      writer.uint32(120).int32(message.fightPower);
    }
    if (message.readyScore !== 0) {
      writer.uint32(128).int32(message.readyScore);
    }
    if (message.readyOrder !== 0) {
      writer.uint32(136).int32(message.readyOrder);
    }
    if (message.readyRewad !== 0) {
      writer.uint32(144).int32(message.readyRewad);
    }
    if (message.finalScore !== 0) {
      writer.uint32(152).int32(message.finalScore);
    }
    if (message.finalOrder !== 0) {
      writer.uint32(160).int32(message.finalOrder);
    }
    if (message.finalRewad !== 0) {
      writer.uint32(168).int32(message.finalRewad);
    }
    if (message.readyTurn !== 0) {
      writer.uint32(176).int32(message.readyTurn);
    }
    if (message.finalTurn !== 0) {
      writer.uint32(184).int32(message.finalTurn);
    }
    if (message.readyWinCount !== 0) {
      writer.uint32(192).int32(message.readyWinCount);
    }
    if (message.finalWinCount !== 0) {
      writer.uint32(200).int32(message.finalWinCount);
    }
    if (message.isExist !== false) {
      writer.uint32(208).bool(message.isExist);
    }
    if (message.property1 !== "") {
      writer.uint32(218).string(message.property1);
    }
    if (message.property2 !== "") {
      writer.uint32(226).string(message.property2);
    }
    if (message.battleResult !== 0) {
      writer.uint32(232).int32(message.battleResult);
    }
    if (message.betIndex !== 0) {
      writer.uint32(240).int32(message.betIndex);
    }
    if (message.fightPowerOrder !== 0) {
      writer.uint32(248).int32(message.fightPowerOrder);
    }
    if (message.headId !== 0) {
      writer.uint32(256).int32(message.headId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LordsBaseInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLordsBaseInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userKeys = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sexJob = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fashionWing = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fashionHair = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.fashionHat = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.fightPower = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.readyScore = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.readyOrder = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.readyRewad = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.finalScore = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.finalOrder = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.finalRewad = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.readyTurn = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.finalTurn = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.readyWinCount = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.finalWinCount = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.property1 = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.property2 = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.battleResult = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.betIndex = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.fightPowerOrder = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LordsBaseInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      userKeys: isSet(object.userKeys) ? globalThis.String(object.userKeys) : "",
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      sexJob: isSet(object.sexJob) ? globalThis.Number(object.sexJob) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionWing: isSet(object.fashionWing) ? globalThis.String(object.fashionWing) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      fashionHair: isSet(object.fashionHair) ? globalThis.String(object.fashionHair) : "",
      fashionHat: isSet(object.fashionHat) ? globalThis.String(object.fashionHat) : "",
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      fightPower: isSet(object.fightPower) ? globalThis.Number(object.fightPower) : 0,
      readyScore: isSet(object.readyScore) ? globalThis.Number(object.readyScore) : 0,
      readyOrder: isSet(object.readyOrder) ? globalThis.Number(object.readyOrder) : 0,
      readyRewad: isSet(object.readyRewad) ? globalThis.Number(object.readyRewad) : 0,
      finalScore: isSet(object.finalScore) ? globalThis.Number(object.finalScore) : 0,
      finalOrder: isSet(object.finalOrder) ? globalThis.Number(object.finalOrder) : 0,
      finalRewad: isSet(object.finalRewad) ? globalThis.Number(object.finalRewad) : 0,
      readyTurn: isSet(object.readyTurn) ? globalThis.Number(object.readyTurn) : 0,
      finalTurn: isSet(object.finalTurn) ? globalThis.Number(object.finalTurn) : 0,
      readyWinCount: isSet(object.readyWinCount) ? globalThis.Number(object.readyWinCount) : 0,
      finalWinCount: isSet(object.finalWinCount) ? globalThis.Number(object.finalWinCount) : 0,
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
      property1: isSet(object.property1) ? globalThis.String(object.property1) : "",
      property2: isSet(object.property2) ? globalThis.String(object.property2) : "",
      battleResult: isSet(object.battleResult) ? globalThis.Number(object.battleResult) : 0,
      betIndex: isSet(object.betIndex) ? globalThis.Number(object.betIndex) : 0,
      fightPowerOrder: isSet(object.fightPowerOrder) ? globalThis.Number(object.fightPowerOrder) : 0,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
    };
  },

  toJSON(message: LordsBaseInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.userKeys !== "") {
      obj.userKeys = message.userKeys;
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.sexJob !== 0) {
      obj.sexJob = Math.round(message.sexJob);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionWing !== "") {
      obj.fashionWing = message.fashionWing;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.fashionHair !== "") {
      obj.fashionHair = message.fashionHair;
    }
    if (message.fashionHat !== "") {
      obj.fashionHat = message.fashionHat;
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.fightPower !== 0) {
      obj.fightPower = Math.round(message.fightPower);
    }
    if (message.readyScore !== 0) {
      obj.readyScore = Math.round(message.readyScore);
    }
    if (message.readyOrder !== 0) {
      obj.readyOrder = Math.round(message.readyOrder);
    }
    if (message.readyRewad !== 0) {
      obj.readyRewad = Math.round(message.readyRewad);
    }
    if (message.finalScore !== 0) {
      obj.finalScore = Math.round(message.finalScore);
    }
    if (message.finalOrder !== 0) {
      obj.finalOrder = Math.round(message.finalOrder);
    }
    if (message.finalRewad !== 0) {
      obj.finalRewad = Math.round(message.finalRewad);
    }
    if (message.readyTurn !== 0) {
      obj.readyTurn = Math.round(message.readyTurn);
    }
    if (message.finalTurn !== 0) {
      obj.finalTurn = Math.round(message.finalTurn);
    }
    if (message.readyWinCount !== 0) {
      obj.readyWinCount = Math.round(message.readyWinCount);
    }
    if (message.finalWinCount !== 0) {
      obj.finalWinCount = Math.round(message.finalWinCount);
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.property1 !== "") {
      obj.property1 = message.property1;
    }
    if (message.property2 !== "") {
      obj.property2 = message.property2;
    }
    if (message.battleResult !== 0) {
      obj.battleResult = Math.round(message.battleResult);
    }
    if (message.betIndex !== 0) {
      obj.betIndex = Math.round(message.betIndex);
    }
    if (message.fightPowerOrder !== 0) {
      obj.fightPowerOrder = Math.round(message.fightPowerOrder);
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LordsBaseInfoMsg>, I>>(base?: I): LordsBaseInfoMsg {
    return LordsBaseInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LordsBaseInfoMsg>, I>>(object: I): LordsBaseInfoMsg {
    const message = createBaseLordsBaseInfoMsg();
    message.userId = object.userId ?? 0;
    message.serverName = object.serverName ?? "";
    message.nickName = object.nickName ?? "";
    message.userKeys = object.userKeys ?? "";
    message.job = object.job ?? 0;
    message.sexJob = object.sexJob ?? 0;
    message.grades = object.grades ?? 0;
    message.fashionArm = object.fashionArm ?? "";
    message.fashionWing = object.fashionWing ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.fashionHair = object.fashionHair ?? "";
    message.fashionHat = object.fashionHat ?? "";
    message.arm = object.arm ?? "";
    message.isVip = object.isVip ?? false;
    message.fightPower = object.fightPower ?? 0;
    message.readyScore = object.readyScore ?? 0;
    message.readyOrder = object.readyOrder ?? 0;
    message.readyRewad = object.readyRewad ?? 0;
    message.finalScore = object.finalScore ?? 0;
    message.finalOrder = object.finalOrder ?? 0;
    message.finalRewad = object.finalRewad ?? 0;
    message.readyTurn = object.readyTurn ?? 0;
    message.finalTurn = object.finalTurn ?? 0;
    message.readyWinCount = object.readyWinCount ?? 0;
    message.finalWinCount = object.finalWinCount ?? 0;
    message.isExist = object.isExist ?? false;
    message.property1 = object.property1 ?? "";
    message.property2 = object.property2 ?? "";
    message.battleResult = object.battleResult ?? 0;
    message.betIndex = object.betIndex ?? 0;
    message.fightPowerOrder = object.fightPowerOrder ?? 0;
    message.headId = object.headId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
