// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: crossguild/CrossGuildCampaignInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.crossguild";

export interface CrossGuildCampaignInfoMsg {
  state: number;
  playerCamp: number;
  roadInfo: number[];
  playerRank: number;
  startTime: number;
  endTime: number;
  road: number;
  redScore: number;
  blueScore: number;
  playerScore: number;
}

function createBaseCrossGuildCampaignInfoMsg(): CrossGuildCampaignInfoMsg {
  return {
    state: 0,
    playerCamp: 0,
    roadInfo: [],
    playerRank: 0,
    startTime: 0,
    endTime: 0,
    road: 0,
    redScore: 0,
    blueScore: 0,
    playerScore: 0,
  };
}

export const CrossGuildCampaignInfoMsg: MessageFns<CrossGuildCampaignInfoMsg> = {
  encode(message: CrossGuildCampaignInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.playerCamp !== 0) {
      writer.uint32(16).int32(message.playerCamp);
    }
    writer.uint32(26).fork();
    for (const v of message.roadInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.playerRank !== 0) {
      writer.uint32(32).int32(message.playerRank);
    }
    if (message.startTime !== 0) {
      writer.uint32(40).int32(message.startTime);
    }
    if (message.endTime !== 0) {
      writer.uint32(48).int32(message.endTime);
    }
    if (message.road !== 0) {
      writer.uint32(56).int32(message.road);
    }
    if (message.redScore !== 0) {
      writer.uint32(64).int32(message.redScore);
    }
    if (message.blueScore !== 0) {
      writer.uint32(72).int32(message.blueScore);
    }
    if (message.playerScore !== 0) {
      writer.uint32(80).int32(message.playerScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrossGuildCampaignInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrossGuildCampaignInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerCamp = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.roadInfo.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roadInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playerRank = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startTime = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.road = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.redScore = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.blueScore = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.playerScore = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrossGuildCampaignInfoMsg {
    return {
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      playerCamp: isSet(object.playerCamp) ? globalThis.Number(object.playerCamp) : 0,
      roadInfo: globalThis.Array.isArray(object?.roadInfo) ? object.roadInfo.map((e: any) => globalThis.Number(e)) : [],
      playerRank: isSet(object.playerRank) ? globalThis.Number(object.playerRank) : 0,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      road: isSet(object.road) ? globalThis.Number(object.road) : 0,
      redScore: isSet(object.redScore) ? globalThis.Number(object.redScore) : 0,
      blueScore: isSet(object.blueScore) ? globalThis.Number(object.blueScore) : 0,
      playerScore: isSet(object.playerScore) ? globalThis.Number(object.playerScore) : 0,
    };
  },

  toJSON(message: CrossGuildCampaignInfoMsg): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.playerCamp !== 0) {
      obj.playerCamp = Math.round(message.playerCamp);
    }
    if (message.roadInfo?.length) {
      obj.roadInfo = message.roadInfo.map((e) => Math.round(e));
    }
    if (message.playerRank !== 0) {
      obj.playerRank = Math.round(message.playerRank);
    }
    if (message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.endTime !== 0) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.road !== 0) {
      obj.road = Math.round(message.road);
    }
    if (message.redScore !== 0) {
      obj.redScore = Math.round(message.redScore);
    }
    if (message.blueScore !== 0) {
      obj.blueScore = Math.round(message.blueScore);
    }
    if (message.playerScore !== 0) {
      obj.playerScore = Math.round(message.playerScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrossGuildCampaignInfoMsg>, I>>(base?: I): CrossGuildCampaignInfoMsg {
    return CrossGuildCampaignInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrossGuildCampaignInfoMsg>, I>>(object: I): CrossGuildCampaignInfoMsg {
    const message = createBaseCrossGuildCampaignInfoMsg();
    message.state = object.state ?? 0;
    message.playerCamp = object.playerCamp ?? 0;
    message.roadInfo = object.roadInfo?.map((e) => e) || [];
    message.playerRank = object.playerRank ?? 0;
    message.startTime = object.startTime ?? 0;
    message.endTime = object.endTime ?? 0;
    message.road = object.road ?? 0;
    message.redScore = object.redScore ?? 0;
    message.blueScore = object.blueScore ?? 0;
    message.playerScore = object.playerScore ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
