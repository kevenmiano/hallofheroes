// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/MapUpdatedMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface MapUpdatedMsg {
  updatedType: number;
  army: string;
  wildLand: string;
  baseCastle: string;
}

function createBaseMapUpdatedMsg(): MapUpdatedMsg {
  return { updatedType: 0, army: "", wildLand: "", baseCastle: "" };
}

export const MapUpdatedMsg: MessageFns<MapUpdatedMsg> = {
  encode(message: MapUpdatedMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updatedType !== 0) {
      writer.uint32(8).int32(message.updatedType);
    }
    if (message.army !== "") {
      writer.uint32(18).string(message.army);
    }
    if (message.wildLand !== "") {
      writer.uint32(26).string(message.wildLand);
    }
    if (message.baseCastle !== "") {
      writer.uint32(34).string(message.baseCastle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MapUpdatedMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapUpdatedMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.updatedType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.army = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.wildLand = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.baseCastle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapUpdatedMsg {
    return {
      updatedType: isSet(object.updatedType) ? globalThis.Number(object.updatedType) : 0,
      army: isSet(object.army) ? globalThis.String(object.army) : "",
      wildLand: isSet(object.wildLand) ? globalThis.String(object.wildLand) : "",
      baseCastle: isSet(object.baseCastle) ? globalThis.String(object.baseCastle) : "",
    };
  },

  toJSON(message: MapUpdatedMsg): unknown {
    const obj: any = {};
    if (message.updatedType !== 0) {
      obj.updatedType = Math.round(message.updatedType);
    }
    if (message.army !== "") {
      obj.army = message.army;
    }
    if (message.wildLand !== "") {
      obj.wildLand = message.wildLand;
    }
    if (message.baseCastle !== "") {
      obj.baseCastle = message.baseCastle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapUpdatedMsg>, I>>(base?: I): MapUpdatedMsg {
    return MapUpdatedMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapUpdatedMsg>, I>>(object: I): MapUpdatedMsg {
    const message = createBaseMapUpdatedMsg();
    message.updatedType = object.updatedType ?? 0;
    message.army = object.army ?? "";
    message.wildLand = object.wildLand ?? "";
    message.baseCastle = object.baseCastle ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
