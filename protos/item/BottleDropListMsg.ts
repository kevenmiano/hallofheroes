// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: item/BottleDropListMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.item";

export interface BottleDropListMsg {
  dropItem: number[];
  score: number[];
  storey: number[];
  open: boolean;
  endTime: string;
  startTime: string;
  activeUuid: string;
}

function createBaseBottleDropListMsg(): BottleDropListMsg {
  return { dropItem: [], score: [], storey: [], open: false, endTime: "", startTime: "", activeUuid: "" };
}

export const BottleDropListMsg: MessageFns<BottleDropListMsg> = {
  encode(message: BottleDropListMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.dropItem) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.score) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.storey) {
      writer.int32(v);
    }
    writer.join();
    if (message.open !== false) {
      writer.uint32(32).bool(message.open);
    }
    if (message.endTime !== "") {
      writer.uint32(42).string(message.endTime);
    }
    if (message.startTime !== "") {
      writer.uint32(50).string(message.startTime);
    }
    if (message.activeUuid !== "") {
      writer.uint32(58).string(message.activeUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BottleDropListMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBottleDropListMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.dropItem.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dropItem.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.score.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.score.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.storey.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.storey.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.open = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.activeUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BottleDropListMsg {
    return {
      dropItem: globalThis.Array.isArray(object?.dropItem) ? object.dropItem.map((e: any) => globalThis.Number(e)) : [],
      score: globalThis.Array.isArray(object?.score) ? object.score.map((e: any) => globalThis.Number(e)) : [],
      storey: globalThis.Array.isArray(object?.storey) ? object.storey.map((e: any) => globalThis.Number(e)) : [],
      open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      activeUuid: isSet(object.activeUuid) ? globalThis.String(object.activeUuid) : "",
    };
  },

  toJSON(message: BottleDropListMsg): unknown {
    const obj: any = {};
    if (message.dropItem?.length) {
      obj.dropItem = message.dropItem.map((e) => Math.round(e));
    }
    if (message.score?.length) {
      obj.score = message.score.map((e) => Math.round(e));
    }
    if (message.storey?.length) {
      obj.storey = message.storey.map((e) => Math.round(e));
    }
    if (message.open !== false) {
      obj.open = message.open;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.activeUuid !== "") {
      obj.activeUuid = message.activeUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BottleDropListMsg>, I>>(base?: I): BottleDropListMsg {
    return BottleDropListMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BottleDropListMsg>, I>>(object: I): BottleDropListMsg {
    const message = createBaseBottleDropListMsg();
    message.dropItem = object.dropItem?.map((e) => e) || [];
    message.score = object.score?.map((e) => e) || [];
    message.storey = object.storey?.map((e) => e) || [];
    message.open = object.open ?? false;
    message.endTime = object.endTime ?? "";
    message.startTime = object.startTime ?? "";
    message.activeUuid = object.activeUuid ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
