// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: leed/LeedUpdatedRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.leed";

export interface LeedUpdatedRspMsg {
  leed: number[];
  leedProcess: number;
  totalNum: number;
  weekActive: number;
  state: number;
  opType: number;
}

function createBaseLeedUpdatedRspMsg(): LeedUpdatedRspMsg {
  return { leed: [], leedProcess: 0, totalNum: 0, weekActive: 0, state: 0, opType: 0 };
}

export const LeedUpdatedRspMsg: MessageFns<LeedUpdatedRspMsg> = {
  encode(message: LeedUpdatedRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.leed) {
      writer.int32(v);
    }
    writer.join();
    if (message.leedProcess !== 0) {
      writer.uint32(16).int32(message.leedProcess);
    }
    if (message.totalNum !== 0) {
      writer.uint32(24).int32(message.totalNum);
    }
    if (message.weekActive !== 0) {
      writer.uint32(32).int32(message.weekActive);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.opType !== 0) {
      writer.uint32(48).int32(message.opType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeedUpdatedRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeedUpdatedRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.leed.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.leed.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leedProcess = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalNum = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.weekActive = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeedUpdatedRspMsg {
    return {
      leed: globalThis.Array.isArray(object?.leed) ? object.leed.map((e: any) => globalThis.Number(e)) : [],
      leedProcess: isSet(object.leedProcess) ? globalThis.Number(object.leedProcess) : 0,
      totalNum: isSet(object.totalNum) ? globalThis.Number(object.totalNum) : 0,
      weekActive: isSet(object.weekActive) ? globalThis.Number(object.weekActive) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
    };
  },

  toJSON(message: LeedUpdatedRspMsg): unknown {
    const obj: any = {};
    if (message.leed?.length) {
      obj.leed = message.leed.map((e) => Math.round(e));
    }
    if (message.leedProcess !== 0) {
      obj.leedProcess = Math.round(message.leedProcess);
    }
    if (message.totalNum !== 0) {
      obj.totalNum = Math.round(message.totalNum);
    }
    if (message.weekActive !== 0) {
      obj.weekActive = Math.round(message.weekActive);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeedUpdatedRspMsg>, I>>(base?: I): LeedUpdatedRspMsg {
    return LeedUpdatedRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeedUpdatedRspMsg>, I>>(object: I): LeedUpdatedRspMsg {
    const message = createBaseLeedUpdatedRspMsg();
    message.leed = object.leed?.map((e) => e) || [];
    message.leedProcess = object.leedProcess ?? 0;
    message.totalNum = object.totalNum ?? 0;
    message.weekActive = object.weekActive ?? 0;
    message.state = object.state ?? 0;
    message.opType = object.opType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
