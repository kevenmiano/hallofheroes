// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/AdditionMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface AdditionMsg {
  masterType: number;
  power: number;
  agility: number;
  intellect: number;
  physique: number;
  createDate: string;
  expirtDate: string;
  description: string;
  isExist: boolean;
}

function createBaseAdditionMsg(): AdditionMsg {
  return {
    masterType: 0,
    power: 0,
    agility: 0,
    intellect: 0,
    physique: 0,
    createDate: "",
    expirtDate: "",
    description: "",
    isExist: false,
  };
}

export const AdditionMsg: MessageFns<AdditionMsg> = {
  encode(message: AdditionMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.masterType !== 0) {
      writer.uint32(8).int32(message.masterType);
    }
    if (message.power !== 0) {
      writer.uint32(16).int32(message.power);
    }
    if (message.agility !== 0) {
      writer.uint32(24).int32(message.agility);
    }
    if (message.intellect !== 0) {
      writer.uint32(32).int32(message.intellect);
    }
    if (message.physique !== 0) {
      writer.uint32(40).int32(message.physique);
    }
    if (message.createDate !== "") {
      writer.uint32(50).string(message.createDate);
    }
    if (message.expirtDate !== "") {
      writer.uint32(58).string(message.expirtDate);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.isExist !== false) {
      writer.uint32(72).bool(message.isExist);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdditionMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdditionMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.masterType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.power = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.agility = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.intellect = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.physique = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createDate = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.expirtDate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdditionMsg {
    return {
      masterType: isSet(object.masterType) ? globalThis.Number(object.masterType) : 0,
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      agility: isSet(object.agility) ? globalThis.Number(object.agility) : 0,
      intellect: isSet(object.intellect) ? globalThis.Number(object.intellect) : 0,
      physique: isSet(object.physique) ? globalThis.Number(object.physique) : 0,
      createDate: isSet(object.createDate) ? globalThis.String(object.createDate) : "",
      expirtDate: isSet(object.expirtDate) ? globalThis.String(object.expirtDate) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isExist: isSet(object.isExist) ? globalThis.Boolean(object.isExist) : false,
    };
  },

  toJSON(message: AdditionMsg): unknown {
    const obj: any = {};
    if (message.masterType !== 0) {
      obj.masterType = Math.round(message.masterType);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.agility !== 0) {
      obj.agility = Math.round(message.agility);
    }
    if (message.intellect !== 0) {
      obj.intellect = Math.round(message.intellect);
    }
    if (message.physique !== 0) {
      obj.physique = Math.round(message.physique);
    }
    if (message.createDate !== "") {
      obj.createDate = message.createDate;
    }
    if (message.expirtDate !== "") {
      obj.expirtDate = message.expirtDate;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdditionMsg>, I>>(base?: I): AdditionMsg {
    return AdditionMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdditionMsg>, I>>(object: I): AdditionMsg {
    const message = createBaseAdditionMsg();
    message.masterType = object.masterType ?? 0;
    message.power = object.power ?? 0;
    message.agility = object.agility ?? 0;
    message.intellect = object.intellect ?? 0;
    message.physique = object.physique ?? 0;
    message.createDate = object.createDate ?? "";
    message.expirtDate = object.expirtDate ?? "";
    message.description = object.description ?? "";
    message.isExist = object.isExist ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
