// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/MountInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface MountInfoMsg {
  mountTempId: number;
  power: number;
  intellect: number;
  physique: number;
  agility: number;
  speed: number;
  powerGp: number;
  intellectGp: number;
  physiqueGp: number;
  agilityGp: number;
  mountTotalGp: number;
  levelMax: number;
  discount: number;
}

function createBaseMountInfoMsg(): MountInfoMsg {
  return {
    mountTempId: 0,
    power: 0,
    intellect: 0,
    physique: 0,
    agility: 0,
    speed: 0,
    powerGp: 0,
    intellectGp: 0,
    physiqueGp: 0,
    agilityGp: 0,
    mountTotalGp: 0,
    levelMax: 0,
    discount: 0,
  };
}

export const MountInfoMsg: MessageFns<MountInfoMsg> = {
  encode(message: MountInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mountTempId !== 0) {
      writer.uint32(8).int32(message.mountTempId);
    }
    if (message.power !== 0) {
      writer.uint32(16).int32(message.power);
    }
    if (message.intellect !== 0) {
      writer.uint32(24).int32(message.intellect);
    }
    if (message.physique !== 0) {
      writer.uint32(32).int32(message.physique);
    }
    if (message.agility !== 0) {
      writer.uint32(40).int32(message.agility);
    }
    if (message.speed !== 0) {
      writer.uint32(48).int32(message.speed);
    }
    if (message.powerGp !== 0) {
      writer.uint32(56).int32(message.powerGp);
    }
    if (message.intellectGp !== 0) {
      writer.uint32(64).int32(message.intellectGp);
    }
    if (message.physiqueGp !== 0) {
      writer.uint32(72).int32(message.physiqueGp);
    }
    if (message.agilityGp !== 0) {
      writer.uint32(80).int32(message.agilityGp);
    }
    if (message.mountTotalGp !== 0) {
      writer.uint32(88).int32(message.mountTotalGp);
    }
    if (message.levelMax !== 0) {
      writer.uint32(96).int32(message.levelMax);
    }
    if (message.discount !== 0) {
      writer.uint32(104).int32(message.discount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MountInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMountInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mountTempId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.power = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intellect = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.physique = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.agility = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.speed = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.powerGp = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.intellectGp = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.physiqueGp = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.agilityGp = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mountTotalGp = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.levelMax = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.discount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MountInfoMsg {
    return {
      mountTempId: isSet(object.mountTempId) ? globalThis.Number(object.mountTempId) : 0,
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      intellect: isSet(object.intellect) ? globalThis.Number(object.intellect) : 0,
      physique: isSet(object.physique) ? globalThis.Number(object.physique) : 0,
      agility: isSet(object.agility) ? globalThis.Number(object.agility) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      powerGp: isSet(object.powerGp) ? globalThis.Number(object.powerGp) : 0,
      intellectGp: isSet(object.intellectGp) ? globalThis.Number(object.intellectGp) : 0,
      physiqueGp: isSet(object.physiqueGp) ? globalThis.Number(object.physiqueGp) : 0,
      agilityGp: isSet(object.agilityGp) ? globalThis.Number(object.agilityGp) : 0,
      mountTotalGp: isSet(object.mountTotalGp) ? globalThis.Number(object.mountTotalGp) : 0,
      levelMax: isSet(object.levelMax) ? globalThis.Number(object.levelMax) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
    };
  },

  toJSON(message: MountInfoMsg): unknown {
    const obj: any = {};
    if (message.mountTempId !== 0) {
      obj.mountTempId = Math.round(message.mountTempId);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.intellect !== 0) {
      obj.intellect = Math.round(message.intellect);
    }
    if (message.physique !== 0) {
      obj.physique = Math.round(message.physique);
    }
    if (message.agility !== 0) {
      obj.agility = Math.round(message.agility);
    }
    if (message.speed !== 0) {
      obj.speed = Math.round(message.speed);
    }
    if (message.powerGp !== 0) {
      obj.powerGp = Math.round(message.powerGp);
    }
    if (message.intellectGp !== 0) {
      obj.intellectGp = Math.round(message.intellectGp);
    }
    if (message.physiqueGp !== 0) {
      obj.physiqueGp = Math.round(message.physiqueGp);
    }
    if (message.agilityGp !== 0) {
      obj.agilityGp = Math.round(message.agilityGp);
    }
    if (message.mountTotalGp !== 0) {
      obj.mountTotalGp = Math.round(message.mountTotalGp);
    }
    if (message.levelMax !== 0) {
      obj.levelMax = Math.round(message.levelMax);
    }
    if (message.discount !== 0) {
      obj.discount = Math.round(message.discount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MountInfoMsg>, I>>(base?: I): MountInfoMsg {
    return MountInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MountInfoMsg>, I>>(object: I): MountInfoMsg {
    const message = createBaseMountInfoMsg();
    message.mountTempId = object.mountTempId ?? 0;
    message.power = object.power ?? 0;
    message.intellect = object.intellect ?? 0;
    message.physique = object.physique ?? 0;
    message.agility = object.agility ?? 0;
    message.speed = object.speed ?? 0;
    message.powerGp = object.powerGp ?? 0;
    message.intellectGp = object.intellectGp ?? 0;
    message.physiqueGp = object.physiqueGp ?? 0;
    message.agilityGp = object.agilityGp ?? 0;
    message.mountTotalGp = object.mountTotalGp ?? 0;
    message.levelMax = object.levelMax ?? 0;
    message.discount = object.discount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
