// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/AltarCampaignReportMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface AltarCampaignReportMsg {
  altarDurability: number;
  waveNum: number;
  monsterCount: number;
  buffType: number;
  hurtOrder: number[];
  leftStartTime: number;
  userBuffType: number;
  skill: number[];
}

function createBaseAltarCampaignReportMsg(): AltarCampaignReportMsg {
  return {
    altarDurability: 0,
    waveNum: 0,
    monsterCount: 0,
    buffType: 0,
    hurtOrder: [],
    leftStartTime: 0,
    userBuffType: 0,
    skill: [],
  };
}

export const AltarCampaignReportMsg: MessageFns<AltarCampaignReportMsg> = {
  encode(message: AltarCampaignReportMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.altarDurability !== 0) {
      writer.uint32(8).int32(message.altarDurability);
    }
    if (message.waveNum !== 0) {
      writer.uint32(16).int32(message.waveNum);
    }
    if (message.monsterCount !== 0) {
      writer.uint32(24).int32(message.monsterCount);
    }
    if (message.buffType !== 0) {
      writer.uint32(32).int32(message.buffType);
    }
    writer.uint32(42).fork();
    for (const v of message.hurtOrder) {
      writer.int32(v);
    }
    writer.join();
    if (message.leftStartTime !== 0) {
      writer.uint32(48).int32(message.leftStartTime);
    }
    if (message.userBuffType !== 0) {
      writer.uint32(56).int32(message.userBuffType);
    }
    writer.uint32(66).fork();
    for (const v of message.skill) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AltarCampaignReportMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAltarCampaignReportMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.altarDurability = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.waveNum = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.monsterCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.buffType = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.hurtOrder.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.hurtOrder.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.leftStartTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.userBuffType = reader.int32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.skill.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.skill.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AltarCampaignReportMsg {
    return {
      altarDurability: isSet(object.altarDurability) ? globalThis.Number(object.altarDurability) : 0,
      waveNum: isSet(object.waveNum) ? globalThis.Number(object.waveNum) : 0,
      monsterCount: isSet(object.monsterCount) ? globalThis.Number(object.monsterCount) : 0,
      buffType: isSet(object.buffType) ? globalThis.Number(object.buffType) : 0,
      hurtOrder: globalThis.Array.isArray(object?.hurtOrder)
        ? object.hurtOrder.map((e: any) => globalThis.Number(e))
        : [],
      leftStartTime: isSet(object.leftStartTime) ? globalThis.Number(object.leftStartTime) : 0,
      userBuffType: isSet(object.userBuffType) ? globalThis.Number(object.userBuffType) : 0,
      skill: globalThis.Array.isArray(object?.skill) ? object.skill.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: AltarCampaignReportMsg): unknown {
    const obj: any = {};
    if (message.altarDurability !== 0) {
      obj.altarDurability = Math.round(message.altarDurability);
    }
    if (message.waveNum !== 0) {
      obj.waveNum = Math.round(message.waveNum);
    }
    if (message.monsterCount !== 0) {
      obj.monsterCount = Math.round(message.monsterCount);
    }
    if (message.buffType !== 0) {
      obj.buffType = Math.round(message.buffType);
    }
    if (message.hurtOrder?.length) {
      obj.hurtOrder = message.hurtOrder.map((e) => Math.round(e));
    }
    if (message.leftStartTime !== 0) {
      obj.leftStartTime = Math.round(message.leftStartTime);
    }
    if (message.userBuffType !== 0) {
      obj.userBuffType = Math.round(message.userBuffType);
    }
    if (message.skill?.length) {
      obj.skill = message.skill.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AltarCampaignReportMsg>, I>>(base?: I): AltarCampaignReportMsg {
    return AltarCampaignReportMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AltarCampaignReportMsg>, I>>(object: I): AltarCampaignReportMsg {
    const message = createBaseAltarCampaignReportMsg();
    message.altarDurability = object.altarDurability ?? 0;
    message.waveNum = object.waveNum ?? 0;
    message.monsterCount = object.monsterCount ?? 0;
    message.buffType = object.buffType ?? 0;
    message.hurtOrder = object.hurtOrder?.map((e) => e) || [];
    message.leftStartTime = object.leftStartTime ?? 0;
    message.userBuffType = object.userBuffType ?? 0;
    message.skill = object.skill?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
