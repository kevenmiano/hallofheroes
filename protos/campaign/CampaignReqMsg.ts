// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/CampaignReqMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface CampaignReqMsg {
  paraInt1: number;
  paraInt2: number;
  paraInt3: number;
  paraInt4: number;
  paraInt5: number;
  paraString1: string;
  paraBool1: boolean;
  serverName: string;
  isCross: string;
}

function createBaseCampaignReqMsg(): CampaignReqMsg {
  return {
    paraInt1: 0,
    paraInt2: 0,
    paraInt3: 0,
    paraInt4: 0,
    paraInt5: 0,
    paraString1: "",
    paraBool1: false,
    serverName: "",
    isCross: "",
  };
}

export const CampaignReqMsg: MessageFns<CampaignReqMsg> = {
  encode(message: CampaignReqMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paraInt1 !== 0) {
      writer.uint32(8).int32(message.paraInt1);
    }
    if (message.paraInt2 !== 0) {
      writer.uint32(16).int32(message.paraInt2);
    }
    if (message.paraInt3 !== 0) {
      writer.uint32(24).int32(message.paraInt3);
    }
    if (message.paraInt4 !== 0) {
      writer.uint32(32).int32(message.paraInt4);
    }
    if (message.paraInt5 !== 0) {
      writer.uint32(40).int32(message.paraInt5);
    }
    if (message.paraString1 !== "") {
      writer.uint32(50).string(message.paraString1);
    }
    if (message.paraBool1 !== false) {
      writer.uint32(56).bool(message.paraBool1);
    }
    if (message.serverName !== "") {
      writer.uint32(66).string(message.serverName);
    }
    if (message.isCross !== "") {
      writer.uint32(74).string(message.isCross);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignReqMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignReqMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.paraInt1 = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.paraInt2 = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.paraInt3 = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.paraInt4 = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.paraInt5 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.paraString1 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.paraBool1 = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.isCross = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignReqMsg {
    return {
      paraInt1: isSet(object.paraInt1) ? globalThis.Number(object.paraInt1) : 0,
      paraInt2: isSet(object.paraInt2) ? globalThis.Number(object.paraInt2) : 0,
      paraInt3: isSet(object.paraInt3) ? globalThis.Number(object.paraInt3) : 0,
      paraInt4: isSet(object.paraInt4) ? globalThis.Number(object.paraInt4) : 0,
      paraInt5: isSet(object.paraInt5) ? globalThis.Number(object.paraInt5) : 0,
      paraString1: isSet(object.paraString1) ? globalThis.String(object.paraString1) : "",
      paraBool1: isSet(object.paraBool1) ? globalThis.Boolean(object.paraBool1) : false,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      isCross: isSet(object.isCross) ? globalThis.String(object.isCross) : "",
    };
  },

  toJSON(message: CampaignReqMsg): unknown {
    const obj: any = {};
    if (message.paraInt1 !== 0) {
      obj.paraInt1 = Math.round(message.paraInt1);
    }
    if (message.paraInt2 !== 0) {
      obj.paraInt2 = Math.round(message.paraInt2);
    }
    if (message.paraInt3 !== 0) {
      obj.paraInt3 = Math.round(message.paraInt3);
    }
    if (message.paraInt4 !== 0) {
      obj.paraInt4 = Math.round(message.paraInt4);
    }
    if (message.paraInt5 !== 0) {
      obj.paraInt5 = Math.round(message.paraInt5);
    }
    if (message.paraString1 !== "") {
      obj.paraString1 = message.paraString1;
    }
    if (message.paraBool1 !== false) {
      obj.paraBool1 = message.paraBool1;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.isCross !== "") {
      obj.isCross = message.isCross;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignReqMsg>, I>>(base?: I): CampaignReqMsg {
    return CampaignReqMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignReqMsg>, I>>(object: I): CampaignReqMsg {
    const message = createBaseCampaignReqMsg();
    message.paraInt1 = object.paraInt1 ?? 0;
    message.paraInt2 = object.paraInt2 ?? 0;
    message.paraInt3 = object.paraInt3 ?? 0;
    message.paraInt4 = object.paraInt4 ?? 0;
    message.paraInt5 = object.paraInt5 ?? 0;
    message.paraString1 = object.paraString1 ?? "";
    message.paraBool1 = object.paraBool1 ?? false;
    message.serverName = object.serverName ?? "";
    message.isCross = object.isCross ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
