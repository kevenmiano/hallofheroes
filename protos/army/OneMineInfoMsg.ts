// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/OneMineInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface OneMineInfoMsg {
  posId: number;
  nodeId: number;
  sonNodeId: number;
  occupyPlayerId: number;
  playerName: string;
  guildId: number;
  isOccupy: boolean;
}

function createBaseOneMineInfoMsg(): OneMineInfoMsg {
  return { posId: 0, nodeId: 0, sonNodeId: 0, occupyPlayerId: 0, playerName: "", guildId: 0, isOccupy: false };
}

export const OneMineInfoMsg: MessageFns<OneMineInfoMsg> = {
  encode(message: OneMineInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.posId !== 0) {
      writer.uint32(8).int32(message.posId);
    }
    if (message.nodeId !== 0) {
      writer.uint32(16).int32(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      writer.uint32(24).int32(message.sonNodeId);
    }
    if (message.occupyPlayerId !== 0) {
      writer.uint32(32).int32(message.occupyPlayerId);
    }
    if (message.playerName !== "") {
      writer.uint32(42).string(message.playerName);
    }
    if (message.guildId !== 0) {
      writer.uint32(48).int32(message.guildId);
    }
    if (message.isOccupy !== false) {
      writer.uint32(56).bool(message.isOccupy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneMineInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneMineInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.posId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sonNodeId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.occupyPlayerId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.playerName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.guildId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isOccupy = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneMineInfoMsg {
    return {
      posId: isSet(object.posId) ? globalThis.Number(object.posId) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      sonNodeId: isSet(object.sonNodeId) ? globalThis.Number(object.sonNodeId) : 0,
      occupyPlayerId: isSet(object.occupyPlayerId) ? globalThis.Number(object.occupyPlayerId) : 0,
      playerName: isSet(object.playerName) ? globalThis.String(object.playerName) : "",
      guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
      isOccupy: isSet(object.isOccupy) ? globalThis.Boolean(object.isOccupy) : false,
    };
  },

  toJSON(message: OneMineInfoMsg): unknown {
    const obj: any = {};
    if (message.posId !== 0) {
      obj.posId = Math.round(message.posId);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      obj.sonNodeId = Math.round(message.sonNodeId);
    }
    if (message.occupyPlayerId !== 0) {
      obj.occupyPlayerId = Math.round(message.occupyPlayerId);
    }
    if (message.playerName !== "") {
      obj.playerName = message.playerName;
    }
    if (message.guildId !== 0) {
      obj.guildId = Math.round(message.guildId);
    }
    if (message.isOccupy !== false) {
      obj.isOccupy = message.isOccupy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OneMineInfoMsg>, I>>(base?: I): OneMineInfoMsg {
    return OneMineInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OneMineInfoMsg>, I>>(object: I): OneMineInfoMsg {
    const message = createBaseOneMineInfoMsg();
    message.posId = object.posId ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.sonNodeId = object.sonNodeId ?? 0;
    message.occupyPlayerId = object.occupyPlayerId ?? 0;
    message.playerName = object.playerName ?? "";
    message.guildId = object.guildId ?? 0;
    message.isOccupy = object.isOccupy ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
