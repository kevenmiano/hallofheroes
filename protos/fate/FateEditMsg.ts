// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: fate/FateEditMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.fate";

export interface FateEditMsg {
  skillSonType: number;
  useItemCount: number;
  isDisable: boolean;
  turnNum: number;
  param1: string;
  param2: string;
  isSuccess: boolean;
  currCount: number;
  count: number[];
  payType: number;
}

function createBaseFateEditMsg(): FateEditMsg {
  return {
    skillSonType: 0,
    useItemCount: 0,
    isDisable: false,
    turnNum: 0,
    param1: "",
    param2: "",
    isSuccess: false,
    currCount: 0,
    count: [],
    payType: 0,
  };
}

export const FateEditMsg: MessageFns<FateEditMsg> = {
  encode(message: FateEditMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skillSonType !== 0) {
      writer.uint32(8).int32(message.skillSonType);
    }
    if (message.useItemCount !== 0) {
      writer.uint32(16).int32(message.useItemCount);
    }
    if (message.isDisable !== false) {
      writer.uint32(24).bool(message.isDisable);
    }
    if (message.turnNum !== 0) {
      writer.uint32(32).int32(message.turnNum);
    }
    if (message.param1 !== "") {
      writer.uint32(42).string(message.param1);
    }
    if (message.param2 !== "") {
      writer.uint32(50).string(message.param2);
    }
    if (message.isSuccess !== false) {
      writer.uint32(56).bool(message.isSuccess);
    }
    if (message.currCount !== 0) {
      writer.uint32(64).int32(message.currCount);
    }
    writer.uint32(74).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.join();
    if (message.payType !== 0) {
      writer.uint32(80).int32(message.payType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FateEditMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFateEditMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.skillSonType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.useItemCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isDisable = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.turnNum = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.param1 = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.param2 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isSuccess = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.currCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FateEditMsg {
    return {
      skillSonType: isSet(object.skillSonType) ? globalThis.Number(object.skillSonType) : 0,
      useItemCount: isSet(object.useItemCount) ? globalThis.Number(object.useItemCount) : 0,
      isDisable: isSet(object.isDisable) ? globalThis.Boolean(object.isDisable) : false,
      turnNum: isSet(object.turnNum) ? globalThis.Number(object.turnNum) : 0,
      param1: isSet(object.param1) ? globalThis.String(object.param1) : "",
      param2: isSet(object.param2) ? globalThis.String(object.param2) : "",
      isSuccess: isSet(object.isSuccess) ? globalThis.Boolean(object.isSuccess) : false,
      currCount: isSet(object.currCount) ? globalThis.Number(object.currCount) : 0,
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
    };
  },

  toJSON(message: FateEditMsg): unknown {
    const obj: any = {};
    if (message.skillSonType !== 0) {
      obj.skillSonType = Math.round(message.skillSonType);
    }
    if (message.useItemCount !== 0) {
      obj.useItemCount = Math.round(message.useItemCount);
    }
    if (message.isDisable !== false) {
      obj.isDisable = message.isDisable;
    }
    if (message.turnNum !== 0) {
      obj.turnNum = Math.round(message.turnNum);
    }
    if (message.param1 !== "") {
      obj.param1 = message.param1;
    }
    if (message.param2 !== "") {
      obj.param2 = message.param2;
    }
    if (message.isSuccess !== false) {
      obj.isSuccess = message.isSuccess;
    }
    if (message.currCount !== 0) {
      obj.currCount = Math.round(message.currCount);
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FateEditMsg>, I>>(base?: I): FateEditMsg {
    return FateEditMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FateEditMsg>, I>>(object: I): FateEditMsg {
    const message = createBaseFateEditMsg();
    message.skillSonType = object.skillSonType ?? 0;
    message.useItemCount = object.useItemCount ?? 0;
    message.isDisable = object.isDisable ?? false;
    message.turnNum = object.turnNum ?? 0;
    message.param1 = object.param1 ?? "";
    message.param2 = object.param2 ?? "";
    message.isSuccess = object.isSuccess ?? false;
    message.currCount = object.currCount ?? 0;
    message.count = object.count?.map((e) => e) || [];
    message.payType = object.payType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
