// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/HangupAttackMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface HangupAttackMsg {
  attackId: number;
  attackName: string;
  defenceId: number;
  defenceName: number;
  op: number;
}

function createBaseHangupAttackMsg(): HangupAttackMsg {
  return { attackId: 0, attackName: "", defenceId: 0, defenceName: 0, op: 0 };
}

export const HangupAttackMsg: MessageFns<HangupAttackMsg> = {
  encode(message: HangupAttackMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attackId !== 0) {
      writer.uint32(8).int32(message.attackId);
    }
    if (message.attackName !== "") {
      writer.uint32(18).string(message.attackName);
    }
    if (message.defenceId !== 0) {
      writer.uint32(24).int32(message.defenceId);
    }
    if (message.defenceName !== 0) {
      writer.uint32(32).int32(message.defenceName);
    }
    if (message.op !== 0) {
      writer.uint32(40).int32(message.op);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HangupAttackMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHangupAttackMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.attackId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attackName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.defenceId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.defenceName = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HangupAttackMsg {
    return {
      attackId: isSet(object.attackId) ? globalThis.Number(object.attackId) : 0,
      attackName: isSet(object.attackName) ? globalThis.String(object.attackName) : "",
      defenceId: isSet(object.defenceId) ? globalThis.Number(object.defenceId) : 0,
      defenceName: isSet(object.defenceName) ? globalThis.Number(object.defenceName) : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
    };
  },

  toJSON(message: HangupAttackMsg): unknown {
    const obj: any = {};
    if (message.attackId !== 0) {
      obj.attackId = Math.round(message.attackId);
    }
    if (message.attackName !== "") {
      obj.attackName = message.attackName;
    }
    if (message.defenceId !== 0) {
      obj.defenceId = Math.round(message.defenceId);
    }
    if (message.defenceName !== 0) {
      obj.defenceName = Math.round(message.defenceName);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HangupAttackMsg>, I>>(base?: I): HangupAttackMsg {
    return HangupAttackMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HangupAttackMsg>, I>>(object: I): HangupAttackMsg {
    const message = createBaseHangupAttackMsg();
    message.attackId = object.attackId ?? 0;
    message.attackName = object.attackName ?? "";
    message.defenceId = object.defenceId ?? 0;
    message.defenceName = object.defenceName ?? 0;
    message.op = object.op ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
