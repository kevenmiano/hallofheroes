// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cccactive/ActiveRankPB.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cccactive";

export interface ActiveRankPB {
  userName: string;
  score: number;
  rank: number;
  activeId: string;
  site: string;
  nickName: string;
}

function createBaseActiveRankPB(): ActiveRankPB {
  return { userName: "", score: 0, rank: 0, activeId: "", site: "", nickName: "" };
}

export const ActiveRankPB: MessageFns<ActiveRankPB> = {
  encode(message: ActiveRankPB, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    if (message.rank !== 0) {
      writer.uint32(24).int32(message.rank);
    }
    if (message.activeId !== "") {
      writer.uint32(34).string(message.activeId);
    }
    if (message.site !== "") {
      writer.uint32(42).string(message.site);
    }
    if (message.nickName !== "") {
      writer.uint32(50).string(message.nickName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveRankPB {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveRankPB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.site = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveRankPB {
    return {
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
    };
  },

  toJSON(message: ActiveRankPB): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveRankPB>, I>>(base?: I): ActiveRankPB {
    return ActiveRankPB.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveRankPB>, I>>(object: I): ActiveRankPB {
    const message = createBaseActiveRankPB();
    message.userName = object.userName ?? "";
    message.score = object.score ?? 0;
    message.rank = object.rank ?? 0;
    message.activeId = object.activeId ?? "";
    message.site = object.site ?? "";
    message.nickName = object.nickName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
