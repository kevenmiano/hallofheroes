// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/ArmyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface ArmyMsg {
  id: number;
  userId: number;
  name: string;
  type: number;
  side: number;
  formation: number;
  hero: number[];
  soldier: number[];
  result: number;
  isJoin: boolean;
  armyType: number;
  isRobot: boolean;
  failedCount: number;
  serverName: string;
  armyPlayerInfo: string;
  curWave: number;
  pet: number[];
}

function createBaseArmyMsg(): ArmyMsg {
  return {
    id: 0,
    userId: 0,
    name: "",
    type: 0,
    side: 0,
    formation: 0,
    hero: [],
    soldier: [],
    result: 0,
    isJoin: false,
    armyType: 0,
    isRobot: false,
    failedCount: 0,
    serverName: "",
    armyPlayerInfo: "",
    curWave: 0,
    pet: [],
  };
}

export const ArmyMsg: MessageFns<ArmyMsg> = {
  encode(message: ArmyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.side !== 0) {
      writer.uint32(40).int32(message.side);
    }
    if (message.formation !== 0) {
      writer.uint32(48).int32(message.formation);
    }
    writer.uint32(58).fork();
    for (const v of message.hero) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.soldier) {
      writer.int32(v);
    }
    writer.join();
    if (message.result !== 0) {
      writer.uint32(72).int32(message.result);
    }
    if (message.isJoin !== false) {
      writer.uint32(80).bool(message.isJoin);
    }
    if (message.armyType !== 0) {
      writer.uint32(88).int32(message.armyType);
    }
    if (message.isRobot !== false) {
      writer.uint32(96).bool(message.isRobot);
    }
    if (message.failedCount !== 0) {
      writer.uint32(104).int32(message.failedCount);
    }
    if (message.serverName !== "") {
      writer.uint32(114).string(message.serverName);
    }
    if (message.armyPlayerInfo !== "") {
      writer.uint32(122).string(message.armyPlayerInfo);
    }
    if (message.curWave !== 0) {
      writer.uint32(128).int32(message.curWave);
    }
    writer.uint32(138).fork();
    for (const v of message.pet) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArmyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArmyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.side = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.formation = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.hero.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.hero.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.soldier.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.soldier.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isJoin = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.armyType = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isRobot = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.failedCount = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.armyPlayerInfo = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.curWave = reader.int32();
          continue;
        }
        case 17: {
          if (tag === 136) {
            message.pet.push(reader.int32());

            continue;
          }

          if (tag === 138) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pet.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArmyMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      side: isSet(object.side) ? globalThis.Number(object.side) : 0,
      formation: isSet(object.formation) ? globalThis.Number(object.formation) : 0,
      hero: globalThis.Array.isArray(object?.hero) ? object.hero.map((e: any) => globalThis.Number(e)) : [],
      soldier: globalThis.Array.isArray(object?.soldier) ? object.soldier.map((e: any) => globalThis.Number(e)) : [],
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      isJoin: isSet(object.isJoin) ? globalThis.Boolean(object.isJoin) : false,
      armyType: isSet(object.armyType) ? globalThis.Number(object.armyType) : 0,
      isRobot: isSet(object.isRobot) ? globalThis.Boolean(object.isRobot) : false,
      failedCount: isSet(object.failedCount) ? globalThis.Number(object.failedCount) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      armyPlayerInfo: isSet(object.armyPlayerInfo) ? globalThis.String(object.armyPlayerInfo) : "",
      curWave: isSet(object.curWave) ? globalThis.Number(object.curWave) : 0,
      pet: globalThis.Array.isArray(object?.pet) ? object.pet.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ArmyMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.side !== 0) {
      obj.side = Math.round(message.side);
    }
    if (message.formation !== 0) {
      obj.formation = Math.round(message.formation);
    }
    if (message.hero?.length) {
      obj.hero = message.hero.map((e) => Math.round(e));
    }
    if (message.soldier?.length) {
      obj.soldier = message.soldier.map((e) => Math.round(e));
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.isJoin !== false) {
      obj.isJoin = message.isJoin;
    }
    if (message.armyType !== 0) {
      obj.armyType = Math.round(message.armyType);
    }
    if (message.isRobot !== false) {
      obj.isRobot = message.isRobot;
    }
    if (message.failedCount !== 0) {
      obj.failedCount = Math.round(message.failedCount);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.armyPlayerInfo !== "") {
      obj.armyPlayerInfo = message.armyPlayerInfo;
    }
    if (message.curWave !== 0) {
      obj.curWave = Math.round(message.curWave);
    }
    if (message.pet?.length) {
      obj.pet = message.pet.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArmyMsg>, I>>(base?: I): ArmyMsg {
    return ArmyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArmyMsg>, I>>(object: I): ArmyMsg {
    const message = createBaseArmyMsg();
    message.id = object.id ?? 0;
    message.userId = object.userId ?? 0;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.side = object.side ?? 0;
    message.formation = object.formation ?? 0;
    message.hero = object.hero?.map((e) => e) || [];
    message.soldier = object.soldier?.map((e) => e) || [];
    message.result = object.result ?? 0;
    message.isJoin = object.isJoin ?? false;
    message.armyType = object.armyType ?? 0;
    message.isRobot = object.isRobot ?? false;
    message.failedCount = object.failedCount ?? 0;
    message.serverName = object.serverName ?? "";
    message.armyPlayerInfo = object.armyPlayerInfo ?? "";
    message.curWave = object.curWave ?? 0;
    message.pet = object.pet?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
