// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: customer/QuestionReplayMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.customer";

export interface QuestionReplayMsg {
  questionId: string;
  type: number;
  userId: number;
  title: string;
  content: string;
  replayContent: string;
  commitTime: string;
  replayUserName: string;
  employ: number;
  stopReply: number;
}

function createBaseQuestionReplayMsg(): QuestionReplayMsg {
  return {
    questionId: "",
    type: 0,
    userId: 0,
    title: "",
    content: "",
    replayContent: "",
    commitTime: "",
    replayUserName: "",
    employ: 0,
    stopReply: 0,
  };
}

export const QuestionReplayMsg: MessageFns<QuestionReplayMsg> = {
  encode(message: QuestionReplayMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.questionId !== "") {
      writer.uint32(10).string(message.questionId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(42).string(message.content);
    }
    if (message.replayContent !== "") {
      writer.uint32(50).string(message.replayContent);
    }
    if (message.commitTime !== "") {
      writer.uint32(58).string(message.commitTime);
    }
    if (message.replayUserName !== "") {
      writer.uint32(66).string(message.replayUserName);
    }
    if (message.employ !== 0) {
      writer.uint32(72).int32(message.employ);
    }
    if (message.stopReply !== 0) {
      writer.uint32(80).int32(message.stopReply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuestionReplayMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuestionReplayMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.questionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.replayContent = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.commitTime = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.replayUserName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.employ = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.stopReply = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuestionReplayMsg {
    return {
      questionId: isSet(object.questionId) ? globalThis.String(object.questionId) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      replayContent: isSet(object.replayContent) ? globalThis.String(object.replayContent) : "",
      commitTime: isSet(object.commitTime) ? globalThis.String(object.commitTime) : "",
      replayUserName: isSet(object.replayUserName) ? globalThis.String(object.replayUserName) : "",
      employ: isSet(object.employ) ? globalThis.Number(object.employ) : 0,
      stopReply: isSet(object.stopReply) ? globalThis.Number(object.stopReply) : 0,
    };
  },

  toJSON(message: QuestionReplayMsg): unknown {
    const obj: any = {};
    if (message.questionId !== "") {
      obj.questionId = message.questionId;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.replayContent !== "") {
      obj.replayContent = message.replayContent;
    }
    if (message.commitTime !== "") {
      obj.commitTime = message.commitTime;
    }
    if (message.replayUserName !== "") {
      obj.replayUserName = message.replayUserName;
    }
    if (message.employ !== 0) {
      obj.employ = Math.round(message.employ);
    }
    if (message.stopReply !== 0) {
      obj.stopReply = Math.round(message.stopReply);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuestionReplayMsg>, I>>(base?: I): QuestionReplayMsg {
    return QuestionReplayMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuestionReplayMsg>, I>>(object: I): QuestionReplayMsg {
    const message = createBaseQuestionReplayMsg();
    message.questionId = object.questionId ?? "";
    message.type = object.type ?? 0;
    message.userId = object.userId ?? 0;
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.replayContent = object.replayContent ?? "";
    message.commitTime = object.commitTime ?? "";
    message.replayUserName = object.replayUserName ?? "";
    message.employ = object.employ ?? 0;
    message.stopReply = object.stopReply ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
