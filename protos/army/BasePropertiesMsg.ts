// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/BasePropertiesMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface BasePropertiesMsg {
  power: number;
  agility: number;
  intel: number;
  physi: number;
  captain: number;
  attack: number;
  defence: number;
  magicattack: number;
  magicdefence: number;
  live: number;
  conat: number;
  forcehit: number;
  parry: number;
}

function createBaseBasePropertiesMsg(): BasePropertiesMsg {
  return {
    power: 0,
    agility: 0,
    intel: 0,
    physi: 0,
    captain: 0,
    attack: 0,
    defence: 0,
    magicattack: 0,
    magicdefence: 0,
    live: 0,
    conat: 0,
    forcehit: 0,
    parry: 0,
  };
}

export const BasePropertiesMsg: MessageFns<BasePropertiesMsg> = {
  encode(message: BasePropertiesMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.power !== 0) {
      writer.uint32(8).int32(message.power);
    }
    if (message.agility !== 0) {
      writer.uint32(16).int32(message.agility);
    }
    if (message.intel !== 0) {
      writer.uint32(24).int32(message.intel);
    }
    if (message.physi !== 0) {
      writer.uint32(32).int32(message.physi);
    }
    if (message.captain !== 0) {
      writer.uint32(40).int32(message.captain);
    }
    if (message.attack !== 0) {
      writer.uint32(48).int32(message.attack);
    }
    if (message.defence !== 0) {
      writer.uint32(56).int32(message.defence);
    }
    if (message.magicattack !== 0) {
      writer.uint32(64).int32(message.magicattack);
    }
    if (message.magicdefence !== 0) {
      writer.uint32(72).int32(message.magicdefence);
    }
    if (message.live !== 0) {
      writer.uint32(80).int32(message.live);
    }
    if (message.conat !== 0) {
      writer.uint32(88).int32(message.conat);
    }
    if (message.forcehit !== 0) {
      writer.uint32(96).int32(message.forcehit);
    }
    if (message.parry !== 0) {
      writer.uint32(104).int32(message.parry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BasePropertiesMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBasePropertiesMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.power = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.agility = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intel = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.physi = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.captain = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.attack = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.defence = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.magicattack = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.magicdefence = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.live = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.conat = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.forcehit = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.parry = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BasePropertiesMsg {
    return {
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      agility: isSet(object.agility) ? globalThis.Number(object.agility) : 0,
      intel: isSet(object.intel) ? globalThis.Number(object.intel) : 0,
      physi: isSet(object.physi) ? globalThis.Number(object.physi) : 0,
      captain: isSet(object.captain) ? globalThis.Number(object.captain) : 0,
      attack: isSet(object.attack) ? globalThis.Number(object.attack) : 0,
      defence: isSet(object.defence) ? globalThis.Number(object.defence) : 0,
      magicattack: isSet(object.magicattack) ? globalThis.Number(object.magicattack) : 0,
      magicdefence: isSet(object.magicdefence) ? globalThis.Number(object.magicdefence) : 0,
      live: isSet(object.live) ? globalThis.Number(object.live) : 0,
      conat: isSet(object.conat) ? globalThis.Number(object.conat) : 0,
      forcehit: isSet(object.forcehit) ? globalThis.Number(object.forcehit) : 0,
      parry: isSet(object.parry) ? globalThis.Number(object.parry) : 0,
    };
  },

  toJSON(message: BasePropertiesMsg): unknown {
    const obj: any = {};
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.agility !== 0) {
      obj.agility = Math.round(message.agility);
    }
    if (message.intel !== 0) {
      obj.intel = Math.round(message.intel);
    }
    if (message.physi !== 0) {
      obj.physi = Math.round(message.physi);
    }
    if (message.captain !== 0) {
      obj.captain = Math.round(message.captain);
    }
    if (message.attack !== 0) {
      obj.attack = Math.round(message.attack);
    }
    if (message.defence !== 0) {
      obj.defence = Math.round(message.defence);
    }
    if (message.magicattack !== 0) {
      obj.magicattack = Math.round(message.magicattack);
    }
    if (message.magicdefence !== 0) {
      obj.magicdefence = Math.round(message.magicdefence);
    }
    if (message.live !== 0) {
      obj.live = Math.round(message.live);
    }
    if (message.conat !== 0) {
      obj.conat = Math.round(message.conat);
    }
    if (message.forcehit !== 0) {
      obj.forcehit = Math.round(message.forcehit);
    }
    if (message.parry !== 0) {
      obj.parry = Math.round(message.parry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BasePropertiesMsg>, I>>(base?: I): BasePropertiesMsg {
    return BasePropertiesMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BasePropertiesMsg>, I>>(object: I): BasePropertiesMsg {
    const message = createBaseBasePropertiesMsg();
    message.power = object.power ?? 0;
    message.agility = object.agility ?? 0;
    message.intel = object.intel ?? 0;
    message.physi = object.physi ?? 0;
    message.captain = object.captain ?? 0;
    message.attack = object.attack ?? 0;
    message.defence = object.defence ?? 0;
    message.magicattack = object.magicattack ?? 0;
    message.magicdefence = object.magicdefence ?? 0;
    message.live = object.live ?? 0;
    message.conat = object.conat ?? 0;
    message.forcehit = object.forcehit ?? 0;
    message.parry = object.parry ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
