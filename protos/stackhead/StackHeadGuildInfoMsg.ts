// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: stackhead/StackHeadGuildInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.stackhead";

export interface StackHeadGuildInfoMsg {
  guildUid: string;
  guildName: string;
  site: string;
  currentScore: number;
  battleFieldUid: string;
  crossServerId: number;
  attackBuffLevel: number;
  defenceBuffLevel: number;
  serverName: string;
  pos: number;
  defenceArmyAlive: number;
  defenceArmyTotal: number;
  seniorGeneralList: number[];
  totalFightCapacity: string;
}

function createBaseStackHeadGuildInfoMsg(): StackHeadGuildInfoMsg {
  return {
    guildUid: "",
    guildName: "",
    site: "",
    currentScore: 0,
    battleFieldUid: "",
    crossServerId: 0,
    attackBuffLevel: 0,
    defenceBuffLevel: 0,
    serverName: "",
    pos: 0,
    defenceArmyAlive: 0,
    defenceArmyTotal: 0,
    seniorGeneralList: [],
    totalFightCapacity: "",
  };
}

export const StackHeadGuildInfoMsg: MessageFns<StackHeadGuildInfoMsg> = {
  encode(message: StackHeadGuildInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildUid !== "") {
      writer.uint32(10).string(message.guildUid);
    }
    if (message.guildName !== "") {
      writer.uint32(18).string(message.guildName);
    }
    if (message.site !== "") {
      writer.uint32(26).string(message.site);
    }
    if (message.currentScore !== 0) {
      writer.uint32(32).int32(message.currentScore);
    }
    if (message.battleFieldUid !== "") {
      writer.uint32(42).string(message.battleFieldUid);
    }
    if (message.crossServerId !== 0) {
      writer.uint32(48).int32(message.crossServerId);
    }
    if (message.attackBuffLevel !== 0) {
      writer.uint32(56).int32(message.attackBuffLevel);
    }
    if (message.defenceBuffLevel !== 0) {
      writer.uint32(64).int32(message.defenceBuffLevel);
    }
    if (message.serverName !== "") {
      writer.uint32(74).string(message.serverName);
    }
    if (message.pos !== 0) {
      writer.uint32(80).int32(message.pos);
    }
    if (message.defenceArmyAlive !== 0) {
      writer.uint32(88).int32(message.defenceArmyAlive);
    }
    if (message.defenceArmyTotal !== 0) {
      writer.uint32(96).int32(message.defenceArmyTotal);
    }
    writer.uint32(106).fork();
    for (const v of message.seniorGeneralList) {
      writer.int32(v);
    }
    writer.join();
    if (message.totalFightCapacity !== "") {
      writer.uint32(114).string(message.totalFightCapacity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StackHeadGuildInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStackHeadGuildInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildUid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guildName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.site = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.battleFieldUid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.crossServerId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.attackBuffLevel = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.defenceBuffLevel = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.pos = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.defenceArmyAlive = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.defenceArmyTotal = reader.int32();
          continue;
        }
        case 13: {
          if (tag === 104) {
            message.seniorGeneralList.push(reader.int32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.seniorGeneralList.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.totalFightCapacity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StackHeadGuildInfoMsg {
    return {
      guildUid: isSet(object.guildUid) ? globalThis.String(object.guildUid) : "",
      guildName: isSet(object.guildName) ? globalThis.String(object.guildName) : "",
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      currentScore: isSet(object.currentScore) ? globalThis.Number(object.currentScore) : 0,
      battleFieldUid: isSet(object.battleFieldUid) ? globalThis.String(object.battleFieldUid) : "",
      crossServerId: isSet(object.crossServerId) ? globalThis.Number(object.crossServerId) : 0,
      attackBuffLevel: isSet(object.attackBuffLevel) ? globalThis.Number(object.attackBuffLevel) : 0,
      defenceBuffLevel: isSet(object.defenceBuffLevel) ? globalThis.Number(object.defenceBuffLevel) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      pos: isSet(object.pos) ? globalThis.Number(object.pos) : 0,
      defenceArmyAlive: isSet(object.defenceArmyAlive) ? globalThis.Number(object.defenceArmyAlive) : 0,
      defenceArmyTotal: isSet(object.defenceArmyTotal) ? globalThis.Number(object.defenceArmyTotal) : 0,
      seniorGeneralList: globalThis.Array.isArray(object?.seniorGeneralList)
        ? object.seniorGeneralList.map((e: any) => globalThis.Number(e))
        : [],
      totalFightCapacity: isSet(object.totalFightCapacity) ? globalThis.String(object.totalFightCapacity) : "",
    };
  },

  toJSON(message: StackHeadGuildInfoMsg): unknown {
    const obj: any = {};
    if (message.guildUid !== "") {
      obj.guildUid = message.guildUid;
    }
    if (message.guildName !== "") {
      obj.guildName = message.guildName;
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.currentScore !== 0) {
      obj.currentScore = Math.round(message.currentScore);
    }
    if (message.battleFieldUid !== "") {
      obj.battleFieldUid = message.battleFieldUid;
    }
    if (message.crossServerId !== 0) {
      obj.crossServerId = Math.round(message.crossServerId);
    }
    if (message.attackBuffLevel !== 0) {
      obj.attackBuffLevel = Math.round(message.attackBuffLevel);
    }
    if (message.defenceBuffLevel !== 0) {
      obj.defenceBuffLevel = Math.round(message.defenceBuffLevel);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.pos !== 0) {
      obj.pos = Math.round(message.pos);
    }
    if (message.defenceArmyAlive !== 0) {
      obj.defenceArmyAlive = Math.round(message.defenceArmyAlive);
    }
    if (message.defenceArmyTotal !== 0) {
      obj.defenceArmyTotal = Math.round(message.defenceArmyTotal);
    }
    if (message.seniorGeneralList?.length) {
      obj.seniorGeneralList = message.seniorGeneralList.map((e) => Math.round(e));
    }
    if (message.totalFightCapacity !== "") {
      obj.totalFightCapacity = message.totalFightCapacity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StackHeadGuildInfoMsg>, I>>(base?: I): StackHeadGuildInfoMsg {
    return StackHeadGuildInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StackHeadGuildInfoMsg>, I>>(object: I): StackHeadGuildInfoMsg {
    const message = createBaseStackHeadGuildInfoMsg();
    message.guildUid = object.guildUid ?? "";
    message.guildName = object.guildName ?? "";
    message.site = object.site ?? "";
    message.currentScore = object.currentScore ?? 0;
    message.battleFieldUid = object.battleFieldUid ?? "";
    message.crossServerId = object.crossServerId ?? 0;
    message.attackBuffLevel = object.attackBuffLevel ?? 0;
    message.defenceBuffLevel = object.defenceBuffLevel ?? 0;
    message.serverName = object.serverName ?? "";
    message.pos = object.pos ?? 0;
    message.defenceArmyAlive = object.defenceArmyAlive ?? 0;
    message.defenceArmyTotal = object.defenceArmyTotal ?? 0;
    message.seniorGeneralList = object.seniorGeneralList?.map((e) => e) || [];
    message.totalFightCapacity = object.totalFightCapacity ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
