// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/ActiveRspInfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface ActiveRspInfo {
  activeId: string;
  title: string;
  contents: string;
  awardContent: string;
  description: string;
  actionTimeContent: string;
  consortia: number;
  grades: number;
  sort: number;
  endDate: string;
  startDate: string;
}

function createBaseActiveRspInfo(): ActiveRspInfo {
  return {
    activeId: "",
    title: "",
    contents: "",
    awardContent: "",
    description: "",
    actionTimeContent: "",
    consortia: 0,
    grades: 0,
    sort: 0,
    endDate: "",
    startDate: "",
  };
}

export const ActiveRspInfo: MessageFns<ActiveRspInfo> = {
  encode(message: ActiveRspInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activeId !== "") {
      writer.uint32(10).string(message.activeId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.contents !== "") {
      writer.uint32(26).string(message.contents);
    }
    if (message.awardContent !== "") {
      writer.uint32(34).string(message.awardContent);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.actionTimeContent !== "") {
      writer.uint32(50).string(message.actionTimeContent);
    }
    if (message.consortia !== 0) {
      writer.uint32(56).int32(message.consortia);
    }
    if (message.grades !== 0) {
      writer.uint32(64).int32(message.grades);
    }
    if (message.sort !== 0) {
      writer.uint32(72).int32(message.sort);
    }
    if (message.endDate !== "") {
      writer.uint32(82).string(message.endDate);
    }
    if (message.startDate !== "") {
      writer.uint32(90).string(message.startDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveRspInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveRspInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contents = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.awardContent = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.actionTimeContent = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.consortia = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveRspInfo {
    return {
      activeId: isSet(object.activeId) ? globalThis.String(object.activeId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      contents: isSet(object.contents) ? globalThis.String(object.contents) : "",
      awardContent: isSet(object.awardContent) ? globalThis.String(object.awardContent) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      actionTimeContent: isSet(object.actionTimeContent) ? globalThis.String(object.actionTimeContent) : "",
      consortia: isSet(object.consortia) ? globalThis.Number(object.consortia) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
    };
  },

  toJSON(message: ActiveRspInfo): unknown {
    const obj: any = {};
    if (message.activeId !== "") {
      obj.activeId = message.activeId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.contents !== "") {
      obj.contents = message.contents;
    }
    if (message.awardContent !== "") {
      obj.awardContent = message.awardContent;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.actionTimeContent !== "") {
      obj.actionTimeContent = message.actionTimeContent;
    }
    if (message.consortia !== 0) {
      obj.consortia = Math.round(message.consortia);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveRspInfo>, I>>(base?: I): ActiveRspInfo {
    return ActiveRspInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveRspInfo>, I>>(object: I): ActiveRspInfo {
    const message = createBaseActiveRspInfo();
    message.activeId = object.activeId ?? "";
    message.title = object.title ?? "";
    message.contents = object.contents ?? "";
    message.awardContent = object.awardContent ?? "";
    message.description = object.description ?? "";
    message.actionTimeContent = object.actionTimeContent ?? "";
    message.consortia = object.consortia ?? 0;
    message.grades = object.grades ?? 0;
    message.sort = object.sort ?? 0;
    message.endDate = object.endDate ?? "";
    message.startDate = object.startDate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
