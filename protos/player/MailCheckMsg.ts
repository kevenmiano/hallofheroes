// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: player/MailCheckMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.player";

export interface MailCheckMsg {
  op: number;
  state: number;
  pin: number;
  mail: string;
  type: number;
  isFirstOpen: boolean;
  agree: boolean;
}

function createBaseMailCheckMsg(): MailCheckMsg {
  return { op: 0, state: 0, pin: 0, mail: "", type: 0, isFirstOpen: false, agree: false };
}

export const MailCheckMsg: MessageFns<MailCheckMsg> = {
  encode(message: MailCheckMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.pin !== 0) {
      writer.uint32(24).int32(message.pin);
    }
    if (message.mail !== "") {
      writer.uint32(34).string(message.mail);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.isFirstOpen !== false) {
      writer.uint32(48).bool(message.isFirstOpen);
    }
    if (message.agree !== false) {
      writer.uint32(56).bool(message.agree);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MailCheckMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMailCheckMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pin = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mail = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isFirstOpen = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.agree = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MailCheckMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      pin: isSet(object.pin) ? globalThis.Number(object.pin) : 0,
      mail: isSet(object.mail) ? globalThis.String(object.mail) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      isFirstOpen: isSet(object.isFirstOpen) ? globalThis.Boolean(object.isFirstOpen) : false,
      agree: isSet(object.agree) ? globalThis.Boolean(object.agree) : false,
    };
  },

  toJSON(message: MailCheckMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.pin !== 0) {
      obj.pin = Math.round(message.pin);
    }
    if (message.mail !== "") {
      obj.mail = message.mail;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.isFirstOpen !== false) {
      obj.isFirstOpen = message.isFirstOpen;
    }
    if (message.agree !== false) {
      obj.agree = message.agree;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MailCheckMsg>, I>>(base?: I): MailCheckMsg {
    return MailCheckMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MailCheckMsg>, I>>(object: I): MailCheckMsg {
    const message = createBaseMailCheckMsg();
    message.op = object.op ?? 0;
    message.state = object.state ?? 0;
    message.pin = object.pin ?? 0;
    message.mail = object.mail ?? "";
    message.type = object.type ?? 0;
    message.isFirstOpen = object.isFirstOpen ?? false;
    message.agree = object.agree ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
