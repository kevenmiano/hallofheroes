// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: rebate/PackageInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.rebate";

export interface PackageInfoMsg {
  packageId: string;
  order: number;
  point: number;
  price: number;
  itemid1: number;
  count1: number;
  itemid2: number;
  count2: number;
  itemid3: number;
  count3: number;
  itemid4: number;
  count4: number;
  itemid5: number;
  count5: number;
  itemid6: number;
  count6: number;
  itemid7: number;
  count7: number;
  itemid8: number;
  count8: number;
}

function createBasePackageInfoMsg(): PackageInfoMsg {
  return {
    packageId: "",
    order: 0,
    point: 0,
    price: 0,
    itemid1: 0,
    count1: 0,
    itemid2: 0,
    count2: 0,
    itemid3: 0,
    count3: 0,
    itemid4: 0,
    count4: 0,
    itemid5: 0,
    count5: 0,
    itemid6: 0,
    count6: 0,
    itemid7: 0,
    count7: 0,
    itemid8: 0,
    count8: 0,
  };
}

export const PackageInfoMsg: MessageFns<PackageInfoMsg> = {
  encode(message: PackageInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packageId !== "") {
      writer.uint32(10).string(message.packageId);
    }
    if (message.order !== 0) {
      writer.uint32(16).int32(message.order);
    }
    if (message.point !== 0) {
      writer.uint32(24).int32(message.point);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    if (message.itemid1 !== 0) {
      writer.uint32(40).int32(message.itemid1);
    }
    if (message.count1 !== 0) {
      writer.uint32(48).int32(message.count1);
    }
    if (message.itemid2 !== 0) {
      writer.uint32(56).int32(message.itemid2);
    }
    if (message.count2 !== 0) {
      writer.uint32(64).int32(message.count2);
    }
    if (message.itemid3 !== 0) {
      writer.uint32(72).int32(message.itemid3);
    }
    if (message.count3 !== 0) {
      writer.uint32(80).int32(message.count3);
    }
    if (message.itemid4 !== 0) {
      writer.uint32(88).int32(message.itemid4);
    }
    if (message.count4 !== 0) {
      writer.uint32(96).int32(message.count4);
    }
    if (message.itemid5 !== 0) {
      writer.uint32(104).int32(message.itemid5);
    }
    if (message.count5 !== 0) {
      writer.uint32(112).int32(message.count5);
    }
    if (message.itemid6 !== 0) {
      writer.uint32(120).int32(message.itemid6);
    }
    if (message.count6 !== 0) {
      writer.uint32(128).int32(message.count6);
    }
    if (message.itemid7 !== 0) {
      writer.uint32(136).int32(message.itemid7);
    }
    if (message.count7 !== 0) {
      writer.uint32(144).int32(message.count7);
    }
    if (message.itemid8 !== 0) {
      writer.uint32(152).int32(message.itemid8);
    }
    if (message.count8 !== 0) {
      writer.uint32(160).int32(message.count8);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.packageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.itemid1 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.count1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.itemid2 = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.count2 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.itemid3 = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.count3 = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.itemid4 = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.count4 = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.itemid5 = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.count5 = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.itemid6 = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.count6 = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.itemid7 = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.count7 = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.itemid8 = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.count8 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageInfoMsg {
    return {
      packageId: isSet(object.packageId) ? globalThis.String(object.packageId) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      itemid1: isSet(object.itemid1) ? globalThis.Number(object.itemid1) : 0,
      count1: isSet(object.count1) ? globalThis.Number(object.count1) : 0,
      itemid2: isSet(object.itemid2) ? globalThis.Number(object.itemid2) : 0,
      count2: isSet(object.count2) ? globalThis.Number(object.count2) : 0,
      itemid3: isSet(object.itemid3) ? globalThis.Number(object.itemid3) : 0,
      count3: isSet(object.count3) ? globalThis.Number(object.count3) : 0,
      itemid4: isSet(object.itemid4) ? globalThis.Number(object.itemid4) : 0,
      count4: isSet(object.count4) ? globalThis.Number(object.count4) : 0,
      itemid5: isSet(object.itemid5) ? globalThis.Number(object.itemid5) : 0,
      count5: isSet(object.count5) ? globalThis.Number(object.count5) : 0,
      itemid6: isSet(object.itemid6) ? globalThis.Number(object.itemid6) : 0,
      count6: isSet(object.count6) ? globalThis.Number(object.count6) : 0,
      itemid7: isSet(object.itemid7) ? globalThis.Number(object.itemid7) : 0,
      count7: isSet(object.count7) ? globalThis.Number(object.count7) : 0,
      itemid8: isSet(object.itemid8) ? globalThis.Number(object.itemid8) : 0,
      count8: isSet(object.count8) ? globalThis.Number(object.count8) : 0,
    };
  },

  toJSON(message: PackageInfoMsg): unknown {
    const obj: any = {};
    if (message.packageId !== "") {
      obj.packageId = message.packageId;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.itemid1 !== 0) {
      obj.itemid1 = Math.round(message.itemid1);
    }
    if (message.count1 !== 0) {
      obj.count1 = Math.round(message.count1);
    }
    if (message.itemid2 !== 0) {
      obj.itemid2 = Math.round(message.itemid2);
    }
    if (message.count2 !== 0) {
      obj.count2 = Math.round(message.count2);
    }
    if (message.itemid3 !== 0) {
      obj.itemid3 = Math.round(message.itemid3);
    }
    if (message.count3 !== 0) {
      obj.count3 = Math.round(message.count3);
    }
    if (message.itemid4 !== 0) {
      obj.itemid4 = Math.round(message.itemid4);
    }
    if (message.count4 !== 0) {
      obj.count4 = Math.round(message.count4);
    }
    if (message.itemid5 !== 0) {
      obj.itemid5 = Math.round(message.itemid5);
    }
    if (message.count5 !== 0) {
      obj.count5 = Math.round(message.count5);
    }
    if (message.itemid6 !== 0) {
      obj.itemid6 = Math.round(message.itemid6);
    }
    if (message.count6 !== 0) {
      obj.count6 = Math.round(message.count6);
    }
    if (message.itemid7 !== 0) {
      obj.itemid7 = Math.round(message.itemid7);
    }
    if (message.count7 !== 0) {
      obj.count7 = Math.round(message.count7);
    }
    if (message.itemid8 !== 0) {
      obj.itemid8 = Math.round(message.itemid8);
    }
    if (message.count8 !== 0) {
      obj.count8 = Math.round(message.count8);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PackageInfoMsg>, I>>(base?: I): PackageInfoMsg {
    return PackageInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PackageInfoMsg>, I>>(object: I): PackageInfoMsg {
    const message = createBasePackageInfoMsg();
    message.packageId = object.packageId ?? "";
    message.order = object.order ?? 0;
    message.point = object.point ?? 0;
    message.price = object.price ?? 0;
    message.itemid1 = object.itemid1 ?? 0;
    message.count1 = object.count1 ?? 0;
    message.itemid2 = object.itemid2 ?? 0;
    message.count2 = object.count2 ?? 0;
    message.itemid3 = object.itemid3 ?? 0;
    message.count3 = object.count3 ?? 0;
    message.itemid4 = object.itemid4 ?? 0;
    message.count4 = object.count4 ?? 0;
    message.itemid5 = object.itemid5 ?? 0;
    message.count5 = object.count5 ?? 0;
    message.itemid6 = object.itemid6 ?? 0;
    message.count6 = object.count6 ?? 0;
    message.itemid7 = object.itemid7 ?? 0;
    message.count7 = object.count7 ?? 0;
    message.itemid8 = object.itemid8 ?? 0;
    message.count8 = object.count8 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
