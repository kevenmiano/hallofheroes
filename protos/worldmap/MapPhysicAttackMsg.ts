// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: worldmap/MapPhysicAttackMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.worldmap";

export interface MapPhysicAttackMsg {
  mapId: number;
  posX: number;
  posY: number;
  nodeId: number;
  sonNodeId: number;
  op: number;
}

function createBaseMapPhysicAttackMsg(): MapPhysicAttackMsg {
  return { mapId: 0, posX: 0, posY: 0, nodeId: 0, sonNodeId: 0, op: 0 };
}

export const MapPhysicAttackMsg: MessageFns<MapPhysicAttackMsg> = {
  encode(
    message: MapPhysicAttackMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.mapId !== 0) {
      writer.uint32(8).int32(message.mapId);
    }
    if (message.posX !== 0) {
      writer.uint32(16).int32(message.posX);
    }
    if (message.posY !== 0) {
      writer.uint32(24).int32(message.posY);
    }
    if (message.nodeId !== 0) {
      writer.uint32(32).int32(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      writer.uint32(40).int32(message.sonNodeId);
    }
    if (message.op !== 0) {
      writer.uint32(48).int32(message.op);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MapPhysicAttackMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapPhysicAttackMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.posX = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.posY = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sonNodeId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapPhysicAttackMsg {
    return {
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
      sonNodeId: isSet(object.sonNodeId)
        ? globalThis.Number(object.sonNodeId)
        : 0,
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
    };
  },

  toJSON(message: MapPhysicAttackMsg): unknown {
    const obj: any = {};
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.posX !== 0) {
      obj.posX = Math.round(message.posX);
    }
    if (message.posY !== 0) {
      obj.posY = Math.round(message.posY);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.sonNodeId !== 0) {
      obj.sonNodeId = Math.round(message.sonNodeId);
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapPhysicAttackMsg>, I>>(
    base?: I,
  ): MapPhysicAttackMsg {
    return MapPhysicAttackMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapPhysicAttackMsg>, I>>(
    object: I,
  ): MapPhysicAttackMsg {
    const message = createBaseMapPhysicAttackMsg();
    message.mapId = object.mapId ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.sonNodeId = object.sonNodeId ?? 0;
    message.op = object.op ?? 0;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
