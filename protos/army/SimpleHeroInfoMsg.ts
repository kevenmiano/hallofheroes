// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/SimpleHeroInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface SimpleHeroInfoMsg {
  heroId: number;
  nickName: string;
  tempateId: number;
  playerId: number;
  remainPoint: number;
  skillPoint: number;
  skillScript: string;
  fastKey: string;
  hp: number;
  blood: number;
  bloodId: number;
  totalPower: number;
  totalAgility: number;
  totalIntellect: number;
  totalCaptain: number;
  totalPhysique: number;
  totalPhyAttack: number;
  totalPhyDefence: number;
  totalMagicAttack: number;
  totalMagicDefence: number;
  totalForceHit: number;
  totalParry: number;
  totalConatArmy: number;
  totalLive: number;
  basePower: number;
  baseAgility: number;
  baseIntellect: number;
  baseCaptain: number;
  basePhysique: number;
  basePhyAttack: number;
  basePhyDefence: number;
  baseMagicAttack: number;
  baseMagicDefence: number;
  baseForceHit: number;
  baseParry: number;
  baseConatArmy: number;
  baseLive: number;
  powerPoint: number;
  agilityPoint: number;
  intellectPoint: number;
  captainPoint: number;
  physiquePoint: number;
  fightPos: number;
  skillIndex: number;
  isActiveSecond: boolean;
  headId: number;
  talentPoint: number;
  talentGrade: number;
  talentSkill: string;
  grade: number;
  arm: string;
  cloth: string;
  wing: string;
  fightingCapacity: number;
  serverName: string;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  rune: string;
  fireResi: number;
  waterResi: number;
  electResi: number;
  windResi: number;
  darkResi: number;
  lightResi: number;
  reduceResi: number;
  totalStrength: number;
  baseStrength: number;
  totalTenacity: number;
  baseTenacity: number;
  extraSkillPoint: number;
}

function createBaseSimpleHeroInfoMsg(): SimpleHeroInfoMsg {
  return {
    heroId: 0,
    nickName: "",
    tempateId: 0,
    playerId: 0,
    remainPoint: 0,
    skillPoint: 0,
    skillScript: "",
    fastKey: "",
    hp: 0,
    blood: 0,
    bloodId: 0,
    totalPower: 0,
    totalAgility: 0,
    totalIntellect: 0,
    totalCaptain: 0,
    totalPhysique: 0,
    totalPhyAttack: 0,
    totalPhyDefence: 0,
    totalMagicAttack: 0,
    totalMagicDefence: 0,
    totalForceHit: 0,
    totalParry: 0,
    totalConatArmy: 0,
    totalLive: 0,
    basePower: 0,
    baseAgility: 0,
    baseIntellect: 0,
    baseCaptain: 0,
    basePhysique: 0,
    basePhyAttack: 0,
    basePhyDefence: 0,
    baseMagicAttack: 0,
    baseMagicDefence: 0,
    baseForceHit: 0,
    baseParry: 0,
    baseConatArmy: 0,
    baseLive: 0,
    powerPoint: 0,
    agilityPoint: 0,
    intellectPoint: 0,
    captainPoint: 0,
    physiquePoint: 0,
    fightPos: 0,
    skillIndex: 0,
    isActiveSecond: false,
    headId: 0,
    talentPoint: 0,
    talentGrade: 0,
    talentSkill: "",
    grade: 0,
    arm: "",
    cloth: "",
    wing: "",
    fightingCapacity: 0,
    serverName: "",
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    rune: "",
    fireResi: 0,
    waterResi: 0,
    electResi: 0,
    windResi: 0,
    darkResi: 0,
    lightResi: 0,
    reduceResi: 0,
    totalStrength: 0,
    baseStrength: 0,
    totalTenacity: 0,
    baseTenacity: 0,
    extraSkillPoint: 0,
  };
}

export const SimpleHeroInfoMsg: MessageFns<SimpleHeroInfoMsg> = {
  encode(message: SimpleHeroInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.heroId !== 0) {
      writer.uint32(8).int32(message.heroId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.tempateId !== 0) {
      writer.uint32(24).int32(message.tempateId);
    }
    if (message.playerId !== 0) {
      writer.uint32(32).int32(message.playerId);
    }
    if (message.remainPoint !== 0) {
      writer.uint32(40).int32(message.remainPoint);
    }
    if (message.skillPoint !== 0) {
      writer.uint32(48).int32(message.skillPoint);
    }
    if (message.skillScript !== "") {
      writer.uint32(58).string(message.skillScript);
    }
    if (message.fastKey !== "") {
      writer.uint32(66).string(message.fastKey);
    }
    if (message.hp !== 0) {
      writer.uint32(72).int32(message.hp);
    }
    if (message.blood !== 0) {
      writer.uint32(80).int32(message.blood);
    }
    if (message.bloodId !== 0) {
      writer.uint32(88).int32(message.bloodId);
    }
    if (message.totalPower !== 0) {
      writer.uint32(96).int32(message.totalPower);
    }
    if (message.totalAgility !== 0) {
      writer.uint32(104).int32(message.totalAgility);
    }
    if (message.totalIntellect !== 0) {
      writer.uint32(112).int32(message.totalIntellect);
    }
    if (message.totalCaptain !== 0) {
      writer.uint32(120).int32(message.totalCaptain);
    }
    if (message.totalPhysique !== 0) {
      writer.uint32(128).int32(message.totalPhysique);
    }
    if (message.totalPhyAttack !== 0) {
      writer.uint32(136).int32(message.totalPhyAttack);
    }
    if (message.totalPhyDefence !== 0) {
      writer.uint32(144).int32(message.totalPhyDefence);
    }
    if (message.totalMagicAttack !== 0) {
      writer.uint32(152).int32(message.totalMagicAttack);
    }
    if (message.totalMagicDefence !== 0) {
      writer.uint32(160).int32(message.totalMagicDefence);
    }
    if (message.totalForceHit !== 0) {
      writer.uint32(168).int32(message.totalForceHit);
    }
    if (message.totalParry !== 0) {
      writer.uint32(176).int32(message.totalParry);
    }
    if (message.totalConatArmy !== 0) {
      writer.uint32(184).int32(message.totalConatArmy);
    }
    if (message.totalLive !== 0) {
      writer.uint32(192).int32(message.totalLive);
    }
    if (message.basePower !== 0) {
      writer.uint32(200).int32(message.basePower);
    }
    if (message.baseAgility !== 0) {
      writer.uint32(208).int32(message.baseAgility);
    }
    if (message.baseIntellect !== 0) {
      writer.uint32(216).int32(message.baseIntellect);
    }
    if (message.baseCaptain !== 0) {
      writer.uint32(224).int32(message.baseCaptain);
    }
    if (message.basePhysique !== 0) {
      writer.uint32(232).int32(message.basePhysique);
    }
    if (message.basePhyAttack !== 0) {
      writer.uint32(240).int32(message.basePhyAttack);
    }
    if (message.basePhyDefence !== 0) {
      writer.uint32(248).int32(message.basePhyDefence);
    }
    if (message.baseMagicAttack !== 0) {
      writer.uint32(256).int32(message.baseMagicAttack);
    }
    if (message.baseMagicDefence !== 0) {
      writer.uint32(264).int32(message.baseMagicDefence);
    }
    if (message.baseForceHit !== 0) {
      writer.uint32(272).int32(message.baseForceHit);
    }
    if (message.baseParry !== 0) {
      writer.uint32(280).int32(message.baseParry);
    }
    if (message.baseConatArmy !== 0) {
      writer.uint32(288).int32(message.baseConatArmy);
    }
    if (message.baseLive !== 0) {
      writer.uint32(296).int32(message.baseLive);
    }
    if (message.powerPoint !== 0) {
      writer.uint32(304).int32(message.powerPoint);
    }
    if (message.agilityPoint !== 0) {
      writer.uint32(312).int32(message.agilityPoint);
    }
    if (message.intellectPoint !== 0) {
      writer.uint32(320).int32(message.intellectPoint);
    }
    if (message.captainPoint !== 0) {
      writer.uint32(328).int32(message.captainPoint);
    }
    if (message.physiquePoint !== 0) {
      writer.uint32(336).int32(message.physiquePoint);
    }
    if (message.fightPos !== 0) {
      writer.uint32(344).int32(message.fightPos);
    }
    if (message.skillIndex !== 0) {
      writer.uint32(352).int32(message.skillIndex);
    }
    if (message.isActiveSecond !== false) {
      writer.uint32(360).bool(message.isActiveSecond);
    }
    if (message.headId !== 0) {
      writer.uint32(368).int32(message.headId);
    }
    if (message.talentPoint !== 0) {
      writer.uint32(376).int32(message.talentPoint);
    }
    if (message.talentGrade !== 0) {
      writer.uint32(384).int32(message.talentGrade);
    }
    if (message.talentSkill !== "") {
      writer.uint32(394).string(message.talentSkill);
    }
    if (message.grade !== 0) {
      writer.uint32(400).int32(message.grade);
    }
    if (message.arm !== "") {
      writer.uint32(410).string(message.arm);
    }
    if (message.cloth !== "") {
      writer.uint32(418).string(message.cloth);
    }
    if (message.wing !== "") {
      writer.uint32(426).string(message.wing);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(432).int32(message.fightingCapacity);
    }
    if (message.serverName !== "") {
      writer.uint32(442).string(message.serverName);
    }
    if (message.hat !== "") {
      writer.uint32(450).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(458).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(466).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(472).bool(message.hide);
    }
    if (message.rune !== "") {
      writer.uint32(482).string(message.rune);
    }
    if (message.fireResi !== 0) {
      writer.uint32(488).int32(message.fireResi);
    }
    if (message.waterResi !== 0) {
      writer.uint32(496).int32(message.waterResi);
    }
    if (message.electResi !== 0) {
      writer.uint32(504).int32(message.electResi);
    }
    if (message.windResi !== 0) {
      writer.uint32(512).int32(message.windResi);
    }
    if (message.darkResi !== 0) {
      writer.uint32(520).int32(message.darkResi);
    }
    if (message.lightResi !== 0) {
      writer.uint32(528).int32(message.lightResi);
    }
    if (message.reduceResi !== 0) {
      writer.uint32(536).int32(message.reduceResi);
    }
    if (message.totalStrength !== 0) {
      writer.uint32(544).int32(message.totalStrength);
    }
    if (message.baseStrength !== 0) {
      writer.uint32(552).int32(message.baseStrength);
    }
    if (message.totalTenacity !== 0) {
      writer.uint32(560).int32(message.totalTenacity);
    }
    if (message.baseTenacity !== 0) {
      writer.uint32(568).int32(message.baseTenacity);
    }
    if (message.extraSkillPoint !== 0) {
      writer.uint32(576).int32(message.extraSkillPoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleHeroInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleHeroInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tempateId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.remainPoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.skillPoint = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.skillScript = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fastKey = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.hp = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.blood = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.bloodId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.totalPower = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.totalAgility = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.totalIntellect = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.totalCaptain = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.totalPhysique = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.totalPhyAttack = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.totalPhyDefence = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.totalMagicAttack = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.totalMagicDefence = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.totalForceHit = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.totalParry = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.totalConatArmy = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.totalLive = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.basePower = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.baseAgility = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.baseIntellect = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.baseCaptain = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.basePhysique = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.basePhyAttack = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.basePhyDefence = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.baseMagicAttack = reader.int32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.baseMagicDefence = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.baseForceHit = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.baseParry = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.baseConatArmy = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.baseLive = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.powerPoint = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.agilityPoint = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.intellectPoint = reader.int32();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.captainPoint = reader.int32();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.physiquePoint = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.fightPos = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.skillIndex = reader.int32();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.isActiveSecond = reader.bool();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.talentPoint = reader.int32();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.talentGrade = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.talentSkill = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.cloth = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.rune = reader.string();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.fireResi = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 496) {
            break;
          }

          message.waterResi = reader.int32();
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.electResi = reader.int32();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.windResi = reader.int32();
          continue;
        }
        case 65: {
          if (tag !== 520) {
            break;
          }

          message.darkResi = reader.int32();
          continue;
        }
        case 66: {
          if (tag !== 528) {
            break;
          }

          message.lightResi = reader.int32();
          continue;
        }
        case 67: {
          if (tag !== 536) {
            break;
          }

          message.reduceResi = reader.int32();
          continue;
        }
        case 68: {
          if (tag !== 544) {
            break;
          }

          message.totalStrength = reader.int32();
          continue;
        }
        case 69: {
          if (tag !== 552) {
            break;
          }

          message.baseStrength = reader.int32();
          continue;
        }
        case 70: {
          if (tag !== 560) {
            break;
          }

          message.totalTenacity = reader.int32();
          continue;
        }
        case 71: {
          if (tag !== 568) {
            break;
          }

          message.baseTenacity = reader.int32();
          continue;
        }
        case 72: {
          if (tag !== 576) {
            break;
          }

          message.extraSkillPoint = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleHeroInfoMsg {
    return {
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      tempateId: isSet(object.tempateId) ? globalThis.Number(object.tempateId) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      remainPoint: isSet(object.remainPoint) ? globalThis.Number(object.remainPoint) : 0,
      skillPoint: isSet(object.skillPoint) ? globalThis.Number(object.skillPoint) : 0,
      skillScript: isSet(object.skillScript) ? globalThis.String(object.skillScript) : "",
      fastKey: isSet(object.fastKey) ? globalThis.String(object.fastKey) : "",
      hp: isSet(object.hp) ? globalThis.Number(object.hp) : 0,
      blood: isSet(object.blood) ? globalThis.Number(object.blood) : 0,
      bloodId: isSet(object.bloodId) ? globalThis.Number(object.bloodId) : 0,
      totalPower: isSet(object.totalPower) ? globalThis.Number(object.totalPower) : 0,
      totalAgility: isSet(object.totalAgility) ? globalThis.Number(object.totalAgility) : 0,
      totalIntellect: isSet(object.totalIntellect) ? globalThis.Number(object.totalIntellect) : 0,
      totalCaptain: isSet(object.totalCaptain) ? globalThis.Number(object.totalCaptain) : 0,
      totalPhysique: isSet(object.totalPhysique) ? globalThis.Number(object.totalPhysique) : 0,
      totalPhyAttack: isSet(object.totalPhyAttack) ? globalThis.Number(object.totalPhyAttack) : 0,
      totalPhyDefence: isSet(object.totalPhyDefence) ? globalThis.Number(object.totalPhyDefence) : 0,
      totalMagicAttack: isSet(object.totalMagicAttack) ? globalThis.Number(object.totalMagicAttack) : 0,
      totalMagicDefence: isSet(object.totalMagicDefence) ? globalThis.Number(object.totalMagicDefence) : 0,
      totalForceHit: isSet(object.totalForceHit) ? globalThis.Number(object.totalForceHit) : 0,
      totalParry: isSet(object.totalParry) ? globalThis.Number(object.totalParry) : 0,
      totalConatArmy: isSet(object.totalConatArmy) ? globalThis.Number(object.totalConatArmy) : 0,
      totalLive: isSet(object.totalLive) ? globalThis.Number(object.totalLive) : 0,
      basePower: isSet(object.basePower) ? globalThis.Number(object.basePower) : 0,
      baseAgility: isSet(object.baseAgility) ? globalThis.Number(object.baseAgility) : 0,
      baseIntellect: isSet(object.baseIntellect) ? globalThis.Number(object.baseIntellect) : 0,
      baseCaptain: isSet(object.baseCaptain) ? globalThis.Number(object.baseCaptain) : 0,
      basePhysique: isSet(object.basePhysique) ? globalThis.Number(object.basePhysique) : 0,
      basePhyAttack: isSet(object.basePhyAttack) ? globalThis.Number(object.basePhyAttack) : 0,
      basePhyDefence: isSet(object.basePhyDefence) ? globalThis.Number(object.basePhyDefence) : 0,
      baseMagicAttack: isSet(object.baseMagicAttack) ? globalThis.Number(object.baseMagicAttack) : 0,
      baseMagicDefence: isSet(object.baseMagicDefence) ? globalThis.Number(object.baseMagicDefence) : 0,
      baseForceHit: isSet(object.baseForceHit) ? globalThis.Number(object.baseForceHit) : 0,
      baseParry: isSet(object.baseParry) ? globalThis.Number(object.baseParry) : 0,
      baseConatArmy: isSet(object.baseConatArmy) ? globalThis.Number(object.baseConatArmy) : 0,
      baseLive: isSet(object.baseLive) ? globalThis.Number(object.baseLive) : 0,
      powerPoint: isSet(object.powerPoint) ? globalThis.Number(object.powerPoint) : 0,
      agilityPoint: isSet(object.agilityPoint) ? globalThis.Number(object.agilityPoint) : 0,
      intellectPoint: isSet(object.intellectPoint) ? globalThis.Number(object.intellectPoint) : 0,
      captainPoint: isSet(object.captainPoint) ? globalThis.Number(object.captainPoint) : 0,
      physiquePoint: isSet(object.physiquePoint) ? globalThis.Number(object.physiquePoint) : 0,
      fightPos: isSet(object.fightPos) ? globalThis.Number(object.fightPos) : 0,
      skillIndex: isSet(object.skillIndex) ? globalThis.Number(object.skillIndex) : 0,
      isActiveSecond: isSet(object.isActiveSecond) ? globalThis.Boolean(object.isActiveSecond) : false,
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      talentPoint: isSet(object.talentPoint) ? globalThis.Number(object.talentPoint) : 0,
      talentGrade: isSet(object.talentGrade) ? globalThis.Number(object.talentGrade) : 0,
      talentSkill: isSet(object.talentSkill) ? globalThis.String(object.talentSkill) : "",
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      cloth: isSet(object.cloth) ? globalThis.String(object.cloth) : "",
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      rune: isSet(object.rune) ? globalThis.String(object.rune) : "",
      fireResi: isSet(object.fireResi) ? globalThis.Number(object.fireResi) : 0,
      waterResi: isSet(object.waterResi) ? globalThis.Number(object.waterResi) : 0,
      electResi: isSet(object.electResi) ? globalThis.Number(object.electResi) : 0,
      windResi: isSet(object.windResi) ? globalThis.Number(object.windResi) : 0,
      darkResi: isSet(object.darkResi) ? globalThis.Number(object.darkResi) : 0,
      lightResi: isSet(object.lightResi) ? globalThis.Number(object.lightResi) : 0,
      reduceResi: isSet(object.reduceResi) ? globalThis.Number(object.reduceResi) : 0,
      totalStrength: isSet(object.totalStrength) ? globalThis.Number(object.totalStrength) : 0,
      baseStrength: isSet(object.baseStrength) ? globalThis.Number(object.baseStrength) : 0,
      totalTenacity: isSet(object.totalTenacity) ? globalThis.Number(object.totalTenacity) : 0,
      baseTenacity: isSet(object.baseTenacity) ? globalThis.Number(object.baseTenacity) : 0,
      extraSkillPoint: isSet(object.extraSkillPoint) ? globalThis.Number(object.extraSkillPoint) : 0,
    };
  },

  toJSON(message: SimpleHeroInfoMsg): unknown {
    const obj: any = {};
    if (message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.tempateId !== 0) {
      obj.tempateId = Math.round(message.tempateId);
    }
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.remainPoint !== 0) {
      obj.remainPoint = Math.round(message.remainPoint);
    }
    if (message.skillPoint !== 0) {
      obj.skillPoint = Math.round(message.skillPoint);
    }
    if (message.skillScript !== "") {
      obj.skillScript = message.skillScript;
    }
    if (message.fastKey !== "") {
      obj.fastKey = message.fastKey;
    }
    if (message.hp !== 0) {
      obj.hp = Math.round(message.hp);
    }
    if (message.blood !== 0) {
      obj.blood = Math.round(message.blood);
    }
    if (message.bloodId !== 0) {
      obj.bloodId = Math.round(message.bloodId);
    }
    if (message.totalPower !== 0) {
      obj.totalPower = Math.round(message.totalPower);
    }
    if (message.totalAgility !== 0) {
      obj.totalAgility = Math.round(message.totalAgility);
    }
    if (message.totalIntellect !== 0) {
      obj.totalIntellect = Math.round(message.totalIntellect);
    }
    if (message.totalCaptain !== 0) {
      obj.totalCaptain = Math.round(message.totalCaptain);
    }
    if (message.totalPhysique !== 0) {
      obj.totalPhysique = Math.round(message.totalPhysique);
    }
    if (message.totalPhyAttack !== 0) {
      obj.totalPhyAttack = Math.round(message.totalPhyAttack);
    }
    if (message.totalPhyDefence !== 0) {
      obj.totalPhyDefence = Math.round(message.totalPhyDefence);
    }
    if (message.totalMagicAttack !== 0) {
      obj.totalMagicAttack = Math.round(message.totalMagicAttack);
    }
    if (message.totalMagicDefence !== 0) {
      obj.totalMagicDefence = Math.round(message.totalMagicDefence);
    }
    if (message.totalForceHit !== 0) {
      obj.totalForceHit = Math.round(message.totalForceHit);
    }
    if (message.totalParry !== 0) {
      obj.totalParry = Math.round(message.totalParry);
    }
    if (message.totalConatArmy !== 0) {
      obj.totalConatArmy = Math.round(message.totalConatArmy);
    }
    if (message.totalLive !== 0) {
      obj.totalLive = Math.round(message.totalLive);
    }
    if (message.basePower !== 0) {
      obj.basePower = Math.round(message.basePower);
    }
    if (message.baseAgility !== 0) {
      obj.baseAgility = Math.round(message.baseAgility);
    }
    if (message.baseIntellect !== 0) {
      obj.baseIntellect = Math.round(message.baseIntellect);
    }
    if (message.baseCaptain !== 0) {
      obj.baseCaptain = Math.round(message.baseCaptain);
    }
    if (message.basePhysique !== 0) {
      obj.basePhysique = Math.round(message.basePhysique);
    }
    if (message.basePhyAttack !== 0) {
      obj.basePhyAttack = Math.round(message.basePhyAttack);
    }
    if (message.basePhyDefence !== 0) {
      obj.basePhyDefence = Math.round(message.basePhyDefence);
    }
    if (message.baseMagicAttack !== 0) {
      obj.baseMagicAttack = Math.round(message.baseMagicAttack);
    }
    if (message.baseMagicDefence !== 0) {
      obj.baseMagicDefence = Math.round(message.baseMagicDefence);
    }
    if (message.baseForceHit !== 0) {
      obj.baseForceHit = Math.round(message.baseForceHit);
    }
    if (message.baseParry !== 0) {
      obj.baseParry = Math.round(message.baseParry);
    }
    if (message.baseConatArmy !== 0) {
      obj.baseConatArmy = Math.round(message.baseConatArmy);
    }
    if (message.baseLive !== 0) {
      obj.baseLive = Math.round(message.baseLive);
    }
    if (message.powerPoint !== 0) {
      obj.powerPoint = Math.round(message.powerPoint);
    }
    if (message.agilityPoint !== 0) {
      obj.agilityPoint = Math.round(message.agilityPoint);
    }
    if (message.intellectPoint !== 0) {
      obj.intellectPoint = Math.round(message.intellectPoint);
    }
    if (message.captainPoint !== 0) {
      obj.captainPoint = Math.round(message.captainPoint);
    }
    if (message.physiquePoint !== 0) {
      obj.physiquePoint = Math.round(message.physiquePoint);
    }
    if (message.fightPos !== 0) {
      obj.fightPos = Math.round(message.fightPos);
    }
    if (message.skillIndex !== 0) {
      obj.skillIndex = Math.round(message.skillIndex);
    }
    if (message.isActiveSecond !== false) {
      obj.isActiveSecond = message.isActiveSecond;
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.talentPoint !== 0) {
      obj.talentPoint = Math.round(message.talentPoint);
    }
    if (message.talentGrade !== 0) {
      obj.talentGrade = Math.round(message.talentGrade);
    }
    if (message.talentSkill !== "") {
      obj.talentSkill = message.talentSkill;
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.cloth !== "") {
      obj.cloth = message.cloth;
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.rune !== "") {
      obj.rune = message.rune;
    }
    if (message.fireResi !== 0) {
      obj.fireResi = Math.round(message.fireResi);
    }
    if (message.waterResi !== 0) {
      obj.waterResi = Math.round(message.waterResi);
    }
    if (message.electResi !== 0) {
      obj.electResi = Math.round(message.electResi);
    }
    if (message.windResi !== 0) {
      obj.windResi = Math.round(message.windResi);
    }
    if (message.darkResi !== 0) {
      obj.darkResi = Math.round(message.darkResi);
    }
    if (message.lightResi !== 0) {
      obj.lightResi = Math.round(message.lightResi);
    }
    if (message.reduceResi !== 0) {
      obj.reduceResi = Math.round(message.reduceResi);
    }
    if (message.totalStrength !== 0) {
      obj.totalStrength = Math.round(message.totalStrength);
    }
    if (message.baseStrength !== 0) {
      obj.baseStrength = Math.round(message.baseStrength);
    }
    if (message.totalTenacity !== 0) {
      obj.totalTenacity = Math.round(message.totalTenacity);
    }
    if (message.baseTenacity !== 0) {
      obj.baseTenacity = Math.round(message.baseTenacity);
    }
    if (message.extraSkillPoint !== 0) {
      obj.extraSkillPoint = Math.round(message.extraSkillPoint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimpleHeroInfoMsg>, I>>(base?: I): SimpleHeroInfoMsg {
    return SimpleHeroInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleHeroInfoMsg>, I>>(object: I): SimpleHeroInfoMsg {
    const message = createBaseSimpleHeroInfoMsg();
    message.heroId = object.heroId ?? 0;
    message.nickName = object.nickName ?? "";
    message.tempateId = object.tempateId ?? 0;
    message.playerId = object.playerId ?? 0;
    message.remainPoint = object.remainPoint ?? 0;
    message.skillPoint = object.skillPoint ?? 0;
    message.skillScript = object.skillScript ?? "";
    message.fastKey = object.fastKey ?? "";
    message.hp = object.hp ?? 0;
    message.blood = object.blood ?? 0;
    message.bloodId = object.bloodId ?? 0;
    message.totalPower = object.totalPower ?? 0;
    message.totalAgility = object.totalAgility ?? 0;
    message.totalIntellect = object.totalIntellect ?? 0;
    message.totalCaptain = object.totalCaptain ?? 0;
    message.totalPhysique = object.totalPhysique ?? 0;
    message.totalPhyAttack = object.totalPhyAttack ?? 0;
    message.totalPhyDefence = object.totalPhyDefence ?? 0;
    message.totalMagicAttack = object.totalMagicAttack ?? 0;
    message.totalMagicDefence = object.totalMagicDefence ?? 0;
    message.totalForceHit = object.totalForceHit ?? 0;
    message.totalParry = object.totalParry ?? 0;
    message.totalConatArmy = object.totalConatArmy ?? 0;
    message.totalLive = object.totalLive ?? 0;
    message.basePower = object.basePower ?? 0;
    message.baseAgility = object.baseAgility ?? 0;
    message.baseIntellect = object.baseIntellect ?? 0;
    message.baseCaptain = object.baseCaptain ?? 0;
    message.basePhysique = object.basePhysique ?? 0;
    message.basePhyAttack = object.basePhyAttack ?? 0;
    message.basePhyDefence = object.basePhyDefence ?? 0;
    message.baseMagicAttack = object.baseMagicAttack ?? 0;
    message.baseMagicDefence = object.baseMagicDefence ?? 0;
    message.baseForceHit = object.baseForceHit ?? 0;
    message.baseParry = object.baseParry ?? 0;
    message.baseConatArmy = object.baseConatArmy ?? 0;
    message.baseLive = object.baseLive ?? 0;
    message.powerPoint = object.powerPoint ?? 0;
    message.agilityPoint = object.agilityPoint ?? 0;
    message.intellectPoint = object.intellectPoint ?? 0;
    message.captainPoint = object.captainPoint ?? 0;
    message.physiquePoint = object.physiquePoint ?? 0;
    message.fightPos = object.fightPos ?? 0;
    message.skillIndex = object.skillIndex ?? 0;
    message.isActiveSecond = object.isActiveSecond ?? false;
    message.headId = object.headId ?? 0;
    message.talentPoint = object.talentPoint ?? 0;
    message.talentGrade = object.talentGrade ?? 0;
    message.talentSkill = object.talentSkill ?? "";
    message.grade = object.grade ?? 0;
    message.arm = object.arm ?? "";
    message.cloth = object.cloth ?? "";
    message.wing = object.wing ?? "";
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.serverName = object.serverName ?? "";
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.rune = object.rune ?? "";
    message.fireResi = object.fireResi ?? 0;
    message.waterResi = object.waterResi ?? 0;
    message.electResi = object.electResi ?? 0;
    message.windResi = object.windResi ?? 0;
    message.darkResi = object.darkResi ?? 0;
    message.lightResi = object.lightResi ?? 0;
    message.reduceResi = object.reduceResi ?? 0;
    message.totalStrength = object.totalStrength ?? 0;
    message.baseStrength = object.baseStrength ?? 0;
    message.totalTenacity = object.totalTenacity ?? 0;
    message.baseTenacity = object.baseTenacity ?? 0;
    message.extraSkillPoint = object.extraSkillPoint ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
