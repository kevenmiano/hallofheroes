// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: vehicle/SnowVehicleEndRewardMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.vehicle";

export interface SnowVehicleEndRewardMsg {
  myRank: string;
  isOnHook: string;
  pickSkillNum: string;
  damage: string;
  eliminateNum: string;
  todayReward: string;
}

function createBaseSnowVehicleEndRewardMsg(): SnowVehicleEndRewardMsg {
  return { myRank: "", isOnHook: "", pickSkillNum: "", damage: "", eliminateNum: "", todayReward: "" };
}

export const SnowVehicleEndRewardMsg: MessageFns<SnowVehicleEndRewardMsg> = {
  encode(message: SnowVehicleEndRewardMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.myRank !== "") {
      writer.uint32(10).string(message.myRank);
    }
    if (message.isOnHook !== "") {
      writer.uint32(18).string(message.isOnHook);
    }
    if (message.pickSkillNum !== "") {
      writer.uint32(26).string(message.pickSkillNum);
    }
    if (message.damage !== "") {
      writer.uint32(34).string(message.damage);
    }
    if (message.eliminateNum !== "") {
      writer.uint32(42).string(message.eliminateNum);
    }
    if (message.todayReward !== "") {
      writer.uint32(50).string(message.todayReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SnowVehicleEndRewardMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnowVehicleEndRewardMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.myRank = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.isOnHook = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pickSkillNum = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.damage = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.eliminateNum = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.todayReward = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SnowVehicleEndRewardMsg {
    return {
      myRank: isSet(object.myRank) ? globalThis.String(object.myRank) : "",
      isOnHook: isSet(object.isOnHook) ? globalThis.String(object.isOnHook) : "",
      pickSkillNum: isSet(object.pickSkillNum) ? globalThis.String(object.pickSkillNum) : "",
      damage: isSet(object.damage) ? globalThis.String(object.damage) : "",
      eliminateNum: isSet(object.eliminateNum) ? globalThis.String(object.eliminateNum) : "",
      todayReward: isSet(object.todayReward) ? globalThis.String(object.todayReward) : "",
    };
  },

  toJSON(message: SnowVehicleEndRewardMsg): unknown {
    const obj: any = {};
    if (message.myRank !== "") {
      obj.myRank = message.myRank;
    }
    if (message.isOnHook !== "") {
      obj.isOnHook = message.isOnHook;
    }
    if (message.pickSkillNum !== "") {
      obj.pickSkillNum = message.pickSkillNum;
    }
    if (message.damage !== "") {
      obj.damage = message.damage;
    }
    if (message.eliminateNum !== "") {
      obj.eliminateNum = message.eliminateNum;
    }
    if (message.todayReward !== "") {
      obj.todayReward = message.todayReward;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SnowVehicleEndRewardMsg>, I>>(base?: I): SnowVehicleEndRewardMsg {
    return SnowVehicleEndRewardMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SnowVehicleEndRewardMsg>, I>>(object: I): SnowVehicleEndRewardMsg {
    const message = createBaseSnowVehicleEndRewardMsg();
    message.myRank = object.myRank ?? "";
    message.isOnHook = object.isOnHook ?? "";
    message.pickSkillNum = object.pickSkillNum ?? "";
    message.damage = object.damage ?? "";
    message.eliminateNum = object.eliminateNum ?? "";
    message.todayReward = object.todayReward ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
