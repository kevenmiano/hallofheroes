// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/FriendInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface FriendInfoMsg {
  userId: number;
  relation: number;
  sex: number;
  pic: number;
  grades: number;
  nickName: string;
  onlineState: number;
  relationGrade: number;
  relationGp: number;
  consortiaId: number;
  consortiaName: string;
  result: boolean;
  addMsg: string;
  fightCapacity: number;
  job: number;
  groupId: number;
  expAdded: number;
  snsInfo: string;
  chatState: number;
  vipType: number;
  isVip: boolean;
  frameId: number;
  tarRelation: number;
}

function createBaseFriendInfoMsg(): FriendInfoMsg {
  return {
    userId: 0,
    relation: 0,
    sex: 0,
    pic: 0,
    grades: 0,
    nickName: "",
    onlineState: 0,
    relationGrade: 0,
    relationGp: 0,
    consortiaId: 0,
    consortiaName: "",
    result: false,
    addMsg: "",
    fightCapacity: 0,
    job: 0,
    groupId: 0,
    expAdded: 0,
    snsInfo: "",
    chatState: 0,
    vipType: 0,
    isVip: false,
    frameId: 0,
    tarRelation: 0,
  };
}

export const FriendInfoMsg: MessageFns<FriendInfoMsg> = {
  encode(message: FriendInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.relation !== 0) {
      writer.uint32(16).int32(message.relation);
    }
    if (message.sex !== 0) {
      writer.uint32(24).int32(message.sex);
    }
    if (message.pic !== 0) {
      writer.uint32(32).int32(message.pic);
    }
    if (message.grades !== 0) {
      writer.uint32(40).int32(message.grades);
    }
    if (message.nickName !== "") {
      writer.uint32(50).string(message.nickName);
    }
    if (message.onlineState !== 0) {
      writer.uint32(56).int32(message.onlineState);
    }
    if (message.relationGrade !== 0) {
      writer.uint32(64).int32(message.relationGrade);
    }
    if (message.relationGp !== 0) {
      writer.uint32(72).int32(message.relationGp);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(80).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(90).string(message.consortiaName);
    }
    if (message.result !== false) {
      writer.uint32(96).bool(message.result);
    }
    if (message.addMsg !== "") {
      writer.uint32(106).string(message.addMsg);
    }
    if (message.fightCapacity !== 0) {
      writer.uint32(112).int32(message.fightCapacity);
    }
    if (message.job !== 0) {
      writer.uint32(120).int32(message.job);
    }
    if (message.groupId !== 0) {
      writer.uint32(128).int32(message.groupId);
    }
    if (message.expAdded !== 0) {
      writer.uint32(136).int32(message.expAdded);
    }
    if (message.snsInfo !== "") {
      writer.uint32(146).string(message.snsInfo);
    }
    if (message.chatState !== 0) {
      writer.uint32(152).int32(message.chatState);
    }
    if (message.vipType !== 0) {
      writer.uint32(160).int32(message.vipType);
    }
    if (message.isVip !== false) {
      writer.uint32(168).bool(message.isVip);
    }
    if (message.frameId !== 0) {
      writer.uint32(176).int32(message.frameId);
    }
    if (message.tarRelation !== 0) {
      writer.uint32(184).int32(message.tarRelation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.relation = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pic = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.onlineState = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.relationGrade = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.relationGp = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.addMsg = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.fightCapacity = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.groupId = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.expAdded = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.snsInfo = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.chatState = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.frameId = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.tarRelation = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendInfoMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      relation: isSet(object.relation) ? globalThis.Number(object.relation) : 0,
      sex: isSet(object.sex) ? globalThis.Number(object.sex) : 0,
      pic: isSet(object.pic) ? globalThis.Number(object.pic) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      onlineState: isSet(object.onlineState) ? globalThis.Number(object.onlineState) : 0,
      relationGrade: isSet(object.relationGrade) ? globalThis.Number(object.relationGrade) : 0,
      relationGp: isSet(object.relationGp) ? globalThis.Number(object.relationGp) : 0,
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      addMsg: isSet(object.addMsg) ? globalThis.String(object.addMsg) : "",
      fightCapacity: isSet(object.fightCapacity) ? globalThis.Number(object.fightCapacity) : 0,
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
      expAdded: isSet(object.expAdded) ? globalThis.Number(object.expAdded) : 0,
      snsInfo: isSet(object.snsInfo) ? globalThis.String(object.snsInfo) : "",
      chatState: isSet(object.chatState) ? globalThis.Number(object.chatState) : 0,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      frameId: isSet(object.frameId) ? globalThis.Number(object.frameId) : 0,
      tarRelation: isSet(object.tarRelation) ? globalThis.Number(object.tarRelation) : 0,
    };
  },

  toJSON(message: FriendInfoMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.relation !== 0) {
      obj.relation = Math.round(message.relation);
    }
    if (message.sex !== 0) {
      obj.sex = Math.round(message.sex);
    }
    if (message.pic !== 0) {
      obj.pic = Math.round(message.pic);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.onlineState !== 0) {
      obj.onlineState = Math.round(message.onlineState);
    }
    if (message.relationGrade !== 0) {
      obj.relationGrade = Math.round(message.relationGrade);
    }
    if (message.relationGp !== 0) {
      obj.relationGp = Math.round(message.relationGp);
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.addMsg !== "") {
      obj.addMsg = message.addMsg;
    }
    if (message.fightCapacity !== 0) {
      obj.fightCapacity = Math.round(message.fightCapacity);
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.groupId !== 0) {
      obj.groupId = Math.round(message.groupId);
    }
    if (message.expAdded !== 0) {
      obj.expAdded = Math.round(message.expAdded);
    }
    if (message.snsInfo !== "") {
      obj.snsInfo = message.snsInfo;
    }
    if (message.chatState !== 0) {
      obj.chatState = Math.round(message.chatState);
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.frameId !== 0) {
      obj.frameId = Math.round(message.frameId);
    }
    if (message.tarRelation !== 0) {
      obj.tarRelation = Math.round(message.tarRelation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendInfoMsg>, I>>(base?: I): FriendInfoMsg {
    return FriendInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendInfoMsg>, I>>(object: I): FriendInfoMsg {
    const message = createBaseFriendInfoMsg();
    message.userId = object.userId ?? 0;
    message.relation = object.relation ?? 0;
    message.sex = object.sex ?? 0;
    message.pic = object.pic ?? 0;
    message.grades = object.grades ?? 0;
    message.nickName = object.nickName ?? "";
    message.onlineState = object.onlineState ?? 0;
    message.relationGrade = object.relationGrade ?? 0;
    message.relationGp = object.relationGp ?? 0;
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.result = object.result ?? false;
    message.addMsg = object.addMsg ?? "";
    message.fightCapacity = object.fightCapacity ?? 0;
    message.job = object.job ?? 0;
    message.groupId = object.groupId ?? 0;
    message.expAdded = object.expAdded ?? 0;
    message.snsInfo = object.snsInfo ?? "";
    message.chatState = object.chatState ?? 0;
    message.vipType = object.vipType ?? 0;
    message.isVip = object.isVip ?? false;
    message.frameId = object.frameId ?? 0;
    message.tarRelation = object.tarRelation ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
