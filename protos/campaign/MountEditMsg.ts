// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/MountEditMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface MountEditMsg {
  propertyType: number;
  payType: number;
  param1: number;
  param2: number;
}

function createBaseMountEditMsg(): MountEditMsg {
  return { propertyType: 0, payType: 0, param1: 0, param2: 0 };
}

export const MountEditMsg: MessageFns<MountEditMsg> = {
  encode(message: MountEditMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.propertyType !== 0) {
      writer.uint32(8).int32(message.propertyType);
    }
    if (message.payType !== 0) {
      writer.uint32(16).int32(message.payType);
    }
    if (message.param1 !== 0) {
      writer.uint32(24).int32(message.param1);
    }
    if (message.param2 !== 0) {
      writer.uint32(32).int32(message.param2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MountEditMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMountEditMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.propertyType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.param2 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MountEditMsg {
    return {
      propertyType: isSet(object.propertyType) ? globalThis.Number(object.propertyType) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.Number(object.param2) : 0,
    };
  },

  toJSON(message: MountEditMsg): unknown {
    const obj: any = {};
    if (message.propertyType !== 0) {
      obj.propertyType = Math.round(message.propertyType);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== 0) {
      obj.param2 = Math.round(message.param2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MountEditMsg>, I>>(base?: I): MountEditMsg {
    return MountEditMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MountEditMsg>, I>>(object: I): MountEditMsg {
    const message = createBaseMountEditMsg();
    message.propertyType = object.propertyType ?? 0;
    message.payType = object.payType ?? 0;
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
