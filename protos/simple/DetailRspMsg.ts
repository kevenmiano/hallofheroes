// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: simple/DetailRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.simple";

export interface DetailRspMsg {
  otherId: number;
  serverName: string;
  item: number[];
  army: string;
  star: number[];
  hideFashion: boolean;
  watch: number[];
  powcardfight: number[];
  tatooHoleInfo: number[];
  property: string;
  fashionProperty: string;
}

function createBaseDetailRspMsg(): DetailRspMsg {
  return {
    otherId: 0,
    serverName: "",
    item: [],
    army: "",
    star: [],
    hideFashion: false,
    watch: [],
    powcardfight: [],
    tatooHoleInfo: [],
    property: "",
    fashionProperty: "",
  };
}

export const DetailRspMsg: MessageFns<DetailRspMsg> = {
  encode(message: DetailRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.otherId !== 0) {
      writer.uint32(8).int32(message.otherId);
    }
    if (message.serverName !== "") {
      writer.uint32(18).string(message.serverName);
    }
    writer.uint32(26).fork();
    for (const v of message.item) {
      writer.int32(v);
    }
    writer.join();
    if (message.army !== "") {
      writer.uint32(34).string(message.army);
    }
    writer.uint32(42).fork();
    for (const v of message.star) {
      writer.int32(v);
    }
    writer.join();
    if (message.hideFashion !== false) {
      writer.uint32(48).bool(message.hideFashion);
    }
    writer.uint32(58).fork();
    for (const v of message.watch) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.powcardfight) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.tatooHoleInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.property !== "") {
      writer.uint32(82).string(message.property);
    }
    if (message.fashionProperty !== "") {
      writer.uint32(90).string(message.fashionProperty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.otherId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.item.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.item.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.army = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.star.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.star.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hideFashion = reader.bool();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.watch.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.watch.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.powcardfight.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.powcardfight.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.tatooHoleInfo.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.tatooHoleInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.property = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fashionProperty = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailRspMsg {
    return {
      otherId: isSet(object.otherId) ? globalThis.Number(object.otherId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      item: globalThis.Array.isArray(object?.item) ? object.item.map((e: any) => globalThis.Number(e)) : [],
      army: isSet(object.army) ? globalThis.String(object.army) : "",
      star: globalThis.Array.isArray(object?.star) ? object.star.map((e: any) => globalThis.Number(e)) : [],
      hideFashion: isSet(object.hideFashion) ? globalThis.Boolean(object.hideFashion) : false,
      watch: globalThis.Array.isArray(object?.watch) ? object.watch.map((e: any) => globalThis.Number(e)) : [],
      powcardfight: globalThis.Array.isArray(object?.powcardfight)
        ? object.powcardfight.map((e: any) => globalThis.Number(e))
        : [],
      tatooHoleInfo: globalThis.Array.isArray(object?.tatooHoleInfo)
        ? object.tatooHoleInfo.map((e: any) => globalThis.Number(e))
        : [],
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      fashionProperty: isSet(object.fashionProperty) ? globalThis.String(object.fashionProperty) : "",
    };
  },

  toJSON(message: DetailRspMsg): unknown {
    const obj: any = {};
    if (message.otherId !== 0) {
      obj.otherId = Math.round(message.otherId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.item?.length) {
      obj.item = message.item.map((e) => Math.round(e));
    }
    if (message.army !== "") {
      obj.army = message.army;
    }
    if (message.star?.length) {
      obj.star = message.star.map((e) => Math.round(e));
    }
    if (message.hideFashion !== false) {
      obj.hideFashion = message.hideFashion;
    }
    if (message.watch?.length) {
      obj.watch = message.watch.map((e) => Math.round(e));
    }
    if (message.powcardfight?.length) {
      obj.powcardfight = message.powcardfight.map((e) => Math.round(e));
    }
    if (message.tatooHoleInfo?.length) {
      obj.tatooHoleInfo = message.tatooHoleInfo.map((e) => Math.round(e));
    }
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.fashionProperty !== "") {
      obj.fashionProperty = message.fashionProperty;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailRspMsg>, I>>(base?: I): DetailRspMsg {
    return DetailRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailRspMsg>, I>>(object: I): DetailRspMsg {
    const message = createBaseDetailRspMsg();
    message.otherId = object.otherId ?? 0;
    message.serverName = object.serverName ?? "";
    message.item = object.item?.map((e) => e) || [];
    message.army = object.army ?? "";
    message.star = object.star?.map((e) => e) || [];
    message.hideFashion = object.hideFashion ?? false;
    message.watch = object.watch?.map((e) => e) || [];
    message.powcardfight = object.powcardfight?.map((e) => e) || [];
    message.tatooHoleInfo = object.tatooHoleInfo?.map((e) => e) || [];
    message.property = object.property ?? "";
    message.fashionProperty = object.fashionProperty ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
