// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: treasuremap/PlayerTreasureMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.treasuremap";

export interface PlayerTreasureMsg {
  userId: number;
  joinCount: number;
  rewardCount: number;
  index: number;
  templateIds: number[];
  opType: number;
  payType: number;
  refreshType: boolean;
  isReward: boolean;
  isFirstQuest: boolean;
  isFirstGet: boolean;
  isFirstUse: boolean;
}

function createBasePlayerTreasureMsg(): PlayerTreasureMsg {
  return {
    userId: 0,
    joinCount: 0,
    rewardCount: 0,
    index: 0,
    templateIds: [],
    opType: 0,
    payType: 0,
    refreshType: false,
    isReward: false,
    isFirstQuest: false,
    isFirstGet: false,
    isFirstUse: false,
  };
}

export const PlayerTreasureMsg: MessageFns<PlayerTreasureMsg> = {
  encode(message: PlayerTreasureMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.joinCount !== 0) {
      writer.uint32(16).int32(message.joinCount);
    }
    if (message.rewardCount !== 0) {
      writer.uint32(24).int32(message.rewardCount);
    }
    if (message.index !== 0) {
      writer.uint32(32).int32(message.index);
    }
    writer.uint32(42).fork();
    for (const v of message.templateIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.opType !== 0) {
      writer.uint32(48).int32(message.opType);
    }
    if (message.payType !== 0) {
      writer.uint32(56).int32(message.payType);
    }
    if (message.refreshType !== false) {
      writer.uint32(64).bool(message.refreshType);
    }
    if (message.isReward !== false) {
      writer.uint32(72).bool(message.isReward);
    }
    if (message.isFirstQuest !== false) {
      writer.uint32(80).bool(message.isFirstQuest);
    }
    if (message.isFirstGet !== false) {
      writer.uint32(88).bool(message.isFirstGet);
    }
    if (message.isFirstUse !== false) {
      writer.uint32(96).bool(message.isFirstUse);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerTreasureMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerTreasureMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.joinCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rewardCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.templateIds.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.templateIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.opType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.refreshType = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isReward = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isFirstQuest = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isFirstGet = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isFirstUse = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerTreasureMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      joinCount: isSet(object.joinCount) ? globalThis.Number(object.joinCount) : 0,
      rewardCount: isSet(object.rewardCount) ? globalThis.Number(object.rewardCount) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      templateIds: globalThis.Array.isArray(object?.templateIds)
        ? object.templateIds.map((e: any) => globalThis.Number(e))
        : [],
      opType: isSet(object.opType) ? globalThis.Number(object.opType) : 0,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
      refreshType: isSet(object.refreshType) ? globalThis.Boolean(object.refreshType) : false,
      isReward: isSet(object.isReward) ? globalThis.Boolean(object.isReward) : false,
      isFirstQuest: isSet(object.isFirstQuest) ? globalThis.Boolean(object.isFirstQuest) : false,
      isFirstGet: isSet(object.isFirstGet) ? globalThis.Boolean(object.isFirstGet) : false,
      isFirstUse: isSet(object.isFirstUse) ? globalThis.Boolean(object.isFirstUse) : false,
    };
  },

  toJSON(message: PlayerTreasureMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.joinCount !== 0) {
      obj.joinCount = Math.round(message.joinCount);
    }
    if (message.rewardCount !== 0) {
      obj.rewardCount = Math.round(message.rewardCount);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.templateIds?.length) {
      obj.templateIds = message.templateIds.map((e) => Math.round(e));
    }
    if (message.opType !== 0) {
      obj.opType = Math.round(message.opType);
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    if (message.refreshType !== false) {
      obj.refreshType = message.refreshType;
    }
    if (message.isReward !== false) {
      obj.isReward = message.isReward;
    }
    if (message.isFirstQuest !== false) {
      obj.isFirstQuest = message.isFirstQuest;
    }
    if (message.isFirstGet !== false) {
      obj.isFirstGet = message.isFirstGet;
    }
    if (message.isFirstUse !== false) {
      obj.isFirstUse = message.isFirstUse;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerTreasureMsg>, I>>(base?: I): PlayerTreasureMsg {
    return PlayerTreasureMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerTreasureMsg>, I>>(object: I): PlayerTreasureMsg {
    const message = createBasePlayerTreasureMsg();
    message.userId = object.userId ?? 0;
    message.joinCount = object.joinCount ?? 0;
    message.rewardCount = object.rewardCount ?? 0;
    message.index = object.index ?? 0;
    message.templateIds = object.templateIds?.map((e) => e) || [];
    message.opType = object.opType ?? 0;
    message.payType = object.payType ?? 0;
    message.refreshType = object.refreshType ?? false;
    message.isReward = object.isReward ?? false;
    message.isFirstQuest = object.isFirstQuest ?? false;
    message.isFirstGet = object.isFirstGet ?? false;
    message.isFirstUse = object.isFirstUse ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
