// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: battle/AttackModeMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.battle";

export interface AttackModeMsg {
  userId: number;
  battleId: string;
  serverName: string;
  armyId: number;
  mode: number;
  fmTurn: number;
  heroSp: number;
}

function createBaseAttackModeMsg(): AttackModeMsg {
  return { userId: 0, battleId: "", serverName: "", armyId: 0, mode: 0, fmTurn: 0, heroSp: 0 };
}

export const AttackModeMsg: MessageFns<AttackModeMsg> = {
  encode(message: AttackModeMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.battleId !== "") {
      writer.uint32(18).string(message.battleId);
    }
    if (message.serverName !== "") {
      writer.uint32(26).string(message.serverName);
    }
    if (message.armyId !== 0) {
      writer.uint32(32).int32(message.armyId);
    }
    if (message.mode !== 0) {
      writer.uint32(40).int32(message.mode);
    }
    if (message.fmTurn !== 0) {
      writer.uint32(48).int32(message.fmTurn);
    }
    if (message.heroSp !== 0) {
      writer.uint32(56).int32(message.heroSp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackModeMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackModeMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.battleId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.mode = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fmTurn = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.heroSp = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackModeMsg {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      fmTurn: isSet(object.fmTurn) ? globalThis.Number(object.fmTurn) : 0,
      heroSp: isSet(object.heroSp) ? globalThis.Number(object.heroSp) : 0,
    };
  },

  toJSON(message: AttackModeMsg): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.battleId !== "") {
      obj.battleId = message.battleId;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.fmTurn !== 0) {
      obj.fmTurn = Math.round(message.fmTurn);
    }
    if (message.heroSp !== 0) {
      obj.heroSp = Math.round(message.heroSp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttackModeMsg>, I>>(base?: I): AttackModeMsg {
    return AttackModeMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttackModeMsg>, I>>(object: I): AttackModeMsg {
    const message = createBaseAttackModeMsg();
    message.userId = object.userId ?? 0;
    message.battleId = object.battleId ?? "";
    message.serverName = object.serverName ?? "";
    message.armyId = object.armyId ?? 0;
    message.mode = object.mode ?? 0;
    message.fmTurn = object.fmTurn ?? 0;
    message.heroSp = object.heroSp ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
