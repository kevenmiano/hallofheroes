// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/RollDiceMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface RollDiceMsg {
  type: number;
  point: number;
  normalPoint: number;
  warFlag: number;
  resultPoint: number;
  position: number;
  nodeInfo: number[];
  buyMagicDiceCount: number;
  freeSlotmachineCount: number;
}

function createBaseRollDiceMsg(): RollDiceMsg {
  return {
    type: 0,
    point: 0,
    normalPoint: 0,
    warFlag: 0,
    resultPoint: 0,
    position: 0,
    nodeInfo: [],
    buyMagicDiceCount: 0,
    freeSlotmachineCount: 0,
  };
}

export const RollDiceMsg: MessageFns<RollDiceMsg> = {
  encode(message: RollDiceMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.point !== 0) {
      writer.uint32(16).int32(message.point);
    }
    if (message.normalPoint !== 0) {
      writer.uint32(24).int32(message.normalPoint);
    }
    if (message.warFlag !== 0) {
      writer.uint32(32).int32(message.warFlag);
    }
    if (message.resultPoint !== 0) {
      writer.uint32(40).int32(message.resultPoint);
    }
    if (message.position !== 0) {
      writer.uint32(48).int32(message.position);
    }
    writer.uint32(58).fork();
    for (const v of message.nodeInfo) {
      writer.int32(v);
    }
    writer.join();
    if (message.buyMagicDiceCount !== 0) {
      writer.uint32(64).int32(message.buyMagicDiceCount);
    }
    if (message.freeSlotmachineCount !== 0) {
      writer.uint32(72).int32(message.freeSlotmachineCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollDiceMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollDiceMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.normalPoint = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.warFlag = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.resultPoint = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.nodeInfo.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.nodeInfo.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.buyMagicDiceCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.freeSlotmachineCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollDiceMsg {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      normalPoint: isSet(object.normalPoint) ? globalThis.Number(object.normalPoint) : 0,
      warFlag: isSet(object.warFlag) ? globalThis.Number(object.warFlag) : 0,
      resultPoint: isSet(object.resultPoint) ? globalThis.Number(object.resultPoint) : 0,
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      nodeInfo: globalThis.Array.isArray(object?.nodeInfo) ? object.nodeInfo.map((e: any) => globalThis.Number(e)) : [],
      buyMagicDiceCount: isSet(object.buyMagicDiceCount) ? globalThis.Number(object.buyMagicDiceCount) : 0,
      freeSlotmachineCount: isSet(object.freeSlotmachineCount) ? globalThis.Number(object.freeSlotmachineCount) : 0,
    };
  },

  toJSON(message: RollDiceMsg): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.normalPoint !== 0) {
      obj.normalPoint = Math.round(message.normalPoint);
    }
    if (message.warFlag !== 0) {
      obj.warFlag = Math.round(message.warFlag);
    }
    if (message.resultPoint !== 0) {
      obj.resultPoint = Math.round(message.resultPoint);
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.nodeInfo?.length) {
      obj.nodeInfo = message.nodeInfo.map((e) => Math.round(e));
    }
    if (message.buyMagicDiceCount !== 0) {
      obj.buyMagicDiceCount = Math.round(message.buyMagicDiceCount);
    }
    if (message.freeSlotmachineCount !== 0) {
      obj.freeSlotmachineCount = Math.round(message.freeSlotmachineCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RollDiceMsg>, I>>(base?: I): RollDiceMsg {
    return RollDiceMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RollDiceMsg>, I>>(object: I): RollDiceMsg {
    const message = createBaseRollDiceMsg();
    message.type = object.type ?? 0;
    message.point = object.point ?? 0;
    message.normalPoint = object.normalPoint ?? 0;
    message.warFlag = object.warFlag ?? 0;
    message.resultPoint = object.resultPoint ?? 0;
    message.position = object.position ?? 0;
    message.nodeInfo = object.nodeInfo?.map((e) => e) || [];
    message.buyMagicDiceCount = object.buyMagicDiceCount ?? 0;
    message.freeSlotmachineCount = object.freeSlotmachineCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
