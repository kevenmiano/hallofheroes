// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/FamInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface FamInfoMsg {
  consortiaId: number;
  treeGrades: number;
  treeGp: number;
  treeWaterCount: number;
  treeState: number;
  personNum: number;
  rate: number;
  opreate: number;
  userId: number[];
  pickTime: string;
  isReturnedPlayer: boolean;
}

function createBaseFamInfoMsg(): FamInfoMsg {
  return {
    consortiaId: 0,
    treeGrades: 0,
    treeGp: 0,
    treeWaterCount: 0,
    treeState: 0,
    personNum: 0,
    rate: 0,
    opreate: 0,
    userId: [],
    pickTime: "",
    isReturnedPlayer: false,
  };
}

export const FamInfoMsg: MessageFns<FamInfoMsg> = {
  encode(message: FamInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.treeGrades !== 0) {
      writer.uint32(16).int32(message.treeGrades);
    }
    if (message.treeGp !== 0) {
      writer.uint32(24).int32(message.treeGp);
    }
    if (message.treeWaterCount !== 0) {
      writer.uint32(32).int32(message.treeWaterCount);
    }
    if (message.treeState !== 0) {
      writer.uint32(40).int32(message.treeState);
    }
    if (message.personNum !== 0) {
      writer.uint32(48).int32(message.personNum);
    }
    if (message.rate !== 0) {
      writer.uint32(56).int32(message.rate);
    }
    if (message.opreate !== 0) {
      writer.uint32(64).int32(message.opreate);
    }
    writer.uint32(74).fork();
    for (const v of message.userId) {
      writer.int32(v);
    }
    writer.join();
    if (message.pickTime !== "") {
      writer.uint32(82).string(message.pickTime);
    }
    if (message.isReturnedPlayer !== false) {
      writer.uint32(88).bool(message.isReturnedPlayer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.treeGrades = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.treeGp = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.treeWaterCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.treeState = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.personNum = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.rate = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.opreate = reader.int32();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.userId.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userId.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.pickTime = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isReturnedPlayer = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamInfoMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      treeGrades: isSet(object.treeGrades) ? globalThis.Number(object.treeGrades) : 0,
      treeGp: isSet(object.treeGp) ? globalThis.Number(object.treeGp) : 0,
      treeWaterCount: isSet(object.treeWaterCount) ? globalThis.Number(object.treeWaterCount) : 0,
      treeState: isSet(object.treeState) ? globalThis.Number(object.treeState) : 0,
      personNum: isSet(object.personNum) ? globalThis.Number(object.personNum) : 0,
      rate: isSet(object.rate) ? globalThis.Number(object.rate) : 0,
      opreate: isSet(object.opreate) ? globalThis.Number(object.opreate) : 0,
      userId: globalThis.Array.isArray(object?.userId) ? object.userId.map((e: any) => globalThis.Number(e)) : [],
      pickTime: isSet(object.pickTime) ? globalThis.String(object.pickTime) : "",
      isReturnedPlayer: isSet(object.isReturnedPlayer) ? globalThis.Boolean(object.isReturnedPlayer) : false,
    };
  },

  toJSON(message: FamInfoMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.treeGrades !== 0) {
      obj.treeGrades = Math.round(message.treeGrades);
    }
    if (message.treeGp !== 0) {
      obj.treeGp = Math.round(message.treeGp);
    }
    if (message.treeWaterCount !== 0) {
      obj.treeWaterCount = Math.round(message.treeWaterCount);
    }
    if (message.treeState !== 0) {
      obj.treeState = Math.round(message.treeState);
    }
    if (message.personNum !== 0) {
      obj.personNum = Math.round(message.personNum);
    }
    if (message.rate !== 0) {
      obj.rate = Math.round(message.rate);
    }
    if (message.opreate !== 0) {
      obj.opreate = Math.round(message.opreate);
    }
    if (message.userId?.length) {
      obj.userId = message.userId.map((e) => Math.round(e));
    }
    if (message.pickTime !== "") {
      obj.pickTime = message.pickTime;
    }
    if (message.isReturnedPlayer !== false) {
      obj.isReturnedPlayer = message.isReturnedPlayer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamInfoMsg>, I>>(base?: I): FamInfoMsg {
    return FamInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamInfoMsg>, I>>(object: I): FamInfoMsg {
    const message = createBaseFamInfoMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.treeGrades = object.treeGrades ?? 0;
    message.treeGp = object.treeGp ?? 0;
    message.treeWaterCount = object.treeWaterCount ?? 0;
    message.treeState = object.treeState ?? 0;
    message.personNum = object.personNum ?? 0;
    message.rate = object.rate ?? 0;
    message.opreate = object.opreate ?? 0;
    message.userId = object.userId?.map((e) => e) || [];
    message.pickTime = object.pickTime ?? "";
    message.isReturnedPlayer = object.isReturnedPlayer ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
