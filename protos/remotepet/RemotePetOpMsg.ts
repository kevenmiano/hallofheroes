// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: remotepet/RemotePetOpMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.remotepet";

export interface RemotePetOpMsg {
  op: number;
  pets: number[];
  pos: string;
  friendId: number;
  friendPetId: number;
  skillId: number;
  index: number;
  isSpecial: boolean;
  sweepIndex: number;
  isFirst: boolean;
  payType: number;
}

function createBaseRemotePetOpMsg(): RemotePetOpMsg {
  return {
    op: 0,
    pets: [],
    pos: "",
    friendId: 0,
    friendPetId: 0,
    skillId: 0,
    index: 0,
    isSpecial: false,
    sweepIndex: 0,
    isFirst: false,
    payType: 0,
  };
}

export const RemotePetOpMsg: MessageFns<RemotePetOpMsg> = {
  encode(message: RemotePetOpMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    writer.uint32(18).fork();
    for (const v of message.pets) {
      writer.int32(v);
    }
    writer.join();
    if (message.pos !== "") {
      writer.uint32(26).string(message.pos);
    }
    if (message.friendId !== 0) {
      writer.uint32(32).int32(message.friendId);
    }
    if (message.friendPetId !== 0) {
      writer.uint32(40).int32(message.friendPetId);
    }
    if (message.skillId !== 0) {
      writer.uint32(48).int32(message.skillId);
    }
    if (message.index !== 0) {
      writer.uint32(56).int32(message.index);
    }
    if (message.isSpecial !== false) {
      writer.uint32(64).bool(message.isSpecial);
    }
    if (message.sweepIndex !== 0) {
      writer.uint32(72).int32(message.sweepIndex);
    }
    if (message.isFirst !== false) {
      writer.uint32(80).bool(message.isFirst);
    }
    if (message.payType !== 0) {
      writer.uint32(88).int32(message.payType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemotePetOpMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemotePetOpMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.pets.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pets.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pos = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.friendId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.friendPetId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.skillId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isSpecial = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sweepIndex = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isFirst = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.payType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemotePetOpMsg {
    return {
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
      pets: globalThis.Array.isArray(object?.pets) ? object.pets.map((e: any) => globalThis.Number(e)) : [],
      pos: isSet(object.pos) ? globalThis.String(object.pos) : "",
      friendId: isSet(object.friendId) ? globalThis.Number(object.friendId) : 0,
      friendPetId: isSet(object.friendPetId) ? globalThis.Number(object.friendPetId) : 0,
      skillId: isSet(object.skillId) ? globalThis.Number(object.skillId) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      isSpecial: isSet(object.isSpecial) ? globalThis.Boolean(object.isSpecial) : false,
      sweepIndex: isSet(object.sweepIndex) ? globalThis.Number(object.sweepIndex) : 0,
      isFirst: isSet(object.isFirst) ? globalThis.Boolean(object.isFirst) : false,
      payType: isSet(object.payType) ? globalThis.Number(object.payType) : 0,
    };
  },

  toJSON(message: RemotePetOpMsg): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    if (message.pets?.length) {
      obj.pets = message.pets.map((e) => Math.round(e));
    }
    if (message.pos !== "") {
      obj.pos = message.pos;
    }
    if (message.friendId !== 0) {
      obj.friendId = Math.round(message.friendId);
    }
    if (message.friendPetId !== 0) {
      obj.friendPetId = Math.round(message.friendPetId);
    }
    if (message.skillId !== 0) {
      obj.skillId = Math.round(message.skillId);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.isSpecial !== false) {
      obj.isSpecial = message.isSpecial;
    }
    if (message.sweepIndex !== 0) {
      obj.sweepIndex = Math.round(message.sweepIndex);
    }
    if (message.isFirst !== false) {
      obj.isFirst = message.isFirst;
    }
    if (message.payType !== 0) {
      obj.payType = Math.round(message.payType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemotePetOpMsg>, I>>(base?: I): RemotePetOpMsg {
    return RemotePetOpMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemotePetOpMsg>, I>>(object: I): RemotePetOpMsg {
    const message = createBaseRemotePetOpMsg();
    message.op = object.op ?? 0;
    message.pets = object.pets?.map((e) => e) || [];
    message.pos = object.pos ?? "";
    message.friendId = object.friendId ?? 0;
    message.friendPetId = object.friendPetId ?? 0;
    message.skillId = object.skillId ?? 0;
    message.index = object.index ?? 0;
    message.isSpecial = object.isSpecial ?? false;
    message.sweepIndex = object.sweepIndex ?? 0;
    message.isFirst = object.isFirst ?? false;
    message.payType = object.payType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
