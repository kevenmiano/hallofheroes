// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: consortia/ConsortiaLinkRspMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.consortia";

export interface ConsortiaLinkRspMsg {
  consortiaId: number;
  consortiaName: string;
  creatorName: string;
  levels: number;
  Offer: number;
  currentCount: number;
  honor: number;
  description: string;
  materials: number;
}

function createBaseConsortiaLinkRspMsg(): ConsortiaLinkRspMsg {
  return {
    consortiaId: 0,
    consortiaName: "",
    creatorName: "",
    levels: 0,
    Offer: 0,
    currentCount: 0,
    honor: 0,
    description: "",
    materials: 0,
  };
}

export const ConsortiaLinkRspMsg: MessageFns<ConsortiaLinkRspMsg> = {
  encode(message: ConsortiaLinkRspMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consortiaId !== 0) {
      writer.uint32(8).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(18).string(message.consortiaName);
    }
    if (message.creatorName !== "") {
      writer.uint32(26).string(message.creatorName);
    }
    if (message.levels !== 0) {
      writer.uint32(32).int32(message.levels);
    }
    if (message.Offer !== 0) {
      writer.uint32(40).int32(message.Offer);
    }
    if (message.currentCount !== 0) {
      writer.uint32(48).int32(message.currentCount);
    }
    if (message.honor !== 0) {
      writer.uint32(56).int32(message.honor);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.materials !== 0) {
      writer.uint32(72).int32(message.materials);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsortiaLinkRspMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsortiaLinkRspMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.levels = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Offer = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.honor = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.materials = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsortiaLinkRspMsg {
    return {
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      creatorName: isSet(object.creatorName) ? globalThis.String(object.creatorName) : "",
      levels: isSet(object.levels) ? globalThis.Number(object.levels) : 0,
      Offer: isSet(object.Offer) ? globalThis.Number(object.Offer) : 0,
      currentCount: isSet(object.currentCount) ? globalThis.Number(object.currentCount) : 0,
      honor: isSet(object.honor) ? globalThis.Number(object.honor) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      materials: isSet(object.materials) ? globalThis.Number(object.materials) : 0,
    };
  },

  toJSON(message: ConsortiaLinkRspMsg): unknown {
    const obj: any = {};
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.creatorName !== "") {
      obj.creatorName = message.creatorName;
    }
    if (message.levels !== 0) {
      obj.levels = Math.round(message.levels);
    }
    if (message.Offer !== 0) {
      obj.Offer = Math.round(message.Offer);
    }
    if (message.currentCount !== 0) {
      obj.currentCount = Math.round(message.currentCount);
    }
    if (message.honor !== 0) {
      obj.honor = Math.round(message.honor);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.materials !== 0) {
      obj.materials = Math.round(message.materials);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsortiaLinkRspMsg>, I>>(base?: I): ConsortiaLinkRspMsg {
    return ConsortiaLinkRspMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsortiaLinkRspMsg>, I>>(object: I): ConsortiaLinkRspMsg {
    const message = createBaseConsortiaLinkRspMsg();
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.creatorName = object.creatorName ?? "";
    message.levels = object.levels ?? 0;
    message.Offer = object.Offer ?? 0;
    message.currentCount = object.currentCount ?? 0;
    message.honor = object.honor ?? 0;
    message.description = object.description ?? "";
    message.materials = object.materials ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
