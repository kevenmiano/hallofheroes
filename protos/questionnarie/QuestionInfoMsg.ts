// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: questionnarie/QuestionInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.questionnarie";

export interface QuestionInfoMsg {
  id: number;
  title: string;
  type: number;
  contenType: number;
  a: string;
  b: string;
  c: string;
  d: string;
  e: string;
  f: string;
  g: string;
  h: string;
  i: string;
  j: string;
}

function createBaseQuestionInfoMsg(): QuestionInfoMsg {
  return {
    id: 0,
    title: "",
    type: 0,
    contenType: 0,
    a: "",
    b: "",
    c: "",
    d: "",
    e: "",
    f: "",
    g: "",
    h: "",
    i: "",
    j: "",
  };
}

export const QuestionInfoMsg: MessageFns<QuestionInfoMsg> = {
  encode(message: QuestionInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.contenType !== 0) {
      writer.uint32(32).int32(message.contenType);
    }
    if (message.a !== "") {
      writer.uint32(42).string(message.a);
    }
    if (message.b !== "") {
      writer.uint32(50).string(message.b);
    }
    if (message.c !== "") {
      writer.uint32(58).string(message.c);
    }
    if (message.d !== "") {
      writer.uint32(66).string(message.d);
    }
    if (message.e !== "") {
      writer.uint32(74).string(message.e);
    }
    if (message.f !== "") {
      writer.uint32(82).string(message.f);
    }
    if (message.g !== "") {
      writer.uint32(90).string(message.g);
    }
    if (message.h !== "") {
      writer.uint32(98).string(message.h);
    }
    if (message.i !== "") {
      writer.uint32(106).string(message.i);
    }
    if (message.j !== "") {
      writer.uint32(114).string(message.j);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuestionInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuestionInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.contenType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.a = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.b = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.c = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.d = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.e = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.f = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.g = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.h = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.i = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.j = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuestionInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      contenType: isSet(object.contenType) ? globalThis.Number(object.contenType) : 0,
      a: isSet(object.a) ? globalThis.String(object.a) : "",
      b: isSet(object.b) ? globalThis.String(object.b) : "",
      c: isSet(object.c) ? globalThis.String(object.c) : "",
      d: isSet(object.d) ? globalThis.String(object.d) : "",
      e: isSet(object.e) ? globalThis.String(object.e) : "",
      f: isSet(object.f) ? globalThis.String(object.f) : "",
      g: isSet(object.g) ? globalThis.String(object.g) : "",
      h: isSet(object.h) ? globalThis.String(object.h) : "",
      i: isSet(object.i) ? globalThis.String(object.i) : "",
      j: isSet(object.j) ? globalThis.String(object.j) : "",
    };
  },

  toJSON(message: QuestionInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.contenType !== 0) {
      obj.contenType = Math.round(message.contenType);
    }
    if (message.a !== "") {
      obj.a = message.a;
    }
    if (message.b !== "") {
      obj.b = message.b;
    }
    if (message.c !== "") {
      obj.c = message.c;
    }
    if (message.d !== "") {
      obj.d = message.d;
    }
    if (message.e !== "") {
      obj.e = message.e;
    }
    if (message.f !== "") {
      obj.f = message.f;
    }
    if (message.g !== "") {
      obj.g = message.g;
    }
    if (message.h !== "") {
      obj.h = message.h;
    }
    if (message.i !== "") {
      obj.i = message.i;
    }
    if (message.j !== "") {
      obj.j = message.j;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuestionInfoMsg>, I>>(base?: I): QuestionInfoMsg {
    return QuestionInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuestionInfoMsg>, I>>(object: I): QuestionInfoMsg {
    const message = createBaseQuestionInfoMsg();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.type = object.type ?? 0;
    message.contenType = object.contenType ?? 0;
    message.a = object.a ?? "";
    message.b = object.b ?? "";
    message.c = object.c ?? "";
    message.d = object.d ?? "";
    message.e = object.e ?? "";
    message.f = object.f ?? "";
    message.g = object.g ?? "";
    message.h = object.h ?? "";
    message.i = object.i ?? "";
    message.j = object.j ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
