// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/RuneHoleInfoMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface RuneHoleInfoMsg {
  id: number;
  holeId: number;
  exp: number;
  grade: number;
  skill: number;
  pos: string;
  tempSkillId: number;
}

function createBaseRuneHoleInfoMsg(): RuneHoleInfoMsg {
  return { id: 0, holeId: 0, exp: 0, grade: 0, skill: 0, pos: "", tempSkillId: 0 };
}

export const RuneHoleInfoMsg: MessageFns<RuneHoleInfoMsg> = {
  encode(message: RuneHoleInfoMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.holeId !== 0) {
      writer.uint32(16).int32(message.holeId);
    }
    if (message.exp !== 0) {
      writer.uint32(24).int32(message.exp);
    }
    if (message.grade !== 0) {
      writer.uint32(32).int32(message.grade);
    }
    if (message.skill !== 0) {
      writer.uint32(40).int32(message.skill);
    }
    if (message.pos !== "") {
      writer.uint32(50).string(message.pos);
    }
    if (message.tempSkillId !== 0) {
      writer.uint32(56).int32(message.tempSkillId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuneHoleInfoMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuneHoleInfoMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.holeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.exp = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.grade = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.skill = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pos = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.tempSkillId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuneHoleInfoMsg {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      holeId: isSet(object.holeId) ? globalThis.Number(object.holeId) : 0,
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      skill: isSet(object.skill) ? globalThis.Number(object.skill) : 0,
      pos: isSet(object.pos) ? globalThis.String(object.pos) : "",
      tempSkillId: isSet(object.tempSkillId) ? globalThis.Number(object.tempSkillId) : 0,
    };
  },

  toJSON(message: RuneHoleInfoMsg): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.holeId !== 0) {
      obj.holeId = Math.round(message.holeId);
    }
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.grade !== 0) {
      obj.grade = Math.round(message.grade);
    }
    if (message.skill !== 0) {
      obj.skill = Math.round(message.skill);
    }
    if (message.pos !== "") {
      obj.pos = message.pos;
    }
    if (message.tempSkillId !== 0) {
      obj.tempSkillId = Math.round(message.tempSkillId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuneHoleInfoMsg>, I>>(base?: I): RuneHoleInfoMsg {
    return RuneHoleInfoMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuneHoleInfoMsg>, I>>(object: I): RuneHoleInfoMsg {
    const message = createBaseRuneHoleInfoMsg();
    message.id = object.id ?? 0;
    message.holeId = object.holeId ?? 0;
    message.exp = object.exp ?? 0;
    message.grade = object.grade ?? 0;
    message.skill = object.skill ?? 0;
    message.pos = object.pos ?? "";
    message.tempSkillId = object.tempSkillId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
