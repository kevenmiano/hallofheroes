// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: campaign/SpacePlayerMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.campaign";

export interface SpacePlayerMsg {
  playerId: number;
  state: number;
  path: number[];
  receivers: number[];
}

function createBaseSpacePlayerMsg(): SpacePlayerMsg {
  return { playerId: 0, state: 0, path: [], receivers: [] };
}

export const SpacePlayerMsg: MessageFns<SpacePlayerMsg> = {
  encode(message: SpacePlayerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int32(message.playerId);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    writer.uint32(26).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.receivers) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpacePlayerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpacePlayerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.path.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.receivers.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.receivers.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpacePlayerMsg {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      path: globalThis.Array.isArray(object?.path) ? object.path.map((e: any) => globalThis.Number(e)) : [],
      receivers: globalThis.Array.isArray(object?.receivers)
        ? object.receivers.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: SpacePlayerMsg): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.path?.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.receivers?.length) {
      obj.receivers = message.receivers.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpacePlayerMsg>, I>>(base?: I): SpacePlayerMsg {
    return SpacePlayerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpacePlayerMsg>, I>>(object: I): SpacePlayerMsg {
    const message = createBaseSpacePlayerMsg();
    message.playerId = object.playerId ?? 0;
    message.state = object.state ?? 0;
    message.path = object.path?.map((e) => e) || [];
    message.receivers = object.receivers?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
