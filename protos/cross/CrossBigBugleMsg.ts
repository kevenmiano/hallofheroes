// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: cross/CrossBigBugleMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.cross";

export interface CrossBigBugleMsg {
  serverId: number;
  serverName: string;
  uid: string;
  userId: number;
  nickName: string;
  isLookInfo: boolean;
  content: string;
  param1: number;
  param2: string;
  headId: number;
  level: number;
  curTime: string;
}

function createBaseCrossBigBugleMsg(): CrossBigBugleMsg {
  return {
    serverId: 0,
    serverName: "",
    uid: "",
    userId: 0,
    nickName: "",
    isLookInfo: false,
    content: "",
    param1: 0,
    param2: "",
    headId: 0,
    level: 0,
    curTime: "",
  };
}

export const CrossBigBugleMsg: MessageFns<CrossBigBugleMsg> = {
  encode(message: CrossBigBugleMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverId !== 0) {
      writer.uint32(8).int32(message.serverId);
    }
    if (message.serverName !== "") {
      writer.uint32(18).string(message.serverName);
    }
    if (message.uid !== "") {
      writer.uint32(26).string(message.uid);
    }
    if (message.userId !== 0) {
      writer.uint32(32).int32(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(42).string(message.nickName);
    }
    if (message.isLookInfo !== false) {
      writer.uint32(48).bool(message.isLookInfo);
    }
    if (message.content !== "") {
      writer.uint32(58).string(message.content);
    }
    if (message.param1 !== 0) {
      writer.uint32(64).int32(message.param1);
    }
    if (message.param2 !== "") {
      writer.uint32(74).string(message.param2);
    }
    if (message.headId !== 0) {
      writer.uint32(80).int32(message.headId);
    }
    if (message.level !== 0) {
      writer.uint32(88).int32(message.level);
    }
    if (message.curTime !== "") {
      writer.uint32(98).string(message.curTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrossBigBugleMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrossBigBugleMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serverId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isLookInfo = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.param1 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.param2 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.curTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrossBigBugleMsg {
    return {
      serverId: isSet(object.serverId) ? globalThis.Number(object.serverId) : 0,
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      isLookInfo: isSet(object.isLookInfo) ? globalThis.Boolean(object.isLookInfo) : false,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      param1: isSet(object.param1) ? globalThis.Number(object.param1) : 0,
      param2: isSet(object.param2) ? globalThis.String(object.param2) : "",
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      curTime: isSet(object.curTime) ? globalThis.String(object.curTime) : "",
    };
  },

  toJSON(message: CrossBigBugleMsg): unknown {
    const obj: any = {};
    if (message.serverId !== 0) {
      obj.serverId = Math.round(message.serverId);
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.isLookInfo !== false) {
      obj.isLookInfo = message.isLookInfo;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.param1 !== 0) {
      obj.param1 = Math.round(message.param1);
    }
    if (message.param2 !== "") {
      obj.param2 = message.param2;
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.curTime !== "") {
      obj.curTime = message.curTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrossBigBugleMsg>, I>>(base?: I): CrossBigBugleMsg {
    return CrossBigBugleMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrossBigBugleMsg>, I>>(object: I): CrossBigBugleMsg {
    const message = createBaseCrossBigBugleMsg();
    message.serverId = object.serverId ?? 0;
    message.serverName = object.serverName ?? "";
    message.uid = object.uid ?? "";
    message.userId = object.userId ?? 0;
    message.nickName = object.nickName ?? "";
    message.isLookInfo = object.isLookInfo ?? false;
    message.content = object.content ?? "";
    message.param1 = object.param1 ?? 0;
    message.param2 = object.param2 ?? "";
    message.headId = object.headId ?? 0;
    message.level = object.level ?? 0;
    message.curTime = object.curTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
