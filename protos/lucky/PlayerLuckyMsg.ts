// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: lucky/PlayerLuckyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.lucky";

export interface PlayerLuckyMsg {
  luckyCount: number;
  remainCount: number;
  lastReceive: string;
  point: number;
  gold: number;
}

function createBasePlayerLuckyMsg(): PlayerLuckyMsg {
  return { luckyCount: 0, remainCount: 0, lastReceive: "", point: 0, gold: 0 };
}

export const PlayerLuckyMsg: MessageFns<PlayerLuckyMsg> = {
  encode(message: PlayerLuckyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.luckyCount !== 0) {
      writer.uint32(8).int32(message.luckyCount);
    }
    if (message.remainCount !== 0) {
      writer.uint32(16).int32(message.remainCount);
    }
    if (message.lastReceive !== "") {
      writer.uint32(26).string(message.lastReceive);
    }
    if (message.point !== 0) {
      writer.uint32(32).int32(message.point);
    }
    if (message.gold !== 0) {
      writer.uint32(40).int32(message.gold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerLuckyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerLuckyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.luckyCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.remainCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastReceive = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.point = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.gold = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerLuckyMsg {
    return {
      luckyCount: isSet(object.luckyCount) ? globalThis.Number(object.luckyCount) : 0,
      remainCount: isSet(object.remainCount) ? globalThis.Number(object.remainCount) : 0,
      lastReceive: isSet(object.lastReceive) ? globalThis.String(object.lastReceive) : "",
      point: isSet(object.point) ? globalThis.Number(object.point) : 0,
      gold: isSet(object.gold) ? globalThis.Number(object.gold) : 0,
    };
  },

  toJSON(message: PlayerLuckyMsg): unknown {
    const obj: any = {};
    if (message.luckyCount !== 0) {
      obj.luckyCount = Math.round(message.luckyCount);
    }
    if (message.remainCount !== 0) {
      obj.remainCount = Math.round(message.remainCount);
    }
    if (message.lastReceive !== "") {
      obj.lastReceive = message.lastReceive;
    }
    if (message.point !== 0) {
      obj.point = Math.round(message.point);
    }
    if (message.gold !== 0) {
      obj.gold = Math.round(message.gold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerLuckyMsg>, I>>(base?: I): PlayerLuckyMsg {
    return PlayerLuckyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerLuckyMsg>, I>>(object: I): PlayerLuckyMsg {
    const message = createBasePlayerLuckyMsg();
    message.luckyCount = object.luckyCount ?? 0;
    message.remainCount = object.remainCount ?? 0;
    message.lastReceive = object.lastReceive ?? "";
    message.point = object.point ?? 0;
    message.gold = object.gold ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
