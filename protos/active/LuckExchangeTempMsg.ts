// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/LuckExchangeTempMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface LuckExchangeTempMsg {
  id: string;
  name: string;
  consumeItemId: number;
  consumeItemCount: number;
  luckValue: number;
  startTime: string;
  endTime: string;
  dropItems: number[];
}

function createBaseLuckExchangeTempMsg(): LuckExchangeTempMsg {
  return {
    id: "",
    name: "",
    consumeItemId: 0,
    consumeItemCount: 0,
    luckValue: 0,
    startTime: "",
    endTime: "",
    dropItems: [],
  };
}

export const LuckExchangeTempMsg: MessageFns<LuckExchangeTempMsg> = {
  encode(message: LuckExchangeTempMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.consumeItemId !== 0) {
      writer.uint32(24).int32(message.consumeItemId);
    }
    if (message.consumeItemCount !== 0) {
      writer.uint32(32).int32(message.consumeItemCount);
    }
    if (message.luckValue !== 0) {
      writer.uint32(40).int32(message.luckValue);
    }
    if (message.startTime !== "") {
      writer.uint32(50).string(message.startTime);
    }
    if (message.endTime !== "") {
      writer.uint32(58).string(message.endTime);
    }
    writer.uint32(66).fork();
    for (const v of message.dropItems) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LuckExchangeTempMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLuckExchangeTempMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.consumeItemId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.consumeItemCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.luckValue = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startTime = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.endTime = reader.string();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.dropItems.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dropItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LuckExchangeTempMsg {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      consumeItemId: isSet(object.consumeItemId) ? globalThis.Number(object.consumeItemId) : 0,
      consumeItemCount: isSet(object.consumeItemCount) ? globalThis.Number(object.consumeItemCount) : 0,
      luckValue: isSet(object.luckValue) ? globalThis.Number(object.luckValue) : 0,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "",
      dropItems: globalThis.Array.isArray(object?.dropItems)
        ? object.dropItems.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: LuckExchangeTempMsg): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.consumeItemId !== 0) {
      obj.consumeItemId = Math.round(message.consumeItemId);
    }
    if (message.consumeItemCount !== 0) {
      obj.consumeItemCount = Math.round(message.consumeItemCount);
    }
    if (message.luckValue !== 0) {
      obj.luckValue = Math.round(message.luckValue);
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "") {
      obj.endTime = message.endTime;
    }
    if (message.dropItems?.length) {
      obj.dropItems = message.dropItems.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LuckExchangeTempMsg>, I>>(base?: I): LuckExchangeTempMsg {
    return LuckExchangeTempMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LuckExchangeTempMsg>, I>>(object: I): LuckExchangeTempMsg {
    const message = createBaseLuckExchangeTempMsg();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.consumeItemId = object.consumeItemId ?? 0;
    message.consumeItemCount = object.consumeItemCount ?? 0;
    message.luckValue = object.luckValue ?? 0;
    message.startTime = object.startTime ?? "";
    message.endTime = object.endTime ?? "";
    message.dropItems = object.dropItems?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
