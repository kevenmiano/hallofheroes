// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: stackhead/StackHeadReportMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.stackhead";

export interface StackHeadReportMsg {
  sourceGuildName: string;
  sourceUserNickName: string;
  rivalGuildName: string;
  rivalUserNickName: string;
  rivalIsNpc: boolean;
  isWin: boolean;
  defenceDebuffLevel: number;
  changeScore: number;
  reportTime: string;
  timestamp: string;
}

function createBaseStackHeadReportMsg(): StackHeadReportMsg {
  return {
    sourceGuildName: "",
    sourceUserNickName: "",
    rivalGuildName: "",
    rivalUserNickName: "",
    rivalIsNpc: false,
    isWin: false,
    defenceDebuffLevel: 0,
    changeScore: 0,
    reportTime: "",
    timestamp: "",
  };
}

export const StackHeadReportMsg: MessageFns<StackHeadReportMsg> = {
  encode(message: StackHeadReportMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceGuildName !== "") {
      writer.uint32(10).string(message.sourceGuildName);
    }
    if (message.sourceUserNickName !== "") {
      writer.uint32(18).string(message.sourceUserNickName);
    }
    if (message.rivalGuildName !== "") {
      writer.uint32(26).string(message.rivalGuildName);
    }
    if (message.rivalUserNickName !== "") {
      writer.uint32(34).string(message.rivalUserNickName);
    }
    if (message.rivalIsNpc !== false) {
      writer.uint32(40).bool(message.rivalIsNpc);
    }
    if (message.isWin !== false) {
      writer.uint32(48).bool(message.isWin);
    }
    if (message.defenceDebuffLevel !== 0) {
      writer.uint32(56).int32(message.defenceDebuffLevel);
    }
    if (message.changeScore !== 0) {
      writer.uint32(64).int32(message.changeScore);
    }
    if (message.reportTime !== "") {
      writer.uint32(74).string(message.reportTime);
    }
    if (message.timestamp !== "") {
      writer.uint32(82).string(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StackHeadReportMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStackHeadReportMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceGuildName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceUserNickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rivalGuildName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rivalUserNickName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rivalIsNpc = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isWin = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.defenceDebuffLevel = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.changeScore = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.reportTime = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StackHeadReportMsg {
    return {
      sourceGuildName: isSet(object.sourceGuildName) ? globalThis.String(object.sourceGuildName) : "",
      sourceUserNickName: isSet(object.sourceUserNickName) ? globalThis.String(object.sourceUserNickName) : "",
      rivalGuildName: isSet(object.rivalGuildName) ? globalThis.String(object.rivalGuildName) : "",
      rivalUserNickName: isSet(object.rivalUserNickName) ? globalThis.String(object.rivalUserNickName) : "",
      rivalIsNpc: isSet(object.rivalIsNpc) ? globalThis.Boolean(object.rivalIsNpc) : false,
      isWin: isSet(object.isWin) ? globalThis.Boolean(object.isWin) : false,
      defenceDebuffLevel: isSet(object.defenceDebuffLevel) ? globalThis.Number(object.defenceDebuffLevel) : 0,
      changeScore: isSet(object.changeScore) ? globalThis.Number(object.changeScore) : 0,
      reportTime: isSet(object.reportTime) ? globalThis.String(object.reportTime) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
    };
  },

  toJSON(message: StackHeadReportMsg): unknown {
    const obj: any = {};
    if (message.sourceGuildName !== "") {
      obj.sourceGuildName = message.sourceGuildName;
    }
    if (message.sourceUserNickName !== "") {
      obj.sourceUserNickName = message.sourceUserNickName;
    }
    if (message.rivalGuildName !== "") {
      obj.rivalGuildName = message.rivalGuildName;
    }
    if (message.rivalUserNickName !== "") {
      obj.rivalUserNickName = message.rivalUserNickName;
    }
    if (message.rivalIsNpc !== false) {
      obj.rivalIsNpc = message.rivalIsNpc;
    }
    if (message.isWin !== false) {
      obj.isWin = message.isWin;
    }
    if (message.defenceDebuffLevel !== 0) {
      obj.defenceDebuffLevel = Math.round(message.defenceDebuffLevel);
    }
    if (message.changeScore !== 0) {
      obj.changeScore = Math.round(message.changeScore);
    }
    if (message.reportTime !== "") {
      obj.reportTime = message.reportTime;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StackHeadReportMsg>, I>>(base?: I): StackHeadReportMsg {
    return StackHeadReportMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StackHeadReportMsg>, I>>(object: I): StackHeadReportMsg {
    const message = createBaseStackHeadReportMsg();
    message.sourceGuildName = object.sourceGuildName ?? "";
    message.sourceUserNickName = object.sourceUserNickName ?? "";
    message.rivalGuildName = object.rivalGuildName ?? "";
    message.rivalUserNickName = object.rivalUserNickName ?? "";
    message.rivalIsNpc = object.rivalIsNpc ?? false;
    message.isWin = object.isWin ?? false;
    message.defenceDebuffLevel = object.defenceDebuffLevel ?? 0;
    message.changeScore = object.changeScore ?? 0;
    message.reportTime = object.reportTime ?? "";
    message.timestamp = object.timestamp ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
