// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: active/MonthCardInfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.active";

export interface MonthCardInfo {
  cardType: number;
  isPay: boolean;
  isReceive: boolean;
  leftDays: number;
}

function createBaseMonthCardInfo(): MonthCardInfo {
  return { cardType: 0, isPay: false, isReceive: false, leftDays: 0 };
}

export const MonthCardInfo: MessageFns<MonthCardInfo> = {
  encode(message: MonthCardInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cardType !== 0) {
      writer.uint32(8).int32(message.cardType);
    }
    if (message.isPay !== false) {
      writer.uint32(16).bool(message.isPay);
    }
    if (message.isReceive !== false) {
      writer.uint32(24).bool(message.isReceive);
    }
    if (message.leftDays !== 0) {
      writer.uint32(32).int32(message.leftDays);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthCardInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthCardInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cardType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isPay = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isReceive = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leftDays = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MonthCardInfo {
    return {
      cardType: isSet(object.cardType) ? globalThis.Number(object.cardType) : 0,
      isPay: isSet(object.isPay) ? globalThis.Boolean(object.isPay) : false,
      isReceive: isSet(object.isReceive) ? globalThis.Boolean(object.isReceive) : false,
      leftDays: isSet(object.leftDays) ? globalThis.Number(object.leftDays) : 0,
    };
  },

  toJSON(message: MonthCardInfo): unknown {
    const obj: any = {};
    if (message.cardType !== 0) {
      obj.cardType = Math.round(message.cardType);
    }
    if (message.isPay !== false) {
      obj.isPay = message.isPay;
    }
    if (message.isReceive !== false) {
      obj.isReceive = message.isReceive;
    }
    if (message.leftDays !== 0) {
      obj.leftDays = Math.round(message.leftDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MonthCardInfo>, I>>(base?: I): MonthCardInfo {
    return MonthCardInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MonthCardInfo>, I>>(object: I): MonthCardInfo {
    const message = createBaseMonthCardInfo();
    message.cardType = object.cardType ?? 0;
    message.isPay = object.isPay ?? false;
    message.isReceive = object.isReceive ?? false;
    message.leftDays = object.leftDays ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
