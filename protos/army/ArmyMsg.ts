// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: army/ArmyMsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.road.yishi.proto.army";

export interface ArmyMsg {
  armyId: number;
  playerId: number;
  nickName: string;
  mapId: number;
  curPosX: number;
  curPosY: number;
  state: number;
  type: number;
  armyPawn: number[];
  simpleHeroInfo: string;
  consortiaId: number;
  consortiaName: string;
  fightingCapacity: number;
  gpOrder: number;
  grades: number;
  arm: string;
  cloth: string;
  job: number;
  changeSharp: number;
  heroTempId: number;
  userIds: number[];
  geste: number;
  isVip: boolean;
  vipType: number;
  mountTempId: number;
  mountGrade: number;
  wing: string;
  serverName: string;
  hat: string;
  fashionArm: string;
  fashionCloth: string;
  hide: boolean;
  appellid: number;
  fateSkills: string;
  petTempId: number;
  petQuqlity: number;
  petName: string;
  headId: number;
  onVehicle: boolean;
}

function createBaseArmyMsg(): ArmyMsg {
  return {
    armyId: 0,
    playerId: 0,
    nickName: "",
    mapId: 0,
    curPosX: 0,
    curPosY: 0,
    state: 0,
    type: 0,
    armyPawn: [],
    simpleHeroInfo: "",
    consortiaId: 0,
    consortiaName: "",
    fightingCapacity: 0,
    gpOrder: 0,
    grades: 0,
    arm: "",
    cloth: "",
    job: 0,
    changeSharp: 0,
    heroTempId: 0,
    userIds: [],
    geste: 0,
    isVip: false,
    vipType: 0,
    mountTempId: 0,
    mountGrade: 0,
    wing: "",
    serverName: "",
    hat: "",
    fashionArm: "",
    fashionCloth: "",
    hide: false,
    appellid: 0,
    fateSkills: "",
    petTempId: 0,
    petQuqlity: 0,
    petName: "",
    headId: 0,
    onVehicle: false,
  };
}

export const ArmyMsg: MessageFns<ArmyMsg> = {
  encode(message: ArmyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.armyId !== 0) {
      writer.uint32(8).int32(message.armyId);
    }
    if (message.playerId !== 0) {
      writer.uint32(16).int32(message.playerId);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.mapId !== 0) {
      writer.uint32(32).int32(message.mapId);
    }
    if (message.curPosX !== 0) {
      writer.uint32(40).int32(message.curPosX);
    }
    if (message.curPosY !== 0) {
      writer.uint32(48).int32(message.curPosY);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.type !== 0) {
      writer.uint32(64).int32(message.type);
    }
    writer.uint32(74).fork();
    for (const v of message.armyPawn) {
      writer.int32(v);
    }
    writer.join();
    if (message.simpleHeroInfo !== "") {
      writer.uint32(82).string(message.simpleHeroInfo);
    }
    if (message.consortiaId !== 0) {
      writer.uint32(88).int32(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      writer.uint32(98).string(message.consortiaName);
    }
    if (message.fightingCapacity !== 0) {
      writer.uint32(104).int32(message.fightingCapacity);
    }
    if (message.gpOrder !== 0) {
      writer.uint32(112).int32(message.gpOrder);
    }
    if (message.grades !== 0) {
      writer.uint32(120).int32(message.grades);
    }
    if (message.arm !== "") {
      writer.uint32(130).string(message.arm);
    }
    if (message.cloth !== "") {
      writer.uint32(138).string(message.cloth);
    }
    if (message.job !== 0) {
      writer.uint32(144).int32(message.job);
    }
    if (message.changeSharp !== 0) {
      writer.uint32(152).int32(message.changeSharp);
    }
    if (message.heroTempId !== 0) {
      writer.uint32(160).int32(message.heroTempId);
    }
    writer.uint32(170).fork();
    for (const v of message.userIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.geste !== 0) {
      writer.uint32(176).int32(message.geste);
    }
    if (message.isVip !== false) {
      writer.uint32(184).bool(message.isVip);
    }
    if (message.vipType !== 0) {
      writer.uint32(192).int32(message.vipType);
    }
    if (message.mountTempId !== 0) {
      writer.uint32(200).int32(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      writer.uint32(208).int32(message.mountGrade);
    }
    if (message.wing !== "") {
      writer.uint32(218).string(message.wing);
    }
    if (message.serverName !== "") {
      writer.uint32(226).string(message.serverName);
    }
    if (message.hat !== "") {
      writer.uint32(234).string(message.hat);
    }
    if (message.fashionArm !== "") {
      writer.uint32(242).string(message.fashionArm);
    }
    if (message.fashionCloth !== "") {
      writer.uint32(250).string(message.fashionCloth);
    }
    if (message.hide !== false) {
      writer.uint32(256).bool(message.hide);
    }
    if (message.appellid !== 0) {
      writer.uint32(264).int32(message.appellid);
    }
    if (message.fateSkills !== "") {
      writer.uint32(274).string(message.fateSkills);
    }
    if (message.petTempId !== 0) {
      writer.uint32(280).int32(message.petTempId);
    }
    if (message.petQuqlity !== 0) {
      writer.uint32(288).int32(message.petQuqlity);
    }
    if (message.petName !== "") {
      writer.uint32(298).string(message.petName);
    }
    if (message.headId !== 0) {
      writer.uint32(304).int32(message.headId);
    }
    if (message.onVehicle !== false) {
      writer.uint32(312).bool(message.onVehicle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArmyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArmyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.armyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mapId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.curPosX = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.curPosY = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.armyPawn.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.armyPawn.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.simpleHeroInfo = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.consortiaId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.consortiaName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.fightingCapacity = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.gpOrder = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.grades = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.arm = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.cloth = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.job = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.changeSharp = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.heroTempId = reader.int32();
          continue;
        }
        case 21: {
          if (tag === 168) {
            message.userIds.push(reader.int32());

            continue;
          }

          if (tag === 170) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.geste = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.isVip = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.vipType = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.mountTempId = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.mountGrade = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.wing = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.hat = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.fashionArm = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.fashionCloth = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.hide = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.appellid = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.fateSkills = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.petTempId = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.petQuqlity = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.petName = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.headId = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.onVehicle = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArmyMsg {
    return {
      armyId: isSet(object.armyId) ? globalThis.Number(object.armyId) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      mapId: isSet(object.mapId) ? globalThis.Number(object.mapId) : 0,
      curPosX: isSet(object.curPosX) ? globalThis.Number(object.curPosX) : 0,
      curPosY: isSet(object.curPosY) ? globalThis.Number(object.curPosY) : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      armyPawn: globalThis.Array.isArray(object?.armyPawn) ? object.armyPawn.map((e: any) => globalThis.Number(e)) : [],
      simpleHeroInfo: isSet(object.simpleHeroInfo) ? globalThis.String(object.simpleHeroInfo) : "",
      consortiaId: isSet(object.consortiaId) ? globalThis.Number(object.consortiaId) : 0,
      consortiaName: isSet(object.consortiaName) ? globalThis.String(object.consortiaName) : "",
      fightingCapacity: isSet(object.fightingCapacity) ? globalThis.Number(object.fightingCapacity) : 0,
      gpOrder: isSet(object.gpOrder) ? globalThis.Number(object.gpOrder) : 0,
      grades: isSet(object.grades) ? globalThis.Number(object.grades) : 0,
      arm: isSet(object.arm) ? globalThis.String(object.arm) : "",
      cloth: isSet(object.cloth) ? globalThis.String(object.cloth) : "",
      job: isSet(object.job) ? globalThis.Number(object.job) : 0,
      changeSharp: isSet(object.changeSharp) ? globalThis.Number(object.changeSharp) : 0,
      heroTempId: isSet(object.heroTempId) ? globalThis.Number(object.heroTempId) : 0,
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.Number(e)) : [],
      geste: isSet(object.geste) ? globalThis.Number(object.geste) : 0,
      isVip: isSet(object.isVip) ? globalThis.Boolean(object.isVip) : false,
      vipType: isSet(object.vipType) ? globalThis.Number(object.vipType) : 0,
      mountTempId: isSet(object.mountTempId) ? globalThis.Number(object.mountTempId) : 0,
      mountGrade: isSet(object.mountGrade) ? globalThis.Number(object.mountGrade) : 0,
      wing: isSet(object.wing) ? globalThis.String(object.wing) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      hat: isSet(object.hat) ? globalThis.String(object.hat) : "",
      fashionArm: isSet(object.fashionArm) ? globalThis.String(object.fashionArm) : "",
      fashionCloth: isSet(object.fashionCloth) ? globalThis.String(object.fashionCloth) : "",
      hide: isSet(object.hide) ? globalThis.Boolean(object.hide) : false,
      appellid: isSet(object.appellid) ? globalThis.Number(object.appellid) : 0,
      fateSkills: isSet(object.fateSkills) ? globalThis.String(object.fateSkills) : "",
      petTempId: isSet(object.petTempId) ? globalThis.Number(object.petTempId) : 0,
      petQuqlity: isSet(object.petQuqlity) ? globalThis.Number(object.petQuqlity) : 0,
      petName: isSet(object.petName) ? globalThis.String(object.petName) : "",
      headId: isSet(object.headId) ? globalThis.Number(object.headId) : 0,
      onVehicle: isSet(object.onVehicle) ? globalThis.Boolean(object.onVehicle) : false,
    };
  },

  toJSON(message: ArmyMsg): unknown {
    const obj: any = {};
    if (message.armyId !== 0) {
      obj.armyId = Math.round(message.armyId);
    }
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.mapId !== 0) {
      obj.mapId = Math.round(message.mapId);
    }
    if (message.curPosX !== 0) {
      obj.curPosX = Math.round(message.curPosX);
    }
    if (message.curPosY !== 0) {
      obj.curPosY = Math.round(message.curPosY);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.armyPawn?.length) {
      obj.armyPawn = message.armyPawn.map((e) => Math.round(e));
    }
    if (message.simpleHeroInfo !== "") {
      obj.simpleHeroInfo = message.simpleHeroInfo;
    }
    if (message.consortiaId !== 0) {
      obj.consortiaId = Math.round(message.consortiaId);
    }
    if (message.consortiaName !== "") {
      obj.consortiaName = message.consortiaName;
    }
    if (message.fightingCapacity !== 0) {
      obj.fightingCapacity = Math.round(message.fightingCapacity);
    }
    if (message.gpOrder !== 0) {
      obj.gpOrder = Math.round(message.gpOrder);
    }
    if (message.grades !== 0) {
      obj.grades = Math.round(message.grades);
    }
    if (message.arm !== "") {
      obj.arm = message.arm;
    }
    if (message.cloth !== "") {
      obj.cloth = message.cloth;
    }
    if (message.job !== 0) {
      obj.job = Math.round(message.job);
    }
    if (message.changeSharp !== 0) {
      obj.changeSharp = Math.round(message.changeSharp);
    }
    if (message.heroTempId !== 0) {
      obj.heroTempId = Math.round(message.heroTempId);
    }
    if (message.userIds?.length) {
      obj.userIds = message.userIds.map((e) => Math.round(e));
    }
    if (message.geste !== 0) {
      obj.geste = Math.round(message.geste);
    }
    if (message.isVip !== false) {
      obj.isVip = message.isVip;
    }
    if (message.vipType !== 0) {
      obj.vipType = Math.round(message.vipType);
    }
    if (message.mountTempId !== 0) {
      obj.mountTempId = Math.round(message.mountTempId);
    }
    if (message.mountGrade !== 0) {
      obj.mountGrade = Math.round(message.mountGrade);
    }
    if (message.wing !== "") {
      obj.wing = message.wing;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.hat !== "") {
      obj.hat = message.hat;
    }
    if (message.fashionArm !== "") {
      obj.fashionArm = message.fashionArm;
    }
    if (message.fashionCloth !== "") {
      obj.fashionCloth = message.fashionCloth;
    }
    if (message.hide !== false) {
      obj.hide = message.hide;
    }
    if (message.appellid !== 0) {
      obj.appellid = Math.round(message.appellid);
    }
    if (message.fateSkills !== "") {
      obj.fateSkills = message.fateSkills;
    }
    if (message.petTempId !== 0) {
      obj.petTempId = Math.round(message.petTempId);
    }
    if (message.petQuqlity !== 0) {
      obj.petQuqlity = Math.round(message.petQuqlity);
    }
    if (message.petName !== "") {
      obj.petName = message.petName;
    }
    if (message.headId !== 0) {
      obj.headId = Math.round(message.headId);
    }
    if (message.onVehicle !== false) {
      obj.onVehicle = message.onVehicle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArmyMsg>, I>>(base?: I): ArmyMsg {
    return ArmyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArmyMsg>, I>>(object: I): ArmyMsg {
    const message = createBaseArmyMsg();
    message.armyId = object.armyId ?? 0;
    message.playerId = object.playerId ?? 0;
    message.nickName = object.nickName ?? "";
    message.mapId = object.mapId ?? 0;
    message.curPosX = object.curPosX ?? 0;
    message.curPosY = object.curPosY ?? 0;
    message.state = object.state ?? 0;
    message.type = object.type ?? 0;
    message.armyPawn = object.armyPawn?.map((e) => e) || [];
    message.simpleHeroInfo = object.simpleHeroInfo ?? "";
    message.consortiaId = object.consortiaId ?? 0;
    message.consortiaName = object.consortiaName ?? "";
    message.fightingCapacity = object.fightingCapacity ?? 0;
    message.gpOrder = object.gpOrder ?? 0;
    message.grades = object.grades ?? 0;
    message.arm = object.arm ?? "";
    message.cloth = object.cloth ?? "";
    message.job = object.job ?? 0;
    message.changeSharp = object.changeSharp ?? 0;
    message.heroTempId = object.heroTempId ?? 0;
    message.userIds = object.userIds?.map((e) => e) || [];
    message.geste = object.geste ?? 0;
    message.isVip = object.isVip ?? false;
    message.vipType = object.vipType ?? 0;
    message.mountTempId = object.mountTempId ?? 0;
    message.mountGrade = object.mountGrade ?? 0;
    message.wing = object.wing ?? "";
    message.serverName = object.serverName ?? "";
    message.hat = object.hat ?? "";
    message.fashionArm = object.fashionArm ?? "";
    message.fashionCloth = object.fashionCloth ?? "";
    message.hide = object.hide ?? false;
    message.appellid = object.appellid ?? 0;
    message.fateSkills = object.fateSkills ?? "";
    message.petTempId = object.petTempId ?? 0;
    message.petQuqlity = object.petQuqlity ?? 0;
    message.petName = object.petName ?? "";
    message.headId = object.headId ?? 0;
    message.onVehicle = object.onVehicle ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
